/********************************************************************

  jniRescueb.cpp

  The main object for RESCUE's Java hookup.

  Rod Hanks,  May, 2007

*********************************************************************/
#include <malloc.h>
#include <string.h>
#include "myHeaders.h"
#include "boolSupport.h"
#include "org_Rescue_rjni_cSetRescueGeometryUnit.h"
#include "cSetRescueGeometryUnit.h"
#include "org_Rescue_rjni_cSetRescueGridAxis.h"
#include "cSetRescueGridAxis.h"
#include "org_Rescue_rjni_cSetRescueHistory.h"
#include "cSetRescueHistory.h"
#include "org_Rescue_rjni_cSetRescueHorizon.h"
#include "cSetRescueHorizon.h"
#include "org_Rescue_rjni_cSetRescueIJSurface.h"
#include "cSetRescueIJSurface.h"
#include "org_Rescue_rjni_cSetRescueInterfaceSurfaceDesc.h"
#include "cSetRescueInterfaceSurfaceDesc.h"
#include "org_Rescue_rjni_cSetRescueLookup.h"
#include "cSetRescueLookup.h"
#include "org_Rescue_rjni_cSetRescueMacroVolume.h"
#include "cSetRescueMacroVolume.h"
#include "org_Rescue_rjni_cSetRescueModelPropertyGroup.h"
#include "cSetRescueModelPropertyGroup.h"
#include "org_Rescue_rjni_cSetRescuePoint.h"
#include "cSetRescuePoint.h"
#include "org_Rescue_rjni_cSetRescuePolyLine.h"
#include "cSetRescuePolyLine.h"
#include "org_Rescue_rjni_cSetRescuePolyLineNode.h"
#include "cSetRescuePolyLineNode.h"
#include "org_Rescue_rjni_cSetRescuePolyLineNodeBUG.h"
#include "cSetRescuePolyLineNodeBUG.h"
#include "org_Rescue_rjni_cSetRescuePolyLineNodeUV.h"
#include "cSetRescuePolyLineNodeUV.h"
#include "org_Rescue_rjni_cSetRescuePolyLineNodeUVT.h"
#include "cSetRescuePolyLineNodeUVT.h"
#include "org_Rescue_rjni_cSetRescuePolyLineStub.h"
#include "cSetRescuePolyLineStub.h"
#include "org_Rescue_rjni_cSetRescueProperty.h"
#include "cSetRescueProperty.h"
#include "org_Rescue_rjni_cSetRescuePropertyGroup.h"
#include "cSetRescuePropertyGroup.h"
#include "org_Rescue_rjni_cSetRescueReferenceSurface.h"
#include "cSetRescueReferenceSurface.h"
#include "org_Rescue_rjni_cSetRescueReservoir.h"
#include "cSetRescueReservoir.h"
#include "org_Rescue_rjni_cSetRescueSection.h"
#include "cSetRescueSection.h"
#include "org_Rescue_rjni_cSetRescueSOctTreeNode.h"
#include "cSetRescueSOctTreeNode.h"
#include "org_Rescue_rjni_cSetRescueStairSteppedFault.h"
#include "cSetRescueStairSteppedFault.h"
#include "org_Rescue_rjni_cSetRescueSurfaceCell.h"
#include "cSetRescueSurfaceCell.h"
#include "org_Rescue_rjni_cSetRescueSurfaceToGrid.h"
#include "cSetRescueSurfaceToGrid.h"
#include "org_Rescue_rjni_cSetRescueTimeStepGroup.h"
#include "cSetRescueTimeStepGroup.h"
#include "org_Rescue_rjni_cSetRescueTriangleFace.h"
#include "cSetRescueTriangleFace.h"
#include "org_Rescue_rjni_cSetRescueTriangleVertex.h"
#include "cSetRescueTriangleVertex.h"
#include "org_Rescue_rjni_cSetRescueTrimEdge.h"
#include "cSetRescueTrimEdge.h"
#include "org_Rescue_rjni_cSetRescueTrimLoop.h"
#include "cSetRescueTrimLoop.h"
#include "org_Rescue_rjni_cSetRescueTrimLoopStub.h"
#include "cSetRescueTrimLoopStub.h"
#include "org_Rescue_rjni_cSetRescueTrimVertex.h"
#include "cSetRescueTrimVertex.h"
#include "org_Rescue_rjni_cSetRescueUnit.h"
#include "cSetRescueUnit.h"
#include "org_Rescue_rjni_cSetRescueWellbore.h"
#include "cSetRescueWellbore.h"
#include "org_Rescue_rjni_cSetRescueWellboreCell.h"
#include "cSetRescueWellboreCell.h"
#include "org_Rescue_rjni_cSetRescueWellboreProperty.h"
#include "cSetRescueWellboreProperty.h"
#include "org_Rescue_rjni_cSetRescueWellboreSampling.h"
#include "cSetRescueWellboreSampling.h"
#include "org_Rescue_rjni_cSetRescueWellboreSurface.h"
#include "cSetRescueWellboreSurface.h"
#include "org_Rescue_rjni_cSetRescueWireframe.h"
#include "cSetRescueWireframe.h"
#include "org_Rescue_rjni_cSetString.h"
#include "cSetString.h"
#include "org_Rescue_rjni_myHeaders.h"
#include "myHeaders.h"
#include "org_Rescue_rjni_RCH2DArray.h"
#include "RCH2DArray.h"
#include "org_Rescue_rjni_RCH3DArray.h"
#include "RCH3DArray.h"
#include "org_Rescue_rjni_RCHf2DArray.h"
#include "RCHf2DArray.h"
#include "org_Rescue_rjni_RCHf3DArray.h"
#include "RCHf3DArray.h"
#include "org_Rescue_rjni_RescueArray.h"
#include "RescueArray.h"
#include "org_Rescue_rjni_RescueArray2dVector.h"
#include "RescueArray2dVector.h"
#include "org_Rescue_rjni_RescueArray3dVector.h"
#include "RescueArray3dVector.h"
#include "org_Rescue_rjni_RescueArrayByte.h"
#include "RescueArrayByte.h"
#include "org_Rescue_rjni_RescueArrayDouble.h"
#include "RescueArrayDouble.h"
#include "org_Rescue_rjni_RescueArrayFloat.h"
#include "RescueArrayFloat.h"
#include "org_Rescue_rjni_RescueArrayFragment.h"
#include "RescueArrayFragment.h"
#include "org_Rescue_rjni_RescueArrayFragment2dVector.h"
#include "RescueArrayFragment2dVector.h"
#include "org_Rescue_rjni_RescueArrayFragment3dVector.h"
#include "RescueArrayFragment3dVector.h"
#include "org_Rescue_rjni_RescueArrayFragmentByte.h"
#include "RescueArrayFragmentByte.h"
#include "org_Rescue_rjni_RescueArrayFragmentFloat.h"
#include "RescueArrayFragmentFloat.h"
#include "org_Rescue_rjni_RescueArrayFragmentDouble.h"
#include "RescueArrayFragmentDouble.h"
#include "org_Rescue_rjni_RescueArrayFragmentInt.h"
#include "RescueArrayFragmentInt.h"
#include "org_Rescue_rjni_RescueArrayFragmentShort.h"
#include "RescueArrayFragmentShort.h"
#include "org_Rescue_rjni_RescueArrayInt.h"
#include "RescueArrayInt.h"
#include "org_Rescue_rjni_RescueArrayShort.h"
#include "RescueArrayShort.h"
#include "org_Rescue_rjni_RescueBitArray.h"
#include "RescueBitArray.h"
#include "org_Rescue_rjni_RescueBlock.h"
#include "RescueBlock.h"
#include "org_Rescue_rjni_RescueBlockUnit.h"
#include "RescueBlockUnit.h"
#include "org_Rescue_rjni_RescueBlockUnitHorizonSurface.h"
#include "RescueBlockUnitHorizonSurface.h"
#include "org_Rescue_rjni_RescueBlockUnitSide.h"
#include "RescueBlockUnitSide.h"
#include "org_Rescue_rjni_RescueColor.h"
#include "RescueColor.h"
#include "org_Rescue_rjni_RescueColorTable.h"
#include "RescueColorTable.h"
#include "org_Rescue_rjni_RescueColorTableList.h"
#include "RescueColorTableList.h"
#include "org_Rescue_rjni_RescueContext.h"
#include "RescueContext.h"
#include "org_Rescue_rjni_RescueCoordinateLine.h"
#include "RescueCoordinateLine.h"
#include "org_Rescue_rjni_RescueCoordinatePolyLine.h"
#include "RescueCoordinatePolyLine.h"
#include "org_Rescue_rjni_RescueCoordinateSystem.h"
#include "RescueCoordinateSystem.h"
#include "org_Rescue_rjni_RescueCoordinateSystemAxis.h"
#include "RescueCoordinateSystemAxis.h"
#include "org_Rescue_rjni_RescueDataContainer.h"
#include "RescueDataContainer.h"
#include "org_Rescue_rjni_RescueEdgeSet.h"
#include "RescueEdgeSet.h"
#include "org_Rescue_rjni_RescueEdgeSetStub.h"
#include "RescueEdgeSetStub.h"
#include "org_Rescue_rjni_RescueEventDescr.h"
#include "RescueEventDescr.h"
#include "org_Rescue_rjni_RescueFaultIntersection.h"
#include "RescueFaultIntersection.h"
#include "org_Rescue_rjni_RescueGeobody.h"
#include "RescueGeobody.h"
#include "org_Rescue_rjni_RescueGeobodyPart.h"
#include "RescueGeobodyPart.h"
#include "org_Rescue_rjni_RescueGeobodySurface.h"
#include "RescueGeobodySurface.h"
#include "org_Rescue_rjni_RescueGeobodyVolume.h"
#include "RescueGeobodyVolume.h"
#include "org_Rescue_rjni_RescueGeometry.h"
#include "RescueGeometry.h"
#include "org_Rescue_rjni_RescueGeometryUnit.h"
#include "RescueGeometryUnit.h"
#include "org_Rescue_rjni_RescueGrid.h"
#include "RescueGrid.h"
#include "org_Rescue_rjni_RescueGridAxis.h"
#include "RescueGridAxis.h"
#include "org_Rescue_rjni_RescueHistory.h"
#include "RescueHistory.h"
#include "org_Rescue_rjni_RescueHistoryObject.h"
#include "RescueHistoryObject.h"
#include "org_Rescue_rjni_RescueHorizon.h"
#include "RescueHorizon.h"
#include "org_Rescue_rjni_RescueIdTree.h"
#include "RescueIdTree.h"
#include "org_Rescue_rjni_RescueIdTreeNode.h"
#include "RescueIdTreeNode.h"
#include "org_Rescue_rjni_RescueIJSurface.h"
#include "RescueIJSurface.h"
#include "org_Rescue_rjni_RescueInterfaceSurfaceDesc.h"
#include "RescueInterfaceSurfaceDesc.h"
#include "org_Rescue_rjni_RescueLogicalOrder.h"
#include "RescueLogicalOrder.h"
#include "org_Rescue_rjni_RescueLogicalOrderEntry.h"
#include "RescueLogicalOrderEntry.h"
#include "org_Rescue_rjni_RescueLookup.h"
#include "RescueLookup.h"
#include "org_Rescue_rjni_RescueLookupItem.h"
#include "RescueLookupItem.h"
#include "org_Rescue_rjni_RescueLookupString.h"
#include "RescueLookupString.h"
#include "org_Rescue_rjni_RescueLookupTable.h"
#include "RescueLookupTable.h"
#include "org_Rescue_rjni_RescueMacroVolume.h"
#include "RescueMacroVolume.h"
#include "org_Rescue_rjni_RescueModel.h"
#include "RescueModel.h"
#include "org_Rescue_rjni_RescueModelPropertyGroup.h"
#include "RescueModelPropertyGroup.h"
#include "org_Rescue_rjni_RescueObject.h"
#include "RescueObject.h"
#include "org_Rescue_rjni_RescueParametricLGRMap.h"
#include "RescueParametricLGRMap.h"
#include "org_Rescue_rjni_RescuePillar.h"
#include "RescuePillar.h"
#include "org_Rescue_rjni_RescuePoint.h"
#include "RescuePoint.h"
#include "org_Rescue_rjni_RescuePolyLine.h"
#include "RescuePolyLine.h"
#include "org_Rescue_rjni_RescuePolyLineNode.h"
#include "RescuePolyLineNode.h"
#include "org_Rescue_rjni_RescuePolyLineNodeBUG.h"
#include "RescuePolyLineNodeBUG.h"
#include "org_Rescue_rjni_RescuePolyLineNodeUV.h"
#include "RescuePolyLineNodeUV.h"
#include "org_Rescue_rjni_RescuePolyLineNodeUVT.h"
#include "RescuePolyLineNodeUVT.h"
#include "org_Rescue_rjni_RescuePolyLineStub.h"
#include "RescuePolyLineStub.h"
#include "org_Rescue_rjni_RescueProgressReporter.h"
#include "RescueProgressReporter.h"
#include "org_Rescue_rjni_RescueProperty.h"
#include "RescueProperty.h"
#include "org_Rescue_rjni_RescuePropertyGroup.h"
#include "RescuePropertyGroup.h"
#include "org_Rescue_rjni_RescueQuadrupletArray.h"
#include "RescueQuadrupletArray.h"
#include "org_Rescue_rjni_RescueRadialGrid.h"
#include "RescueRadialGrid.h"
#include "org_Rescue_rjni_RescueReferenceSurface.h"
#include "RescueReferenceSurface.h"
#include "org_Rescue_rjni_RescueReservoir.h"
#include "RescueReservoir.h"
#include "org_Rescue_rjni_RescueSection.h"
#include "RescueSection.h"
#include "org_Rescue_rjni_RescueSOctTreeNode.h"
#include "RescueSOctTreeNode.h"
#include "org_Rescue_rjni_RescueSplineCoef.h"
#include "RescueSplineCoef.h"
#include "org_Rescue_rjni_RescueSplitLine.h"
#include "RescueSplitLine.h"
#include "org_Rescue_rjni_RescueSplitPoint.h"
#include "RescueSplitPoint.h"
#include "org_Rescue_rjni_RescueStairSteppedFault.h"
#include "RescueStairSteppedFault.h"
#include "org_Rescue_rjni_RescueSurface.h"
#include "RescueSurface.h"
#include "org_Rescue_rjni_RescueSurfaceCell.h"
#include "RescueSurfaceCell.h"
#include "org_Rescue_rjni_RescueSurfaceToGrid.h"
#include "RescueSurfaceToGrid.h"
#include "org_Rescue_rjni_RescueTimeStepGroup.h"
#include "RescueTimeStepGroup.h"
#include "org_Rescue_rjni_RescueTriangleFace.h"
#include "RescueTriangleFace.h"
#include "org_Rescue_rjni_RescueTriangleVertex.h"
#include "RescueTriangleVertex.h"
#include "org_Rescue_rjni_RescueTriangulatedSurface.h"
#include "RescueTriangulatedSurface.h"
#include "org_Rescue_rjni_RescueTrimEdge.h"
#include "RescueTrimEdge.h"
#include "org_Rescue_rjni_RescueTrimLoop.h"
#include "RescueTrimLoop.h"
#include "org_Rescue_rjni_RescueTrimLoopStub.h"
#include "RescueTrimLoopStub.h"
#include "org_Rescue_rjni_RescueTrimVertex.h"
#include "RescueTrimVertex.h"
#include "org_Rescue_rjni_RescueTrimVertexStub.h"
#include "RescueTrimVertexStub.h"
#include "org_Rescue_rjni_RescueTripletArray.h"
#include "RescueTripletArray.h"
#include "org_Rescue_rjni_RescueTruncation.h"
#include "RescueTruncation.h"
#include "org_Rescue_rjni_RescueUnit.h"
#include "RescueUnit.h"
#include "org_Rescue_rjni_RescueUnstructuredGrid.h"
#include "RescueUnstructuredGrid.h"
#include "org_Rescue_rjni_RescueVertex.h"
#include "RescueVertex.h"
#include "org_Rescue_rjni_RescueWellbore.h"
#include "RescueWellbore.h"
#include "org_Rescue_rjni_RescueWellboreCell.h"
#include "RescueWellboreCell.h"
#include "org_Rescue_rjni_RescueWellboreProperty.h"
#include "RescueWellboreProperty.h"
#include "org_Rescue_rjni_RescueWellboreSampling.h"
#include "RescueWellboreSampling.h"
#include "org_Rescue_rjni_RescueWellboreSurface.h"
#include "RescueWellboreSurface.h"
#include "org_Rescue_rjni_RescueWireframe.h"
#include "RescueWireframe.h"
#include "org_Rescue_rjni_RescueWireframeCallBack.h"
#include "RescueWireframeCallBack.h"
#include "org_Rescue_rjni_RescueWireframeOwner.h"
#include "RescueWireframeOwner.h"
#include "org_Rescue_rjni_RescueWireframeStub.h"
#include "RescueWireframeStub.h"
#include "org_Rescue_rjni_RescueZStack.h"
#include "RescueZStack.h"
#include "org_Rescue_rjni_RescueGeometryPropertyList.h"
#include "RescueGeometryPropertyList.h"
#include "org_Rescue_rjni_RescueGeometryLGRList.h"
#include "RescueGeometryLGRList.h"
#include "org_Rescue_rjni_cBagRescueTimeStepGroup.h"
#include "cBagRescueTimeStepGroup.h"
#include "org_Rescue_rjni_RescueTimeStepManager.h"
#include "RescueTimeStepManager.h"
#include "org_Rescue_rjni_RescueDocumentList.h"
#include "RescueDocumentList.h"
#include "org_Rescue_rjni_RescueDocument.h"
#include "RescueDocument.h"
#include "org_Rescue_rjni_RescueUOM.h"
#include "RescueUOM.h"

void throwByName(JNIEnv *env, const char *name, const char *msg);
float *copyFloatArray(float *arrayIn, RESCUEINT64 arrayLength);

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_Create_1RescueGeometryUnit0  (JNIEnv *env, jobject obj
  ,jlong parentGeometryNdx
  ,jlong relatedUnitNdx
  ,jint topLayerNdx
  ,jint bottomLayerNdx)
{
  try
  {
    RescueGeometry * parentGeometry = (RescueGeometry *) parentGeometryNdx;
    RescueUnit * relatedUnit = (RescueUnit *) relatedUnitNdx;
    RescueGeometryUnit *myReturn = new RescueGeometryUnit((RescueGeometry *) parentGeometry,
                (RescueUnit *) relatedUnit,
                (int) topLayerNdx,
                (int) bottomLayerNdx);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_RescueGeometryUnit");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_RelatedUnit1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    RescueUnit * myReturn = myObject->RelatedUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_RelatedUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_SetRelatedUnit2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitInNdx)
{
  try
  {
    RescueUnit * unitIn = (RescueUnit *) unitInNdx;
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    myObject->SetRelatedUnit((RescueUnit *) unitIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_SetRelatedUnit");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_TopLayerNdx3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    jlong myReturn = myObject->TopLayerNdx();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_TopLayerNdx");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_SetTopLayerNdx4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndxIn)
{
  try
  {
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    myObject->SetTopLayerNdx(ndxIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_SetTopLayerNdx");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_BottomLayerNdx5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    jlong myReturn = myObject->BottomLayerNdx();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_BottomLayerNdx");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_SetBottomLayerNdx6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndxIn)
{
  try
  {
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    myObject->SetBottomLayerNdx(ndxIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_SetBottomLayerNdx");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueGeometryUnit_IsOfType7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueGeometryUnit *myObject = (RescueGeometryUnit *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryUnit_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGrid_Delete_1RescueGrid
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueGrid *myObj = (RescueGrid *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_~RescueGrid");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGridAxis_Create_1RescueGridAxis1
  (JNIEnv *env, jobject obj, jlong contextNdx, jlong lowBound, jlong count, jfloat origin, jfloat step)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueGridAxis *myReturn = new RescueGridAxis(context, lowBound, count, origin, step);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_RescueGridAxis");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid8
  (JNIEnv *env, jobject obj, jlong contextNdx)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueGrid *myReturn = new RescueGrid(context);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGrid_AddAxis15
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong axisNdx)
{
  try
  {
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RescueGridAxis *axisObj = (RescueGridAxis *) axisNdx;
    myObject->AddAxis(axisObj);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_AddAxis");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid1  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jlong i_lowbound
  ,jlong i_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid2  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid3  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid4  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid5  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jlong k_lowbound
  ,jlong k_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (RESCUEINT64) k_lowbound,
                (RESCUEINT64) k_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid6  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jlong k_lowbound
  ,jlong k_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (RESCUEINT64) k_lowbound,
                (RESCUEINT64) k_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Create_1RescueGrid7  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jint displayOrientationInInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat k_origin
  ,jfloat k_step
  ,jlong k_lowbound
  ,jlong k_count)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueCoordinateSystem::Orientation displayOrientationIn = (RescueCoordinateSystem::Orientation) displayOrientationInInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    RescueGrid *myReturn = new RescueGrid((RescueContext *) context,
                (RescueCoordinateSystem::Orientation) displayOrientationIn,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) k_origin,
                (float) k_step,
                (RESCUEINT64) k_lowbound,
                (RESCUEINT64) k_count);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_RescueGrid");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Dimensions8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    jlong myReturn = myObject->Dimensions();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_Dimensions");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_NodeCount9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean cellCenteredBool)
{
  try
  {
    RESCUEBOOL cellCentered = ((cellCenteredBool == JNI_TRUE) ? TRUE : FALSE);
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RESCUEINT64 myReturn = myObject->NodeCount64((RESCUEBOOL) cellCentered);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_NodeCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Vertices10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RESCUEINT64 myReturn = myObject->Vertices64();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_Vertices");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGrid_Axis11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint zeroBasedOrdinal)
{
  try
  {
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RescueGridAxis * myReturn = myObject->Axis((int) zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_Axis");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueGrid_DisplayOrientation12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RescueCoordinateSystem::Orientation myReturn = myObject->DisplayOrientation();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_DisplayOrientation");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueGrid_IsOfType13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueGrid_IsRegular14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint which)
{
  try
  {
    RescueGrid *myObject = (RescueGrid *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsRegular((int) which);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGrid_IsRegular");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGridAxis_ParentGrid0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RescueGrid * myReturn = myObject->ParentGrid();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_ParentGrid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGridAxis_LowBound1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RESCUEINT64 myReturn = myObject->LowBound64();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_LowBound");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGridAxis_Count2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RESCUEINT64 myReturn = myObject->Count64();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_Count");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueGridAxis_IsRegular3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsRegular();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_IsRegular");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGridAxis_RelatedCoordinateSystemAxis4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RescueCoordinateSystemAxis * myReturn = myObject->RelatedCoordinateSystemAxis();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_RelatedCoordinateSystemAxis");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueGridAxis_ValueAt5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    float myReturn = myObject->ValueAt((RESCUEINT64) ndx);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_ValueAt");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueGridAxis_Origin6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    float myReturn = myObject->Origin();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_Origin");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueGridAxis_Step7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    float myReturn = myObject->Step();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_Step");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGridAxis_SetOrigin8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat originIn)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    myObject->SetOrigin((float) originIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_SetOrigin");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGridAxis_SetStep9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat stepIn)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    myObject->SetStep((float) stepIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_SetStep");
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueGridAxis_AxisIndex10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RescueGridAxis::GridNdx myReturn = myObject->AxisIndex();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_AxisIndex");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueGridAxis_IsOfType11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueGridAxis *myObject = (RescueGridAxis *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGridAxis_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistory_Create_1RescueHistory0  (JNIEnv *env, jobject obj
  ,jlong parentModelInNdx
  ,jstring changeDescriptionStr
  ,jstring parsableDescriptionStr)
{
  try
  {
    RescueModel * parentModelIn = (RescueModel *) parentModelInNdx;
    jboolean changeDescriptionBool;
    const char *changeDescription = env->GetStringUTFChars(changeDescriptionStr, &changeDescriptionBool);
    jboolean parsableDescriptionBool;
    const char *parsableDescription = env->GetStringUTFChars(parsableDescriptionStr, &parsableDescriptionBool);
    RescueHistory *myReturn = new RescueHistory((RescueModel *) parentModelIn,
                (char *) changeDescription,
                (char *) parsableDescription);
    env->ReleaseStringUTFChars(changeDescriptionStr, changeDescription);
    env->ReleaseStringUTFChars(parsableDescriptionStr, parsableDescription);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_RescueHistory");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_AddObjectChanged1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newObjectChangedNdx)
{
  try
  {
    RescueHistoryObject * newObjectChanged = (RescueHistoryObject *) newObjectChangedNdx;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    myObject->AddObjectChanged((RescueHistoryObject *) newObjectChanged);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_AddObjectChanged");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_AddRelatedObject2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newRelatedObjectNdx)
{
  try
  {
    RescueHistoryObject * newRelatedObject = (RescueHistoryObject *) newRelatedObjectNdx;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    myObject->AddRelatedObject((RescueHistoryObject *) newRelatedObject);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_AddRelatedObject");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_AddRelatedHistory3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newRelatedHistoryNdx)
{
  try
  {
    RescueHistory * newRelatedHistory = (RescueHistory *) newRelatedHistoryNdx;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    myObject->AddRelatedHistory((RescueHistory *) newRelatedHistory);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_AddRelatedHistory");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_RemoveObjectChanged4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newObjectChangedNdx)
{
  try
  {
    RescueHistoryObject * newObjectChanged = (RescueHistoryObject *) newObjectChangedNdx;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    myObject->RemoveObjectChanged((RescueHistoryObject *) newObjectChanged);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_RemoveObjectChanged");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_RemoveRelatedObject5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newRelatedObjectNdx)
{
  try
  {
    RescueHistoryObject * newRelatedObject = (RescueHistoryObject *) newRelatedObjectNdx;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    myObject->RemoveRelatedObject((RescueHistoryObject *) newRelatedObject);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_RemoveRelatedObject");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_RemoveRelatedHistory6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newRelatedHistoryNdx)
{
  try
  {
    RescueHistory * newRelatedHistory = (RescueHistory *) newRelatedHistoryNdx;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    myObject->RemoveRelatedHistory((RescueHistory *) newRelatedHistory);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_RemoveRelatedHistory");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistory_ParentModel7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueHistory_ChangeDescription8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RCHString * myReturn = myObject->ChangeDescription();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_ChangeDescription");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueHistory_ParsableDescription9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RCHString * myReturn = myObject->ParsableDescription();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_ParsableDescription");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueHistory_TimeStamp10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RCHString * myReturn = myObject->TimeStamp();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_TimeStamp");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistory_NthForwardRelatedHistory11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RescueHistory * myReturn = myObject->NthForwardRelatedHistory(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_NthForwardRelatedHistory");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistory_NthBackwardRelatedHistory12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RescueHistory * myReturn = myObject->NthBackwardRelatedHistory(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_NthBackwardRelatedHistory");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistory_NthChangedObject13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RescueHistoryObject * myReturn = myObject->NthChangedObject(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_NthChangedObject");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistory_NthRelatedObject14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RescueHistoryObject * myReturn = myObject->NthRelatedObject(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_NthRelatedObject");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_Delete_1RescueHistory
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueHistory *myObj = (RescueHistory *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_~RescueHistory");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueHistory_IsOfType16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_SetChangeDescription17
  (JNIEnv *env , jobject obj, jlong nativeNdx, jstring changeDesc)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    jboolean descBool;
    const char *desc = env->GetStringUTFChars(changeDesc, &descBool);
    myObject->SetChangeDescription(desc);
    env->ReleaseStringUTFChars(changeDesc, desc);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_SetChangeDescription");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistory_SetParsableDescription18
  (JNIEnv *env , jobject obj, jlong nativeNdx, jstring parsableDesc)
{
  try
  {
    RescueHistory *myObject = (RescueHistory *) nativeNdx;
    jboolean descBool;
    const char *desc = env->GetStringUTFChars(parsableDesc, &descBool);
    myObject->SetParsableDescription(desc);
    env->ReleaseStringUTFChars(parsableDesc, desc);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistory_SetChangeDescription");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistoryObject_Create_1RescueHistoryObject0  (JNIEnv *env, jobject obj
  ,jlong contextNdx)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueHistoryObject *myReturn = new RescueHistoryObject((RescueContext *) context);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistoryObject_RescueHistoryObject");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHistoryObject_Delete_1RescueHistoryObject
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueHistoryObject *myObj = (RescueHistoryObject *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistoryObject_~RescueHistoryObject");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueHistoryObject_IsOfType2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueHistoryObject *myObject = (RescueHistoryObject *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistoryObject_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistoryObject_NthObjectChanges3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHistoryObject *myObject = (RescueHistoryObject *) nativeNdx;
    RescueHistory * myReturn = myObject->NthObjectChanges(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistoryObject_NthObjectChanges");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHistoryObject_NthRelatedChanges4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHistoryObject *myObject = (RescueHistoryObject *) nativeNdx;
    RescueHistory * myReturn = myObject->NthRelatedChanges(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHistoryObject_NthRelatedChanges");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_Create_1RescueHorizon0  (JNIEnv *env, jobject obj
  ,jstring horizonNameInStr
  ,jlong parentModelInNdx)
{
  try
  {
    jboolean horizonNameInBool;
    const char *horizonNameIn = env->GetStringUTFChars(horizonNameInStr, &horizonNameInBool);
    RescueModel * parentModelIn = (RescueModel *) parentModelInNdx;
    RescueHorizon *myReturn = new RescueHorizon((char *) horizonNameIn,
                (RescueModel *) parentModelIn);
    env->ReleaseStringUTFChars(horizonNameInStr, horizonNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_RescueHorizon");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHorizon_Delete_1RescueHorizon
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueHorizon *myObj = (RescueHorizon *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_~RescueHorizon");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueHorizon_HorizonName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RCHString * myReturn = myObject->HorizonName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_HorizonName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueHorizon_SetHorizonName3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newHorizonNameStr)
{
  try
  {
    jboolean newHorizonNameBool;
    const char *newHorizonName = env->GetStringUTFChars(newHorizonNameStr, &newHorizonNameBool);
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    myObject->SetHorizonName((char *) newHorizonName);
    env->ReleaseStringUTFChars(newHorizonNameStr, newHorizonName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_SetHorizonName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_ParentModel4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_BlockUnitHorizonSurfaceCount5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    jlong myReturn = myObject->BlockUnitHorizonSurfaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_BlockUnitHorizonSurfaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_NthRescueBlockUnitHorizonSurface6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RescueBlockUnitHorizonSurface * myReturn = myObject->NthRescueBlockUnitHorizonSurface(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_NthRescueBlockUnitHorizonSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_HorizonSurfaceIdentifiedBy7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RescueBlockUnitHorizonSurface * myReturn = myObject->HorizonSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_HorizonSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_SurfaceIJIdentifiedBy8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RescueIJSurface * myReturn = myObject->SurfaceIJIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_SurfaceIJIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_SurfaceTriangulatedIdentifiedBy9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->SurfaceTriangulatedIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_SurfaceTriangulatedIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_PropertyIdentifiedBy10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RescueProperty * myReturn = myObject->PropertyIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_PropertyIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueHorizon_DropRescueBlockUnitHorizonSurface11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueBlockUnitHorizonSurface * unitToDrop = (RescueBlockUnitHorizonSurface *) unitToDropNdx;
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueBlockUnitHorizonSurface((RescueBlockUnitHorizonSurface *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_DropRescueBlockUnitHorizonSurface");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueHorizon_AnyFileTruncated12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueHorizon_IsOfType13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueHorizon_IsNamed14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring possibleNameStr)
{
  try
  {
    jboolean possibleNameBool;
    const char *possibleName = env->GetStringUTFChars(possibleNameStr, &possibleNameBool);
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) possibleName);
    env->ReleaseStringUTFChars(possibleNameStr, possibleName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_UnitAboveID15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    jlong myReturn = myObject->UnitAboveID();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_UnitAboveID");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueHorizon_UnitBelowID16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueHorizon *myObject = (RescueHorizon *) nativeNdx;
    jlong myReturn = myObject->UnitBelowID();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueHorizon_UnitBelowID");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIdTree_Create_1RescueIdTree0  (JNIEnv *env, jobject obj
)
{
  try
  {
    RescueIdTree *myReturn = new RescueIdTree();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTree_RescueIdTree");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueIdTree_Delete_1RescueIdTree
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueIdTree *myObj = (RescueIdTree *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTree_~RescueIdTree");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueIdTree_Add2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newObjectNdx)
{
  try
  {
    RescueObject * newObject = (RescueObject *) newObjectNdx;
    RescueIdTree *myObject = (RescueIdTree *) nativeNdx;
    myObject->Add((RescueObject *) newObject);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTree_Add");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueIdTree_Delete3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueObject * existingObject = (RescueObject *) existingObjectNdx;
    RescueIdTree *myObject = (RescueIdTree *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Delete((RescueObject *) existingObject);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTree_Delete");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIdTree_Find4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueIdTree *myObject = (RescueIdTree *) nativeNdx;
    RescueObject * myReturn = myObject->Find(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTree_Find");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIdTree_Count5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIdTree *myObject = (RescueIdTree *) nativeNdx;
    jlong myReturn = myObject->Count64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTree_Count");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueIdTreeNode_Delete_1RescueIdTreeNode
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueIdTreeNode *myObj = (RescueIdTreeNode *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIdTreeNode_~RescueIdTreeNode");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_Create_1RescueIJSurface0  (JNIEnv *env, jobject obj
  ,jlong surfaceInNdx
  ,jint orientationInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue)
{
  try
  {
    RescueSurface * surfaceIn = (RescueSurface *) surfaceInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    RescueIJSurface *myReturn = new RescueIJSurface((RescueSurface *) surfaceIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_RescueIJSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_Create_1RescueIJSurface1  (JNIEnv *env, jobject obj
  ,jlong surfaceInNdx
  ,jint orientationInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray valuesArray)
{
  jfloat *values = 0;
  try
  {
    RescueSurface * surfaceIn = (RescueSurface *) surfaceInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    if (valuesArray != 0)
    {
      values = (jfloat *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueIJSurface *myReturn = new RescueIJSurface((RescueSurface *) surfaceIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) values);
    if (valuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_RescueIJSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_Create_1RescueIJSurface2  (JNIEnv *env, jobject obj
  ,jlong surfaceInNdx
  ,jint orientationInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue)
{
  try
  {
    RescueSurface * surfaceIn = (RescueSurface *) surfaceInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueIJSurface *myReturn = new RescueIJSurface((RescueSurface *) surfaceIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_RescueIJSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_Create_1RescueIJSurface3  (JNIEnv *env, jobject obj
  ,jlong surfaceInNdx
  ,jint orientationInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray tripletArrayArray)
{
  jfloat *tripletArray = 0;
  try
  {
    RescueSurface * surfaceIn = (RescueSurface *) surfaceInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    if (tripletArrayArray != 0)
    {
      tripletArray = (jfloat *) env->GetPrimitiveArrayCritical(tripletArrayArray, 0);
    }
    RescueIJSurface *myReturn = new RescueIJSurface((RescueSurface *) surfaceIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) tripletArray);
    if (tripletArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (tripletArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_RescueIJSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_Grid4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueGrid * myReturn = myObject->Grid();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_Grid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_Geometry5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueTripletArray * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_SurfaceCellCount6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    jlong myReturn = myObject->SurfaceCellCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_SurfaceCellCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_NthSurfaceCell7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueSurfaceCell * myReturn = myObject->NthSurfaceCell(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_NthSurfaceCell");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_SurfaceGridCount8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    jlong myReturn = myObject->SurfaceGridCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_SurfaceGridCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_NthSurfaceGrid9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueSurfaceToGrid * myReturn = myObject->NthSurfaceGrid(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_NthSurfaceGrid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_StairSteppedFaultCount10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    jlong myReturn = myObject->StairSteppedFaultCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_StairSteppedFaultCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_NthStairSteppedFault11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueStairSteppedFault * myReturn = myObject->NthStairSteppedFault(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_NthStairSteppedFault");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueIJSurface_AnyFileTruncated12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueIJSurface_IsOfType13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueIJSurface_Delete_1RescueIJSurface
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueIJSurface *myObj = (RescueIJSurface *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_~RescueIJSurface");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_ParentModel15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueIJSurface_ParentSurface16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    RescueSurface * myReturn = myObject->ParentSurface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_ParentSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueIJSurface_ZValueAt17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong i
  ,jlong j)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    float myReturn = myObject->ZValueAt((RESCUEINT64) i,
                (RESCUEINT64) j);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_ZValueAt");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueIJSurface_SetFaceStatus18
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong i, jlong j, jint status)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    myObject->SetFaceStatus(i, j, (RescueIJSurface::RescueFaceStatus) status);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_SetFaceStatus18");
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueIJSurface_FaceStatus19
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong i, jlong j)
{
  try
  {
    RescueIJSurface *myObject = (RescueIJSurface *) nativeNdx;
    int myReturn = (int) myObject->FaceStatus(i, j);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueIJSurface_ZValueAt");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_Create_1RescueInterfaceSurfaceDesc0  (JNIEnv *env, jobject obj
  ,jlong lgrGeometryNdx
  ,jboolean isExteriorInBool
  ,jlong expectedFaces
  ,jlong expectedCells
  ,jlong facesRealloc
  ,jlong cellsRealloc)
{
  try
  {
    RescueGeometry * lgrGeometry = (RescueGeometry *) lgrGeometryNdx;
    RESCUEBOOL isExteriorIn = ((isExteriorInBool == JNI_TRUE) ? TRUE : FALSE);
    RescueInterfaceSurfaceDesc *myReturn = new RescueInterfaceSurfaceDesc((RescueGeometry *) lgrGeometry,
                (RESCUEBOOL) isExteriorIn,
                (RESCUEINT64) expectedFaces,
                (RESCUEINT64) expectedCells,
                (RESCUEINT64) facesRealloc,
                (RESCUEINT64) cellsRealloc);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_RescueInterfaceSurfaceDesc");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_Delete_1RescueInterfaceSurfaceDesc
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObj = (RescueInterfaceSurfaceDesc *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_~RescueInterfaceSurfaceDesc");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_SetIsExterior2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean newStateBool)
{
  try
  {
    RESCUEBOOL newState = ((newStateBool == JNI_TRUE) ? TRUE : FALSE);
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->SetIsExterior((RESCUEBOOL) newState);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_SetIsExterior");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_SetFaceToCell3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong iNdx
  ,jlong jNdx
  ,jlong kNdx
  ,jlong faceNdx
  ,jlong cellCount
  ,jlongArray cellRefArray
  ,jlongArray cIndxArray
  ,jlongArray cJndxArray
  ,jlongArray cKndxArray)
{
  jlong *cellRef = 0;
  jlong *cIndx = 0;
  jlong *cJndx = 0;
  jlong *cKndx = 0;
  try
  {
    if (cellRefArray != 0)
    {
      cellRef = (jlong *) env->GetPrimitiveArrayCritical(cellRefArray, 0);
    }
    if (cIndxArray != 0)
    {
      cIndx = (jlong *) env->GetPrimitiveArrayCritical(cIndxArray, 0);
    }
    if (cJndxArray != 0)
    {
      cJndx = (jlong *) env->GetPrimitiveArrayCritical(cJndxArray, 0);
    }
    if (cKndxArray != 0)
    {
      cKndx = (jlong *) env->GetPrimitiveArrayCritical(cKndxArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->SetFaceToCell((RESCUEINT64) iNdx,
                (RESCUEINT64) jNdx,
                (RESCUEINT64) kNdx,
                (RESCUEINT64) faceNdx,
                (RESCUEINT64) cellCount,
                (RESCUEINT64 *) cellRef,
                (RESCUEINT64 *) cIndx,
                (RESCUEINT64 *) cJndx,
                (RESCUEINT64 *) cKndx);
    if (cellRefArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellRefArray, (jlong *) cellRef, 0);
    }
    if (cIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
    }
    if (cJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
    }
    if (cKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jlong *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jlong *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_SetFaceToCell");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_SetFaceToCell3i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint iNdx
  ,jint jNdx
  ,jint kNdx
  ,jint faceNdx
  ,jint cellCount
  ,jintArray cellRefArray
  ,jintArray cIndxArray
  ,jintArray cJndxArray
  ,jintArray cKndxArray)
{
  jint *cellRef = 0;
  jint *cIndx = 0;
  jint *cJndx = 0;
  jint *cKndx = 0;
  try
  {
    if (cellRefArray != 0)
    {
      cellRef = (jint *) env->GetPrimitiveArrayCritical(cellRefArray, 0);
    }
    if (cIndxArray != 0)
    {
      cIndx = (jint *) env->GetPrimitiveArrayCritical(cIndxArray, 0);
    }
    if (cJndxArray != 0)
    {
      cJndx = (jint *) env->GetPrimitiveArrayCritical(cJndxArray, 0);
    }
    if (cKndxArray != 0)
    {
      cKndx = (jint *) env->GetPrimitiveArrayCritical(cKndxArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->SetFaceToCell((RESCUEINT32) iNdx,
                (RESCUEINT32) jNdx,
                (RESCUEINT32) kNdx,
                (RESCUEINT32) faceNdx,
                (RESCUEINT32) cellCount,
                (RESCUEINT32 *) cellRef,
                (RESCUEINT32 *) cIndx,
                (RESCUEINT32 *) cJndx,
                (RESCUEINT32 *) cKndx);
    if (cellRefArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellRefArray, (jint *) cellRef, 0);
    }
    if (cIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
    }
    if (cJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
    }
    if (cKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jint *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jint *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_SetFaceToCell");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_ReadFaceToCell4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong iNdx
  ,jlong jNdx
  ,jlong kNdx
  ,jlong faceNdx
  ,jlong allocated
  ,jlongArray cellRefArray
  ,jlongArray cIndxArray
  ,jlongArray cJndxArray
  ,jlongArray cKndxArray)
{
  jlong *cellRef = 0;
  jlong *cIndx = 0;
  jlong *cJndx = 0;
  jlong *cKndx = 0;
  try
  {
    if (cellRefArray != 0)
    {
      cellRef = (jlong *) env->GetPrimitiveArrayCritical(cellRefArray, 0);
    }
    if (cIndxArray != 0)
    {
      cIndx = (jlong *) env->GetPrimitiveArrayCritical(cIndxArray, 0);
    }
    if (cJndxArray != 0)
    {
      cJndx = (jlong *) env->GetPrimitiveArrayCritical(cJndxArray, 0);
    }
    if (cKndxArray != 0)
    {
      cKndx = (jlong *) env->GetPrimitiveArrayCritical(cKndxArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEINT64 myReturn = myObject->ReadFaceToCell((RESCUEINT64) iNdx,
                (RESCUEINT64) jNdx,
                (RESCUEINT64) kNdx,
                (RESCUEINT64) faceNdx,
                (RESCUEINT64) allocated,
                (RESCUEINT64 *) cellRef,
                (RESCUEINT64 *) cIndx,
                (RESCUEINT64 *) cJndx,
                (RESCUEINT64 *) cKndx);
    if (cellRefArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellRefArray, (jlong *) cellRef, 0);
    }
    if (cIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
    }
    if (cJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
    }
    if (cKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jlong *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jlong *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_ReadFaceToCell");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_ReadFaceToCell4i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint iNdx
  ,jint jNdx
  ,jint kNdx
  ,jint faceNdx
  ,jint allocated
  ,jintArray cellRefArray
  ,jintArray cIndxArray
  ,jintArray cJndxArray
  ,jintArray cKndxArray)
{
  jint *cellRef = 0;
  jint *cIndx = 0;
  jint *cJndx = 0;
  jint *cKndx = 0;
  try
  {
    if (cellRefArray != 0)
    {
      cellRef = (jint *) env->GetPrimitiveArrayCritical(cellRefArray, 0);
    }
    if (cIndxArray != 0)
    {
      cIndx = (jint *) env->GetPrimitiveArrayCritical(cIndxArray, 0);
    }
    if (cJndxArray != 0)
    {
      cJndx = (jint *) env->GetPrimitiveArrayCritical(cJndxArray, 0);
    }
    if (cKndxArray != 0)
    {
      cKndx = (jint *) env->GetPrimitiveArrayCritical(cKndxArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEINT64 myReturn = myObject->ReadFaceToCell((RESCUEINT32) iNdx,
                (RESCUEINT32) jNdx,
                (RESCUEINT32) kNdx,
                (RESCUEINT32) faceNdx,
                (RESCUEINT32) allocated,
                (RESCUEINT32 *) cellRef,
                (RESCUEINT32 *) cIndx,
                (RESCUEINT32 *) cJndx,
                (RESCUEINT32 *) cKndx);
    if (cellRefArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellRefArray, (jint *) cellRef, 0);
    }
    if (cIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
    }
    if (cJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
    }
    if (cKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jint *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (cellRef != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefArray, (jint *) cellRef, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_ReadFaceToCell");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_ReadCellToFace5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong cRef
  ,jlong cIndx
  ,jlong cJndx
  ,jlong cKndx
  ,jlong allocated
  ,jlongArray iNdxArray
  ,jlongArray jNdxArray
  ,jlongArray kNdxArray
  ,jlongArray faceNdxArray)
{
  jlong *iNdx = 0;
  jlong *jNdx = 0;
  jlong *kNdx = 0;
  jlong *faceNdx = 0;
  try
  {
    if (iNdxArray != 0)
    {
      iNdx = (jlong *) env->GetPrimitiveArrayCritical(iNdxArray, 0);
    }
    if (jNdxArray != 0)
    {
      jNdx = (jlong *) env->GetPrimitiveArrayCritical(jNdxArray, 0);
    }
    if (kNdxArray != 0)
    {
      kNdx = (jlong *) env->GetPrimitiveArrayCritical(kNdxArray, 0);
    }
    if (faceNdxArray != 0)
    {
      faceNdx = (jlong *) env->GetPrimitiveArrayCritical(faceNdxArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEINT64 myReturn = myObject->ReadCellToFace((RESCUEINT64) cRef,
                (RESCUEINT64) cIndx,
                (RESCUEINT64) cJndx,
                (RESCUEINT64) cKndx,
                (RESCUEINT64) allocated,
                (RESCUEINT64 *) iNdx,
                (RESCUEINT64 *) jNdx,
                (RESCUEINT64 *) kNdx,
                (RESCUEINT64 *) faceNdx);
    if (iNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(iNdxArray, (jlong *) iNdx, 0);
    }
    if (jNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(jNdxArray, (jlong *) jNdx, 0);
    }
    if (kNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(kNdxArray, (jlong *) kNdx, 0);
    }
    if (faceNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceNdxArray, (jlong *) faceNdx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (iNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(iNdxArray, (jlong *) iNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (jNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(jNdxArray, (jlong *) jNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(kNdxArray, (jlong *) kNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxArray, (jlong *) faceNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (iNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(iNdxArray, (jlong *) iNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (jNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(jNdxArray, (jlong *) jNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(kNdxArray, (jlong *) kNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxArray, (jlong *) faceNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_ReadCellToFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_ReadCellToFace5i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint cRef
  ,jint cIndx
  ,jint cJndx
  ,jint cKndx
  ,jint allocated
  ,jintArray iNdxArray
  ,jintArray jNdxArray
  ,jintArray kNdxArray
  ,jintArray faceNdxArray)
{
  jint *iNdx = 0;
  jint *jNdx = 0;
  jint *kNdx = 0;
  jint *faceNdx = 0;
  try
  {
    if (iNdxArray != 0)
    {
      iNdx = (jint *) env->GetPrimitiveArrayCritical(iNdxArray, 0);
    }
    if (jNdxArray != 0)
    {
      jNdx = (jint *) env->GetPrimitiveArrayCritical(jNdxArray, 0);
    }
    if (kNdxArray != 0)
    {
      kNdx = (jint *) env->GetPrimitiveArrayCritical(kNdxArray, 0);
    }
    if (faceNdxArray != 0)
    {
      faceNdx = (jint *) env->GetPrimitiveArrayCritical(faceNdxArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEINT64 myReturn = myObject->ReadCellToFace((RESCUEINT32) cRef,
                (RESCUEINT32) cIndx,
                (RESCUEINT32) cJndx,
                (RESCUEINT32) cKndx,
                (RESCUEINT32) allocated,
                (RESCUEINT32 *) iNdx,
                (RESCUEINT32 *) jNdx,
                (RESCUEINT32 *) kNdx,
                (RESCUEINT32 *) faceNdx);
    if (iNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(iNdxArray, (jint *) iNdx, 0);
    }
    if (jNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(jNdxArray, (jint *) jNdx, 0);
    }
    if (kNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(kNdxArray, (jint *) kNdx, 0);
    }
    if (faceNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceNdxArray, (jint *) faceNdx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (iNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(iNdxArray, (jint *) iNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (jNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(jNdxArray, (jint *) jNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(kNdxArray, (jint *) kNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxArray, (jint *) faceNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (iNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(iNdxArray, (jint *) iNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (jNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(jNdxArray, (jint *) jNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(kNdxArray, (jint *) kNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxArray, (jint *) faceNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_ReadCellToFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_IsExterior6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsExterior();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_IsExterior");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceCount7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEINT64 myReturn = myObject->FaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceIndx8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceIndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceIndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceIndx8i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceIndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->FaceCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceIndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceJndx9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceJndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceJndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceJndx9i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceJndx();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->FaceCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceJndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceKndx10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceKndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->FaceCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceKndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceKndx10i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceKndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->FaceCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceKndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceNdx11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceNdx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceNdx11i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->FaceCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceNdx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellNdx12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellNdx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellNdx12i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->FaceCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellNdx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellCount13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellCount64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellCount");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellCount13i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellCount(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->FaceCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellCount");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellMapCount14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    RESCUEINT64 myReturn = myObject->CellMapCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellMapCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellRef15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellRef64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellRef");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellRef15i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellRef(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->CellMapCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellRef");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellIndx16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellIndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellIndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellIndx16i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellIndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->CellMapCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellIndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellJndx17
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellJndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellJndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellJndx17i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellJndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->CellMapCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellJndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellKndx18
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellKndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellKndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CellKndx18i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellKndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->CellMapCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CellKndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceRowNdx19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceRowNdx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceRowNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_FaceRowNdx19i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceRowNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->CellMapCount(throwIfTooBig);
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_FaceRowNdx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CopyArray20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint whichArrayInt
  ,jlong srcLowBound
  ,jlong srcCount
  ,jlongArray preAllocatedArray
  ,jlong destOffset)
{
  jlong *preAllocated = 0;
  try
  {
    RescueInterfaceSurfaceDesc::RescueISDArrayName whichArray = (RescueInterfaceSurfaceDesc::RescueISDArrayName) whichArrayInt;
    if (preAllocatedArray != 0)
    {
      preAllocated = (jlong *) env->GetPrimitiveArrayCritical(preAllocatedArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->CopyArray((RescueInterfaceSurfaceDesc::RescueISDArrayName) whichArray,
                (RESCUEINT64) srcLowBound,
                (RESCUEINT64) srcCount,
                (RESCUEINT64 *) preAllocated,
                (RESCUEINT64) destOffset);
    if (preAllocatedArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CopyArray");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_CopyArray20i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint whichArrayInt
  ,jint srcLowBound
  ,jint srcCount
  ,jintArray preAllocatedArray
  ,jint destOffset)
{
  jint *preAllocated = 0;
  try
  {
    RescueInterfaceSurfaceDesc::RescueISDArrayName whichArray = (RescueInterfaceSurfaceDesc::RescueISDArrayName) whichArrayInt;
    if (preAllocatedArray != 0)
    {
      preAllocated = (jint *) env->GetPrimitiveArrayCritical(preAllocatedArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->CopyArray((RescueInterfaceSurfaceDesc::RescueISDArrayName) whichArray,
                (RESCUEINT32) srcLowBound,
                (RESCUEINT32) srcCount,
                (RESCUEINT32 *) preAllocated,
                (RESCUEINT32) destOffset);
    if (preAllocatedArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_CopyArray");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_Set22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong faceCountIn
  ,jlongArray faceIndxInArray
  ,jlongArray faceJndxInArray
  ,jlongArray faceKndxInArray
  ,jlongArray faceNdxInArray
  ,jlongArray cellNdxInArray
  ,jlongArray cellCountInArray
  ,jlong cellMapCountIn
  ,jlongArray cellRefInArray
  ,jlongArray cellINdxInArray
  ,jlongArray cellJNdxInArray
  ,jlongArray cellKNdxInArray
  ,jlongArray faceRowNdxInArray)
{
  jlong *faceIndxIn = 0;
  jlong *faceJndxIn = 0;
  jlong *faceKndxIn = 0;
  jlong *faceNdxIn = 0;
  jlong *cellNdxIn = 0;
  jlong *cellCountIn = 0;
  jlong *cellRefIn = 0;
  jlong *cellINdxIn = 0;
  jlong *cellJNdxIn = 0;
  jlong *cellKNdxIn = 0;
  jlong *faceRowNdxIn = 0;
  try
  {
    if (faceIndxInArray != 0)
    {
      faceIndxIn = (jlong *) env->GetPrimitiveArrayCritical(faceIndxInArray, 0);
    }
    if (faceJndxInArray != 0)
    {
      faceJndxIn = (jlong *) env->GetPrimitiveArrayCritical(faceJndxInArray, 0);
    }
    if (faceKndxInArray != 0)
    {
      faceKndxIn = (jlong *) env->GetPrimitiveArrayCritical(faceKndxInArray, 0);
    }
    if (faceNdxInArray != 0)
    {
      faceNdxIn = (jlong *) env->GetPrimitiveArrayCritical(faceNdxInArray, 0);
    }
    if (cellNdxInArray != 0)
    {
      cellNdxIn = (jlong *) env->GetPrimitiveArrayCritical(cellNdxInArray, 0);
    }
    if (cellCountInArray != 0)
    {
      cellCountIn = (jlong *) env->GetPrimitiveArrayCritical(cellCountInArray, 0);
    }
    if (cellRefInArray != 0)
    {
      cellRefIn = (jlong *) env->GetPrimitiveArrayCritical(cellRefInArray, 0);
    }
    if (cellINdxInArray != 0)
    {
      cellINdxIn = (jlong *) env->GetPrimitiveArrayCritical(cellINdxInArray, 0);
    }
    if (cellJNdxInArray != 0)
    {
      cellJNdxIn = (jlong *) env->GetPrimitiveArrayCritical(cellJNdxInArray, 0);
    }
    if (cellKNdxInArray != 0)
    {
      cellKNdxIn = (jlong *) env->GetPrimitiveArrayCritical(cellKNdxInArray, 0);
    }
    if (faceRowNdxInArray != 0)
    {
      faceRowNdxIn = (jlong *) env->GetPrimitiveArrayCritical(faceRowNdxInArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->Set((RESCUEINT64) faceCountIn,
                (RESCUEINT64 *) faceIndxIn,
                (RESCUEINT64 *) faceJndxIn,
                (RESCUEINT64 *) faceKndxIn,
                (RESCUEINT64 *) faceNdxIn,
                (RESCUEINT64 *) cellNdxIn,
                (RESCUEINT64 *) cellCountIn,
                (RESCUEINT64) cellMapCountIn,
                (RESCUEINT64 *) cellRefIn,
                (RESCUEINT64 *) cellINdxIn,
                (RESCUEINT64 *) cellJNdxIn,
                (RESCUEINT64 *) cellKNdxIn,
                (RESCUEINT64 *) faceRowNdxIn);
    if (faceIndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceIndxInArray, (jlong *) faceIndxIn, 0);
    }
    if (faceJndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceJndxInArray, (jlong *) faceJndxIn, 0);
    }
    if (faceKndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceKndxInArray, (jlong *) faceKndxIn, 0);
    }
    if (faceNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceNdxInArray, (jlong *) faceNdxIn, 0);
    }
    if (cellNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellNdxInArray, (jlong *) cellNdxIn, 0);
    }
    if (cellCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellCountInArray, (jlong *) cellCountIn, 0);
    }
    if (cellRefInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellRefInArray, (jlong *) cellRefIn, 0);
    }
    if (cellINdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellINdxInArray, (jlong *) cellINdxIn, 0);
    }
    if (cellJNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellJNdxInArray, (jlong *) cellJNdxIn, 0);
    }
    if (cellKNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellKNdxInArray, (jlong *) cellKNdxIn, 0);
    }
    if (faceRowNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceRowNdxInArray, (jlong *) faceRowNdxIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndxInArray, (jlong *) faceIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceJndxInArray, (jlong *) faceJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceKndxInArray, (jlong *) faceKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxInArray, (jlong *) faceNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellNdxInArray, (jlong *) cellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCountInArray, (jlong *) cellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellRefIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefInArray, (jlong *) cellRefIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellINdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellINdxInArray, (jlong *) cellINdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellJNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellJNdxInArray, (jlong *) cellJNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellKNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellKNdxInArray, (jlong *) cellKNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceRowNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceRowNdxInArray, (jlong *) faceRowNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndxInArray, (jlong *) faceIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceJndxInArray, (jlong *) faceJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceKndxInArray, (jlong *) faceKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxInArray, (jlong *) faceNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellNdxInArray, (jlong *) cellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCountInArray, (jlong *) cellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellRefIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefInArray, (jlong *) cellRefIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellINdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellINdxInArray, (jlong *) cellINdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellJNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellJNdxInArray, (jlong *) cellJNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellKNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellKNdxInArray, (jlong *) cellKNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceRowNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceRowNdxInArray, (jlong *) faceRowNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_Set");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_Set22i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint faceCountIn
  ,jintArray faceIndxInArray
  ,jintArray faceJndxInArray
  ,jintArray faceKndxInArray
  ,jintArray faceNdxInArray
  ,jintArray cellNdxInArray
  ,jintArray cellCountInArray
  ,jint cellMapCountIn
  ,jintArray cellRefInArray
  ,jintArray cellINdxInArray
  ,jintArray cellJNdxInArray
  ,jintArray cellKNdxInArray
  ,jintArray faceRowNdxInArray)
{
  jint *faceIndxIn = 0;
  jint *faceJndxIn = 0;
  jint *faceKndxIn = 0;
  jint *faceNdxIn = 0;
  jint *cellNdxIn = 0;
  jint *cellCountIn = 0;
  jint *cellRefIn = 0;
  jint *cellINdxIn = 0;
  jint *cellJNdxIn = 0;
  jint *cellKNdxIn = 0;
  jint *faceRowNdxIn = 0;
  try
  {
    if (faceIndxInArray != 0)
    {
      faceIndxIn = (jint *) env->GetPrimitiveArrayCritical(faceIndxInArray, 0);
    }
    if (faceJndxInArray != 0)
    {
      faceJndxIn = (jint *) env->GetPrimitiveArrayCritical(faceJndxInArray, 0);
    }
    if (faceKndxInArray != 0)
    {
      faceKndxIn = (jint *) env->GetPrimitiveArrayCritical(faceKndxInArray, 0);
    }
    if (faceNdxInArray != 0)
    {
      faceNdxIn = (jint *) env->GetPrimitiveArrayCritical(faceNdxInArray, 0);
    }
    if (cellNdxInArray != 0)
    {
      cellNdxIn = (jint *) env->GetPrimitiveArrayCritical(cellNdxInArray, 0);
    }
    if (cellCountInArray != 0)
    {
      cellCountIn = (jint *) env->GetPrimitiveArrayCritical(cellCountInArray, 0);
    }
    if (cellRefInArray != 0)
    {
      cellRefIn = (jint *) env->GetPrimitiveArrayCritical(cellRefInArray, 0);
    }
    if (cellINdxInArray != 0)
    {
      cellINdxIn = (jint *) env->GetPrimitiveArrayCritical(cellINdxInArray, 0);
    }
    if (cellJNdxInArray != 0)
    {
      cellJNdxIn = (jint *) env->GetPrimitiveArrayCritical(cellJNdxInArray, 0);
    }
    if (cellKNdxInArray != 0)
    {
      cellKNdxIn = (jint *) env->GetPrimitiveArrayCritical(cellKNdxInArray, 0);
    }
    if (faceRowNdxInArray != 0)
    {
      faceRowNdxIn = (jint *) env->GetPrimitiveArrayCritical(faceRowNdxInArray, 0);
    }
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    myObject->Set((RESCUEINT32) faceCountIn,
                (RESCUEINT32 *) faceIndxIn,
                (RESCUEINT32 *) faceJndxIn,
                (RESCUEINT32 *) faceKndxIn,
                (RESCUEINT32 *) faceNdxIn,
                (RESCUEINT32 *) cellNdxIn,
                (RESCUEINT32 *) cellCountIn,
                (RESCUEINT32) cellMapCountIn,
                (RESCUEINT32 *) cellRefIn,
                (RESCUEINT32 *) cellINdxIn,
                (RESCUEINT32 *) cellJNdxIn,
                (RESCUEINT32 *) cellKNdxIn,
                (RESCUEINT32 *) faceRowNdxIn);
    if (faceIndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceIndxInArray, (jint *) faceIndxIn, 0);
    }
    if (faceJndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceJndxInArray, (jint *) faceJndxIn, 0);
    }
    if (faceKndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceKndxInArray, (jint *) faceKndxIn, 0);
    }
    if (faceNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceNdxInArray, (jint *) faceNdxIn, 0);
    }
    if (cellNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellNdxInArray, (jint *) cellNdxIn, 0);
    }
    if (cellCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellCountInArray, (jint *) cellCountIn, 0);
    }
    if (cellRefInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellRefInArray, (jint *) cellRefIn, 0);
    }
    if (cellINdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellINdxInArray, (jint *) cellINdxIn, 0);
    }
    if (cellJNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellJNdxInArray, (jint *) cellJNdxIn, 0);
    }
    if (cellKNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellKNdxInArray, (jint *) cellKNdxIn, 0);
    }
    if (faceRowNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceRowNdxInArray, (jint *) faceRowNdxIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndxInArray, (jint *) faceIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceJndxInArray, (jint *) faceJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceKndxInArray, (jint *) faceKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxInArray, (jint *) faceNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellNdxInArray, (jint *) cellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCountInArray, (jint *) cellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellRefIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefInArray, (jint *) cellRefIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellINdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellINdxInArray, (jint *) cellINdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellJNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellJNdxInArray, (jint *) cellJNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellKNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellKNdxInArray, (jint *) cellKNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceRowNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceRowNdxInArray, (jint *) faceRowNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndxInArray, (jint *) faceIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceJndxInArray, (jint *) faceJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceKndxInArray, (jint *) faceKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceNdxInArray, (jint *) faceNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellNdxInArray, (jint *) cellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCountInArray, (jint *) cellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellRefIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellRefInArray, (jint *) cellRefIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellINdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellINdxInArray, (jint *) cellINdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellJNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellJNdxInArray, (jint *) cellJNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellKNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellKNdxInArray, (jint *) cellKNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceRowNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceRowNdxInArray, (jint *) faceRowNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_Set");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_DataContainers23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_DataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueInterfaceSurfaceDesc_DemandDataContainers24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueInterfaceSurfaceDesc *myObject = (RescueInterfaceSurfaceDesc *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DemandDataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueInterfaceSurfaceDesc_DemandDataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_Count0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    jlong myReturn = myObject->Count64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_Count");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_NthObject1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueLogicalOrderEntry * myReturn = myObject->NthObject(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_NthObject");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_NdxOf2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong objectNdx)
{
  try
  {
    RescueLogicalOrderEntry * object = (RescueLogicalOrderEntry *) objectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    jlong myReturn = myObject->NdxOf((RescueLogicalOrderEntry *) object);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_NdxOf");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_NthUnit3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueUnit * myReturn = myObject->NthUnit(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_NthUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_NthHorizon4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueHorizon * myReturn = myObject->NthHorizon(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_NthHorizon");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_BottomUnit5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueUnit * myReturn = myObject->BottomUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_BottomUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_TopUnit6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueUnit * myReturn = myObject->TopUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_TopUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_BottomHorizon7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueHorizon * myReturn = myObject->BottomHorizon();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_BottomHorizon");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_TopHorizon8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueHorizon * myReturn = myObject->TopHorizon();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_TopHorizon");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_HorizonAbove9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueHorizon * myReturn = myObject->HorizonAbove((RescueLogicalOrderEntry *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_HorizonAbove");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_HorizonBelow10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueHorizon * myReturn = myObject->HorizonBelow((RescueLogicalOrderEntry *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_HorizonBelow");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_UnitAbove11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueUnit * myReturn = myObject->UnitAbove((RescueLogicalOrderEntry *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_UnitAbove");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_UnitBelow12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueUnit * myReturn = myObject->UnitBelow((RescueLogicalOrderEntry *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_UnitBelow");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_EventAbove13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueEventDescr * myReturn = myObject->EventAbove((RescueLogicalOrderEntry *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_EventAbove");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_EventBelow14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueEventDescr * myReturn = myObject->EventBelow((RescueLogicalOrderEntry *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_EventBelow");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_UnconformityEventAbove15
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueEventDescr * existingObject = (RescueEventDescr *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueLogicalOrderEntry * myReturn = myObject->UnconformityEventAbove((RescueEventDescr *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_UnconformityEventAbove");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_UnconformityEventBelow16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueEventDescr * existingObject = (RescueEventDescr *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RescueLogicalOrderEntry * myReturn = myObject->UnconformityEventBelow((RescueEventDescr *) existingObject);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_UnconformityEventBelow");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_Delete_1RescueLogicalOrder
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueLogicalOrder *myObj = (RescueLogicalOrder *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_~RescueLogicalOrder");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_InsertAtBase18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitNdx)
{
  try
  {
    RescueLogicalOrderEntry * unit = (RescueLogicalOrderEntry *) unitNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    myObject->InsertAtBase((RescueLogicalOrderEntry *) unit);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_InsertAtBase");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_InsertAtTop19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitNdx)
{
  try
  {
    RescueLogicalOrderEntry * unit = (RescueLogicalOrderEntry *) unitNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    myObject->InsertAtTop((RescueLogicalOrderEntry *) unit);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_InsertAtTop");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_InsertAbove20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx
  ,jlong unitNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrderEntry * unit = (RescueLogicalOrderEntry *) unitNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RESCUEBOOL myReturn = myObject->InsertAbove((RescueLogicalOrderEntry *) existingObject,
                (RescueLogicalOrderEntry *) unit);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_InsertAbove");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_InsertBelow21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx
  ,jlong unitNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrderEntry * unit = (RescueLogicalOrderEntry *) unitNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RESCUEBOOL myReturn = myObject->InsertBelow((RescueLogicalOrderEntry *) existingObject,
                (RescueLogicalOrderEntry *) unit);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_InsertBelow");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLogicalOrder_Remove22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueLogicalOrderEntry * existingObject = (RescueLogicalOrderEntry *) existingObjectNdx;
    RescueLogicalOrder *myObject = (RescueLogicalOrder *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Remove((RescueLogicalOrderEntry *) existingObject);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrder_Remove");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLogicalOrderEntry_Create_1RescueLogicalOrderEntry0  (JNIEnv *env, jobject obj
  ,jlong contextNdx)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueLogicalOrderEntry *myReturn = new RescueLogicalOrderEntry((RescueContext *) context);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrderEntry_RescueLogicalOrderEntry");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLogicalOrderEntry_IsOfType1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueLogicalOrderEntry *myObject = (RescueLogicalOrderEntry *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLogicalOrderEntry_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookup_Create_1RescueLookup0  (JNIEnv *env, jobject obj
  ,jstring newNameStr
  ,jlong size
  ,jlong newParentModelNdx)
{
  try
  {
    jboolean newNameBool;
    const char *newName = env->GetStringUTFChars(newNameStr, &newNameBool);
    RescueModel * newParentModel = (RescueModel *) newParentModelNdx;
    RescueLookup *myReturn = new RescueLookup((char *) newName,
                size,
                (RescueModel *) newParentModel);
    env->ReleaseStringUTFChars(newNameStr, newName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_RescueLookup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLookup_Delete_1RescueLookup
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueLookup *myObj = (RescueLookup *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_~RescueLookup");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueLookup_LookupName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    RCHString * myReturn = myObject->LookupName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_LookupName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLookup_SetName3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newNameStr)
{
  try
  {
    jboolean newNameBool;
    const char *newName = env->GetStringUTFChars(newNameStr, &newNameBool);
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    myObject->SetName((char *) newName);
    env->ReleaseStringUTFChars(newNameStr, newName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_SetName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookup_ParentModel4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLookup_IsNamed5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring possibleNameStr)
{
  try
  {
    jboolean possibleNameBool;
    const char *possibleName = env->GetStringUTFChars(possibleNameStr, &possibleNameBool);
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) possibleName);
    env->ReleaseStringUTFChars(possibleNameStr, possibleName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookup_Count6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    jlong myReturn = myObject->Count64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_Count");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookup_NthItem7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedIndex)
{
  try
  {
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    RescueLookupItem * myReturn = myObject->NthItem(zeroBasedIndex);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_NthItem");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLookup_SetNthItem8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedIndex
  ,jlong newItemNdx)
{
  try
  {
    RescueLookupItem * newItem = (RescueLookupItem *) newItemNdx;
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    myObject->SetNthItem(zeroBasedIndex,
                (RescueLookupItem *) newItem);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_SetNthItem");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLookup_IsOfType9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueLookup *myObject = (RescueLookup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookup_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLookupItem_Delete_1RescueLookupItem
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueLookupItem *myObj = (RescueLookupItem *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupItem_~RescueLookupItem");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLookupItem_IsOfType2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueLookupItem *myObject = (RescueLookupItem *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupItem_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLookupString_Delete_1RescueLookupString
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueLookupString *myObj = (RescueLookupString *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupString_~RescueLookupString");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookupString_Create_1RescueLookupString1  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jstring translationStringStr)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    jboolean translationStringBool;
    const char *translationString = env->GetStringUTFChars(translationStringStr, &translationStringBool);
    RescueLookupString *myReturn = new RescueLookupString((RescueContext *) context,
                (char *) translationString);
    env->ReleaseStringUTFChars(translationStringStr, translationString);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupString_RescueLookupString");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueLookupString_Translation2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookupString *myObject = (RescueLookupString *) nativeNdx;
    RCHString * myReturn = myObject->Translation();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupString_Translation");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLookupString_IsOfType3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueLookupString *myObject = (RescueLookupString *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupString_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookupTable_Create_1RescueLookupTable0  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jlong rowsIn
  ,jfloatArray tableInArray)
{
  jfloat *tableIn = 0;
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    if (tableInArray != 0)
    {
      tableIn = (jfloat *) env->GetPrimitiveArrayCritical(tableInArray, 0);
    }
    RescueLookupTable *myReturn = new RescueLookupTable((RescueContext *) context,
                rowsIn,
                (float *) (tableInArray == 0) ? 0 : copyFloatArray(tableIn, env->GetArrayLength(tableInArray)));
    if (tableInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(tableInArray, (jfloat *) tableIn, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (tableIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(tableInArray, (jfloat *) tableIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupTable_RescueLookupTable");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueLookupTable_Delete_1RescueLookupTable
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueLookupTable *myObj = (RescueLookupTable *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupTable_~RescueLookupTable");
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueLookupTable_Translation2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookupTable *myObject = (RescueLookupTable *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->Translation();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->TranslationLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupTable_Translation");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookupTable_TranslationLength3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookupTable *myObject = (RescueLookupTable *) nativeNdx;
    jlong myReturn = myObject->TranslationLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupTable_TranslationLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueLookupTable_Rows4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueLookupTable *myObject = (RescueLookupTable *) nativeNdx;
    jlong myReturn = myObject->Rows();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupTable_Rows");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueLookupTable_IsOfType5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueLookupTable *myObject = (RescueLookupTable *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueLookupTable_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_ParentBlockUnit0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueBlockUnit * myReturn = myObject->ParentBlockUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_ParentBlockUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_ParentModel1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_AddBlockUnitSide2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingSideNdx)
{
  try
  {
    RescueBlockUnitSide * existingSide = (RescueBlockUnitSide *) existingSideNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->AddBlockUnitSide((RescueBlockUnitSide *) existingSide);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_AddBlockUnitSide");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DropBlockUnitSide3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingSideNdx)
{
  try
  {
    RescueBlockUnitSide * existingSide = (RescueBlockUnitSide *) existingSideNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->DropBlockUnitSide((RescueBlockUnitSide *) existingSide);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DropBlockUnitSide");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_NthBlockUnitSide4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueBlockUnitSide * myReturn = myObject->NthBlockUnitSide(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_NthBlockUnitSide");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_BlockUnitSideIdentifiedBy5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong id)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueBlockUnitSide * myReturn = myObject->BlockUnitSideIdentifiedBy(id);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_BlockUnitSideIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_AddInteriorSection6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingSectionNdx)
{
  try
  {
    RescueSection * existingSection = (RescueSection *) existingSectionNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->AddInteriorSection((RescueSection *) existingSection);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_AddInteriorSection");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DropInteriorSection7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingSectionNdx)
{
  try
  {
    RescueSection * existingSection = (RescueSection *) existingSectionNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->DropInteriorSection((RescueSection *) existingSection);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DropInteriorSection");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_NthInteriorSection8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueSection * myReturn = myObject->NthInteriorSection(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_NthInteriorSection");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_AddKLayerEdge9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSet * existingEdgeSet = (RescueEdgeSet *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->AddKLayerEdge((RescueEdgeSet *) existingEdgeSet);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_AddKLayerEdge");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DeleteKLayerEdge10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSet * existingEdgeSet = (RescueEdgeSet *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteKLayerEdge((RescueEdgeSet *) existingEdgeSet);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DeleteKLayerEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DeleteKLayerEdge11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSetStub * existingEdgeSet = (RescueEdgeSetStub *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteKLayerEdge((RescueEdgeSetStub *) existingEdgeSet);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DeleteKLayerEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_NthKLayerEdge12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSetStub * myReturn = myObject->NthKLayerEdge(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_NthKLayerEdge");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_AddILayerEdge13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSet * existingEdgeSet = (RescueEdgeSet *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->AddILayerEdge((RescueEdgeSet *) existingEdgeSet);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_AddILayerEdge");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DeleteILayerEdge14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSet * existingEdgeSet = (RescueEdgeSet *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteILayerEdge((RescueEdgeSet *) existingEdgeSet);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DeleteILayerEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DeleteILayerEdge15
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSetStub * existingEdgeSet = (RescueEdgeSetStub *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteILayerEdge((RescueEdgeSetStub *) existingEdgeSet);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DeleteILayerEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_NthILayerEdge16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSetStub * myReturn = myObject->NthILayerEdge(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_NthILayerEdge");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_AddJLayerEdge17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSet * existingEdgeSet = (RescueEdgeSet *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->AddJLayerEdge((RescueEdgeSet *) existingEdgeSet);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_AddJLayerEdge");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DeleteJLayerEdge18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSet * existingEdgeSet = (RescueEdgeSet *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteJLayerEdge((RescueEdgeSet *) existingEdgeSet);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DeleteJLayerEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_DeleteJLayerEdge19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeSetNdx)
{
  try
  {
    RescueEdgeSetStub * existingEdgeSet = (RescueEdgeSetStub *) existingEdgeSetNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteJLayerEdge((RescueEdgeSetStub *) existingEdgeSet);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_DeleteJLayerEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_NthJLayerEdge20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSetStub * myReturn = myObject->NthJLayerEdge(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_NthJLayerEdge");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_SetTopEdge21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong topEdgeNdx)
{
  try
  {
    RescueEdgeSet * topEdge = (RescueEdgeSet *) topEdgeNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->SetTopEdge((RescueEdgeSet *) topEdge);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_SetTopEdge");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_SetBottomEdge22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong bottomEdgeNdx)
{
  try
  {
    RescueEdgeSet * bottomEdge = (RescueEdgeSet *) bottomEdgeNdx;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    myObject->SetBottomEdge((RescueEdgeSet *) bottomEdge);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_SetBottomEdge");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_TopEdgesObj23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSetStub * myReturn = myObject->TopEdgesObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_TopEdgesObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_BottomEdgesObj24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSetStub * myReturn = myObject->BottomEdgesObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_BottomEdgesObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_TopEdges25
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSet * myReturn = myObject->TopEdges();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_TopEdges");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_BottomEdges26
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RescueEdgeSet * myReturn = myObject->BottomEdges();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_BottomEdges");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueMacroVolume_CountOfSides27
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    jlong myReturn = myObject->CountOfSides();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_CountOfSides");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueMacroVolume_Delete_1RescueMacroVolume
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueMacroVolume *myObj = (RescueMacroVolume *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_~RescueMacroVolume");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueMacroVolume_IsOfType29
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueMacroVolume *myObject = (RescueMacroVolume *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueMacroVolume_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

class RescueRJNIWireframeCallBack:public RescueWireframeCallBack
{
  JNIEnv *env;
  RCHString className;
public:
  RescueRJNIWireframeCallBack(JNIEnv *envIn, const char *classNameIn)
  {
    env = envIn;
    className = classNameIn;
    char *pos = strchr(className.String(), '.');
    while (pos != 0)
    {
      *pos = '/';
      pos = strchr(className.String(), '.');
    }
  }

  virtual void LoadingWireframe(RescueWireframe *beingLoaded)
  {
    jclass cls = env->FindClass(className.String());
    jmethodID mid = env->GetStaticMethodID(cls, "LoadingWireframe", "(JJ)V");
    if (mid == 0)
    {
      throw "Could not locate LoadingWireframe method in registered RescueWireframeCallBack";
    }
    else
    {
      RescueModel *model = beingLoaded->ParentModel();
      env->CallStaticVoidMethod(cls, mid, model->Identifier(), beingLoaded->Identifier());
      if (env->ExceptionOccurred())
      {
        throw "Exception occurred in call to ReportProgress method in registered RescueProgressReporter";
        env->ExceptionClear();
      }
    }
  }

  virtual void UnloadingWireframe(RescueWireframe *beingUnloaded)
  {
    jclass cls = env->FindClass(className.String());
    jmethodID mid = env->GetStaticMethodID(cls, "UnloadingWireframe", "(JJ)V");
    if (mid == 0)
    {
      throw "Could not locate UnloadingWireframe method in registered RescueWireframeCallBack";
    }
    else
    {
      RescueModel *model = beingUnloaded->ParentModel();
      env->CallStaticVoidMethod(cls, mid, model->Identifier(), beingUnloaded->Identifier());
      if (env->ExceptionOccurred())
      {
        throw "Exception occurred in call to ReportProgress method in registered RescueProgressReporter";
        env->ExceptionClear();
      }
    }
  }
};

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_RegisterWireframeCallBack0
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring reporterClassNameStr)
{
  try
  {
    jboolean reporterClassNameBool;
    const char *reporterClassName = env->GetStringUTFChars(reporterClassNameStr, &reporterClassNameBool);
    RescueWireframeCallBack * newCallBackObject = new RescueRJNIWireframeCallBack(env, reporterClassName);
    env->ReleaseStringUTFChars(reporterClassNameStr, reporterClassName);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueWireframeCallBack * myReturn = myObject->RegisterWireframeCallBack((RescueWireframeCallBack *) newCallBackObject);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_RegisterWireframeCallBack");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_AnyFileTruncated1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_Commit2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->Commit();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_Commit");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_Rollback3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->Rollback();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_Rollback");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_UnarchiveModel4
  (JNIEnv *env, jclass cls  ,jlong contextNdx
  ,jstring pathNameStr)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    jboolean pathNameBool;
    const char *pathName = env->GetStringUTFChars(pathNameStr, &pathNameBool);
    RescueModel * myReturn = RescueModel::UnarchiveModel((RescueContext *) context,
                (char *) pathName);
    env->ReleaseStringUTFChars(pathNameStr, pathName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UnarchiveModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_ArchiveModel5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring pathNameStr
  ,jboolean binaryBool
  ,jint version
  ,jboolean write32)
{
  try
  {
    jboolean pathNameBool;
    const char *pathName = env->GetStringUTFChars(pathNameStr, &pathNameBool);
    RESCUEBOOL binary = ((binaryBool == JNI_TRUE) ? TRUE : FALSE);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->ArchiveModel((char *) pathName,
                (RESCUEBOOL) binary,
                (int) version,
                (RESCUEBOOL) write32);
    env->ReleaseStringUTFChars(pathNameStr, pathName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ArchiveModel");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_ArchiveModel6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->ArchiveModel();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ArchiveModel");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_ExistingModel7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->ExistingModel();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ExistingModel");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_Create_1RescueModel8  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jstring modelNameInStr)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    jboolean modelNameInBool;
    const char *modelNameIn = env->GetStringUTFChars(modelNameInStr, &modelNameInBool);
    RescueModel *myReturn = new RescueModel((RescueContext *) context,
                (char *) modelNameIn);
    env->ReleaseStringUTFChars(modelNameInStr, modelNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_RescueModel");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_Create_1RescueModel9  (JNIEnv *env, jobject obj
  ,jstring modelNameInStr
  ,jlong coordinateSystemInNdx)
{
  try
  {
    jboolean modelNameInBool;
    const char *modelNameIn = env->GetStringUTFChars(modelNameInStr, &modelNameInBool);
    RescueCoordinateSystem * coordinateSystemIn = (RescueCoordinateSystem *) coordinateSystemInNdx;
    RescueModel *myReturn = new RescueModel((char *) modelNameIn,
                (RescueCoordinateSystem *) coordinateSystemIn);
    env->ReleaseStringUTFChars(modelNameInStr, modelNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_RescueModel");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_Delete_1RescueModel
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueModel *myObj = (RescueModel *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_~RescueModel");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModel_ModelName11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RCHString * myReturn = myObject->ModelName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ModelName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_UnitCount12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->UnitCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UnitCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_BlockCount13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->BlockCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_BlockCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HorizonCount14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->HorizonCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HorizonCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_WellboreCount15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->WellboreCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WellboreCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_SectionCount16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->SectionCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SectionCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_PropertyGroupCount17
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->PropertyGroupCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_PropertyGroupCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HistoryCount18
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->HistoryCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HistoryCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeobodyCount19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->GeobodyCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeobodyCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_ReferenceSurfaceCount20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->ReferenceSurfaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ReferenceSurfaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_LookupCount21
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->LookupCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_LookupCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_EventDescrCount22
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->EventDescrCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_EventDescrCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_FaultIntersectionCount23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->FaultIntersectionCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_FaultIntersectionCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_ReservoirCount24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->ReservoirCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ReservoirCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_WireframeCount25
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->WireframeCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WireframeCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_MakeUnconformity26
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueEventDescr * myReturn = myObject->MakeUnconformity((char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_MakeUnconformity");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_MakeDiapir27
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueEventDescr * myReturn = myObject->MakeDiapir((char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_MakeDiapir");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueUnit28
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueUnit * myReturn = myObject->NthRescueUnit(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueBlock29
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueBlock * myReturn = myObject->NthRescueBlock(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueBlock");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueHorizon30
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueHorizon * myReturn = myObject->NthRescueHorizon(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueHorizon");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueWellbore31
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueWellbore * myReturn = myObject->NthRescueWellbore(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueWellbore");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueSection32
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueSection * myReturn = myObject->NthRescueSection(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueSection");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueReferenceSurface33
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueReferenceSurface * myReturn = myObject->NthRescueReferenceSurface(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueReferenceSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueModelPropertyGroup34
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueModelPropertyGroup * myReturn = myObject->NthRescueModelPropertyGroup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueModelPropertyGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueHistory35
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueHistory * myReturn = myObject->NthRescueHistory(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueHistory");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueGeobody36
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeobody * myReturn = myObject->NthRescueGeobody(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueGeobody");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueLookup37
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueLookup * myReturn = myObject->NthRescueLookup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueLookup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueEventDescr38
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueEventDescr * myReturn = myObject->NthRescueEventDescr(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueEventDescr");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueFaultIntersection39
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueFaultIntersection * myReturn = myObject->NthRescueFaultIntersection(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueFaultIntersection");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueReservoir40
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueReservoir * myReturn = myObject->NthRescueReservoir(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueReservoir");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescueWireframe41
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueWireframe * myReturn = myObject->NthRescueWireframe(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescueWireframe");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueUnit42
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueUnit * unitToDrop = (RescueUnit *) unitToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueUnit((RescueUnit *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueUnit");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueBlock43
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong blockToDropNdx)
{
  try
  {
    RescueBlock * blockToDrop = (RescueBlock *) blockToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueBlock((RescueBlock *) blockToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueBlock");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueHorizon44
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong horizonToDropNdx)
{
  try
  {
    RescueHorizon * horizonToDrop = (RescueHorizon *) horizonToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueHorizon((RescueHorizon *) horizonToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueHorizon");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueWellbore45
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong wellboreToDropNdx)
{
  try
  {
    RescueWellbore * wellboreToDrop = (RescueWellbore *) wellboreToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueWellbore((RescueWellbore *) wellboreToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueWellbore");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueSection46
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong sectionToDropNdx)
{
  try
  {
    RescueSection * sectionToDrop = (RescueSection *) sectionToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueSection((RescueSection *) sectionToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueSection");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueReferenceSurface47
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong surfaceToDropNdx)
{
  try
  {
    RescueReferenceSurface * surfaceToDrop = (RescueReferenceSurface *) surfaceToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueReferenceSurface((RescueReferenceSurface *) surfaceToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueReferenceSurface");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueLookup48
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lookupToDropNdx)
{
  try
  {
    RescueLookup * lookupToDrop = (RescueLookup *) lookupToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueLookup((RescueLookup *) lookupToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueLookup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueModelPropertyGroup49
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong groupToDropNdx)
{
  try
  {
    RescueModelPropertyGroup * groupToDrop = (RescueModelPropertyGroup *) groupToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueModelPropertyGroup((RescueModelPropertyGroup *) groupToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueModelPropertyGroup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueHistory50
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong historyToDropNdx)
{
  try
  {
    RescueHistory * historyToDrop = (RescueHistory *) historyToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueHistory((RescueHistory *) historyToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueHistory");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueGeobody51
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong bodyToDropNdx)
{
  try
  {
    RescueGeobody * bodyToDrop = (RescueGeobody *) bodyToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueGeobody((RescueGeobody *) bodyToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueGeobody");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueEventDescr52
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong eventDescrToDropNdx)
{
  try
  {
    RescueEventDescr * eventDescrToDrop = (RescueEventDescr *) eventDescrToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueEventDescr((RescueEventDescr *) eventDescrToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueEventDescr");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueFaultIntersection53
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong intersectionToDropNdx)
{
  try
  {
    RescueFaultIntersection * intersectionToDrop = (RescueFaultIntersection *) intersectionToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueFaultIntersection((RescueFaultIntersection *) intersectionToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueFaultIntersection");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueReservoir54
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong reservoirToDropNdx)
{
  try
  {
    RescueReservoir * reservoirToDrop = (RescueReservoir *) reservoirToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueReservoir((RescueReservoir *) reservoirToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueReservoir");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescueWireframe55
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong wireframeToDropNdx)
{
  try
  {
    RescueWireframe * wireframeToDrop = (RescueWireframe *) wireframeToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueWireframe((RescueWireframe *) wireframeToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescueWireframe");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_BlockNamedU56
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring blockNameStr)
{
  try
  {
    jboolean blockNameBool;
    const char *blockName = env->GetStringUTFChars(blockNameStr, &blockNameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueBlock * myReturn = myObject->BlockNamed((char *) blockName);
    env->ReleaseStringUTFChars(blockNameStr, blockName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_BlockNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_UnitNamedU56
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring unitNameStr)
{
  try
  {
    jboolean unitNameBool;
    const char *unitName = env->GetStringUTFChars(unitNameStr, &unitNameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueUnit * myReturn = myObject->UnitNamed((char *) unitName);
    env->ReleaseStringUTFChars(unitNameStr, unitName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UnitNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HorizonNamed56
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring horizonNameStr)
{
  try
  {
    jboolean horizonNameBool;
    const char *horizonName = env->GetStringUTFChars(horizonNameStr, &horizonNameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueHorizon * myReturn = myObject->HorizonNamed((char *) horizonName);
    env->ReleaseStringUTFChars(horizonNameStr, horizonName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HorizonNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_SectionNamed57
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring sectionNameStr)
{
  try
  {
    jboolean sectionNameBool;
    const char *sectionName = env->GetStringUTFChars(sectionNameStr, &sectionNameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueSection * myReturn = myObject->SectionNamed((char *) sectionName);
    env->ReleaseStringUTFChars(sectionNameStr, sectionName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SectionNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeobodyNamed58
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring bodyNameStr)
{
  try
  {
    jboolean bodyNameBool;
    const char *bodyName = env->GetStringUTFChars(bodyNameStr, &bodyNameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeobody * myReturn = myObject->GeobodyNamed((char *) bodyName);
    env->ReleaseStringUTFChars(bodyNameStr, bodyName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeobodyNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_UnitIdentifiedBy59
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueUnit * myReturn = myObject->UnitIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UnitIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_BlockIdentifiedBy60
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueBlock * myReturn = myObject->BlockIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_BlockIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HorizonIdentifiedBy61
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueHorizon * myReturn = myObject->HorizonIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HorizonIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_WellboreIdentifiedBy62
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueWellbore * myReturn = myObject->WellboreIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WellboreIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_SectionIdentifiedBy63
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueSection * myReturn = myObject->SectionIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SectionIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HorizonSurfaceIdentifiedBy64
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueBlockUnitHorizonSurface * myReturn = myObject->HorizonSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HorizonSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_BlockUnitIdentifiedBy65
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueBlockUnit * myReturn = myObject->BlockUnitIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_BlockUnitIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_ReferenceSurfaceIdentifiedBy66
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueReferenceSurface * myReturn = myObject->ReferenceSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ReferenceSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_LookupIdentifiedBy67
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueLookup * myReturn = myObject->LookupIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_LookupIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeobodyIdentifiedBy68
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeobody * myReturn = myObject->GeobodyIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeobodyIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_SurfaceIdentifiedBy69
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueSurface * myReturn = myObject->SurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_IJSurfaceIdentifiedBy70
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueIJSurface * myReturn = myObject->IJSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_IJSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HorizonIJSurfaceIdentifiedBy71
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueIJSurface * myReturn = myObject->HorizonIJSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HorizonIJSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_SectionIJSurfaceIdentifiedBy72
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueIJSurface * myReturn = myObject->SectionIJSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SectionIJSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_TriangulatedSurfaceIdentifiedBy73
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->TriangulatedSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_TriangulatedSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HorizonTriangulatedSurfaceIdentifiedBy74
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->HorizonTriangulatedSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HorizonTriangulatedSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_SectionTriangulatedSurfaceIdentifiedBy75
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->SectionTriangulatedSurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SectionTriangulatedSurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeobodyVolumeIdentifiedBy76
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeobodyVolume * myReturn = myObject->GeobodyVolumeIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeobodyVolumeIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_MacroVolumeIdentifiedBy77
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueMacroVolume * myReturn = myObject->MacroVolumeIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_MacroVolumeIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_BlockUnitSideIdentifiedBy78
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueBlockUnitSide * myReturn = myObject->BlockUnitSideIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_BlockUnitSideIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeobodySurfaceIdentifiedBy79
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeobodySurface * myReturn = myObject->GeobodySurfaceIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeobodySurfaceIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GlobalPropertyIdentifiedBy80
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifer)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueProperty * myReturn = myObject->GlobalPropertyIdentifiedBy(identifer);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GlobalPropertyIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_WireframeIdentifiedBy81
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueWireframe * myReturn = myObject->WireframeIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WireframeIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_HistoryIdentifiedBy82
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueHistory * myReturn = myObject->HistoryIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_HistoryIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeometryIdentifiedBy83
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeometry * myReturn = myObject->GeometryIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeometryIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_CoordinateSystemIdentifiedBy84
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueCoordinateSystem * myReturn = myObject->CoordinateSystemIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_CoordinateSystemIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_EventDescrIdentifiedBy85
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueEventDescr * myReturn = myObject->EventDescrIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_EventDescrIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_FaultIntersectionIdentifiedBy86
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueFaultIntersection * myReturn = myObject->FaultIntersectionIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_FaultIntersectionIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_ReservoirIdentifiedBy87
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueReservoir * myReturn = myObject->ReservoirIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ReservoirIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_TrimVertexLocatedBy88
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->TrimVertexLocatedBy((float) x,
                (float) y,
                (float) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_TrimVertexLocatedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_PolyLineBetween89
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong end1Ndx
  ,jlong end2Ndx)
{
  try
  {
    RescueTrimVertex * end1 = (RescueTrimVertex *) end1Ndx;
    RescueTrimVertex * end2 = (RescueTrimVertex *) end2Ndx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescuePolyLine * myReturn = myObject->PolyLineBetween((RescueTrimVertex *) end1,
                (RescueTrimVertex *) end2);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_PolyLineBetween");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_LookupNamed90
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueLookup * myReturn = myObject->LookupNamed((char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_LookupNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_PropertyGroupNamed91
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueModelPropertyGroup * myReturn = myObject->PropertyGroupNamed((char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_PropertyGroupNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_LogicalOrder92
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueLogicalOrder * myReturn = myObject->LogicalOrder();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_LogicalOrder");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_ColorTableList93
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueColorTableList * myReturn = myObject->ColorTableList();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ColorTableList");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueModel_Rotation94
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    float myReturn = myObject->Rotation();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_Rotation");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_SetRotation95
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat rotationIn)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->SetRotation((float) rotationIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SetRotation");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_IsWireframeLoaded96
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsWireframeLoaded();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_IsWireframeLoaded");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_LoadWireframe97
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->LoadWireframe();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_LoadWireframe");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_UnloadWireframe98
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->UnloadWireframe();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UnloadWireframe");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_WireframeHasChanged99
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->WireframeHasChanged();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WireframeHasChanged");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_MarkWireframeChanged100
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->MarkWireframeChanged();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_MarkWireframeChanged");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_WireframeFileTruncated101
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->WireframeFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WireframeFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_CoordinateSystem102
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueCoordinateSystem * myReturn = myObject->CoordinateSystem();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_CoordinateSystem");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_SetCoordinateSystem103
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newCoordinateSystemNdx)
{
  try
  {
    RescueCoordinateSystem * newCoordinateSystem = (RescueCoordinateSystem *) newCoordinateSystemNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->SetCoordinateSystem((RescueCoordinateSystem *) newCoordinateSystem);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SetCoordinateSystem");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NameValuePairs104
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    cNameValuePair * myReturn = myObject->NameValuePairs();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NameValuePairs");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_Version105
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean reloadBool)
{
  try
  {
    RESCUEBOOL reload = ((reloadBool == JNI_TRUE) ? TRUE : FALSE);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->Version((RESCUEBOOL) reload);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_Version");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_WireframeVersion106
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean reloadBool)
{
  try
  {
    RESCUEBOOL reload = ((reloadBool == JNI_TRUE) ? TRUE : FALSE);
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->WireframeVersion((RESCUEBOOL) reload);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WireframeVersion");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GridGeometry107
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeometry * myReturn = myObject->GridGeometry(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GridGeometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GridGeometryIdentifiedBy108
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueGeometry * myReturn = myObject->GridGeometryIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GridGeometryIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_GeometryCount109
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->GeometryCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_GeometryCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_AddGeometry110
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newGeometryNdx)
{
  try
  {
    RescueGeometry * newGeometry = (RescueGeometry *) newGeometryNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->AddGeometry((RescueGeometry *) newGeometry);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_AddGeometry");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_DropGeometry111
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toDropNdx)
{
  try
  {
    RescueGeometry * toDrop = (RescueGeometry *) toDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    myObject->DropGeometry((RescueGeometry *) toDrop);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropGeometry");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_PropertyIdentifiedBy112
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong id)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueProperty * myReturn = myObject->PropertyIdentifiedBy(id);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_PropertyIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_RescuePropertyGroupCount113
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jlong myReturn = myObject->RescuePropertyGroupCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_RescuePropertyGroupCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_NthRescuePropertyGroup114
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->NthRescuePropertyGroup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_NthRescuePropertyGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_PropertyGroupIdentifiedBy115
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->PropertyGroupIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_PropertyGroupIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_DropRescuePropertyGroup116
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescuePropertyGroup * unitToDrop = (RescuePropertyGroup *) unitToDropNdx;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescuePropertyGroup((RescuePropertyGroup *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DropRescuePropertyGroup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_Context117
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RescueContext * myReturn = myObject->Context();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_Context");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_IsOfType118
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_DataContainers119
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_DemandDataContainers120
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DemandDataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DemandDataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_SetWriter121
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring nameStr, jstring versionStr, 
                                              jstring dateStr, jstring userStr)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    jboolean versionBool;
    const char *version = env->GetStringUTFChars(versionStr, &versionBool);
    jboolean dateBool;
    const char *date = env->GetStringUTFChars(dateStr, &dateBool);
    jboolean userBool;
    const char *user = env->GetStringUTFChars(userStr, &userBool);
    myObject->SetWriter(name, version, date, user);
    env->ReleaseStringUTFChars(nameStr, name);
    env->ReleaseStringUTFChars(versionStr, version);
    env->ReleaseStringUTFChars(dateStr, date);
    env->ReleaseStringUTFChars(userStr, user);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_DemandDataContainers");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModel_VendorName122
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RCHString * myReturn = myObject->VendorName();
    if (myReturn == 0)
    {
      return (jstring) 0;
    }
    else
    {
      return env->NewStringUTF(myReturn->String());
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_VendorName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModel_VendorVersion123
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RCHString * myReturn = myObject->VendorVersion();
    if (myReturn == 0)
    {
      return (jstring) 0;
    }
    else
    {
      return env->NewStringUTF(myReturn->String());
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_VendorVersion");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModel_ModelDate124
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RCHString * myReturn = myObject->ModelDate();
    if (myReturn == 0)
    {
      return (jstring) 0;
    }
    else
    {
      return env->NewStringUTF(myReturn->String());
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_ModelDate");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModel_UserName125
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *myObject = (RescueModel *) nativeNdx;
    RCHString * myReturn = myObject->UserName();
    if (myReturn == 0)
    {
      return (jstring) 0;
    }
    else
    {
      return env->NewStringUTF(myReturn->String());
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UserName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C"
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueModel_SetOrientation126
  (JNIEnv *env, jclass modelClass, jlong context, jstring nameStr, jint orientation)
{
  try
  {
    RescueContext *contextObj = (RescueContext *) context;
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    int myReturn = RescueModel::SetOrientation(contextObj, (char *) name, 
                                              (RescueCoordinateSystem::Orientation) orientation);
    env->ReleaseStringUTFChars(nameStr, name);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SetOrientation");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}


extern "C"
JNIEXPORT jobjectArray JNICALL Java_org_Rescue_rjni_RescueModel_UniquePropertyNames127
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *model = (RescueModel *) nativeNdx;
    cSetString *names = model->UniquePropertyNames();
    int returnCount = names->Count();
    jobjectArray returnArray = (jobjectArray) env->NewObjectArray(returnCount, 
                                                 env->FindClass("java/lang/String"), 
                                                 env->NewStringUTF(""));
    int rLoop;
    for (rLoop = 0; rLoop < returnCount; rLoop++)
    {
      env->SetObjectArrayElement(returnArray, rLoop, 
                                 env->NewStringUTF(names->NthObject(rLoop)->NonNullString()));
    }
    return returnArray;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobjectArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_UniquePropertyNames");
    return (jobjectArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModel_SetIJKPreference128
  (JNIEnv *env, jobject obj, jlong nativeNdx, jint orient)
{
  try
  {
    RescueModel *model = (RescueModel *) nativeNdx;
    if (orient < 0 || orient > RescueCoordinateSystem::RDB)
    {
      throwByName(env, "java/lang/RuntimeException", "Invalid orientation parameter in SetIJKPreference");
    }
    else
    {
      model->SetIJKPreference((RescueCoordinateSystem::Orientation) orient);
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_SetIJKPreference");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModel_IJKPreference129
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *model = (RescueModel *) nativeNdx;
    char * myReturn = model->IJKPreference();
    return env->NewStringUTF(myReturn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_IJKPreference");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueModel_IJKPreferenceEnum130
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *model = (RescueModel *) nativeNdx;
    return (jint) model->IJKPreferenceEnum();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_IJKPreferenceEnum");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModel_Documents131
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModel *model = (RescueModel *) nativeNdx;
    return (jlong) model->Documents();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_Documents");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModel_WriteWITSML132
  (JNIEnv *env, jobject obj, jlong refNdx, jstring pathNameStr)
{
  try
  {
    jboolean pathNameBool;
    const char *pathName = env->GetStringUTFChars(pathNameStr, &pathNameBool);
    RescueModel * modelIn = (RescueModel *) refNdx;
    jboolean myReturn = modelIn->WriteWITSML(pathName);
    env->ReleaseStringUTFChars(pathNameStr, pathName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModel_WriteWITSML");
    return (jboolean) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_Create_1RescueModelPropertyGroup0  (JNIEnv *env, jobject obj
  ,jstring groupNameInStr
  ,jlong modelInNdx)
{
  try
  {
    jboolean groupNameInBool;
    const char *groupNameIn = env->GetStringUTFChars(groupNameInStr, &groupNameInBool);
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueModelPropertyGroup *myReturn = new RescueModelPropertyGroup((char *) groupNameIn,
                (RescueModel *) modelIn);
    env->ReleaseStringUTFChars(groupNameInStr, groupNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_RescueModelPropertyGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_Delete_1RescueModelPropertyGroup
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueModelPropertyGroup *myObj = (RescueModelPropertyGroup *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_~RescueModelPropertyGroup");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_GroupName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    RCHString * myReturn = myObject->GroupName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_GroupName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_SetGroupName3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newGroupNameStr)
{
  try
  {
    jboolean newGroupNameBool;
    const char *newGroupName = env->GetStringUTFChars(newGroupNameStr, &newGroupNameBool);
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    myObject->SetGroupName((char *) newGroupName);
    env->ReleaseStringUTFChars(newGroupNameStr, newGroupName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_SetGroupName");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_IsNamed4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring possibleNameStr)
{
  try
  {
    jboolean possibleNameBool;
    const char *possibleName = env->GetStringUTFChars(possibleNameStr, &possibleNameBool);
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) possibleName);
    env->ReleaseStringUTFChars(possibleNameStr, possibleName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_GroupCount5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    jlong myReturn = myObject->GroupCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_GroupCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_AddGroup6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescuePropertyGroup * toAdd = (RescuePropertyGroup *) toAddNdx;
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    myObject->AddGroup((RescuePropertyGroup *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_AddGroup");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_NthGroup7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->NthGroup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_NthGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_RemoveGroup8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong groupToDropNdx)
{
  try
  {
    RescuePropertyGroup * groupToDrop = (RescuePropertyGroup *) groupToDropNdx;
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->RemoveGroup((RescuePropertyGroup *) groupToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_RemoveGroup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_TestLock9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->TestLock();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_TestLock");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_SetLock10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    myObject->SetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_SetLock");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_ResetLock11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    myObject->ResetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_ResetLock");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueModelPropertyGroup_IsOfType12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueModelPropertyGroup *myObject = (RescueModelPropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueModelPropertyGroup_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueObject_IsIdentifiedBy0
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong possibleID)
{
  try
  {
    RescueObject *myObject = (RescueObject *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsIdentifiedBy(possibleID);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_IsIdentifiedBy");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueObject_Identifier1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueObject *myObject = (RescueObject *) nativeNdx;
    jlong myReturn = myObject->Identifier();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_Identifier");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueObject_IsNamed2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring mayBeNameStr)
{
  try
  {
    jboolean mayBeNameBool;
    const char *mayBeName = env->GetStringUTFChars(mayBeNameStr, &mayBeNameBool);
    RescueObject *myObject = (RescueObject *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) mayBeName);
    env->ReleaseStringUTFChars(mayBeNameStr, mayBeName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueObject_IsA3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueObject *myObject = (RescueObject *) nativeNdx;
    _RescueObjectType myReturn = myObject->IsA();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_IsA");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueObject_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueObject *myObject = (RescueObject *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueObject_Delete_1RescueObject
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueObject *myObj = (RescueObject *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_~RescueObject");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueObject_Create_1RescueObject6  (JNIEnv *env, jobject obj
  ,jlong contextNdx)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueObject *myReturn = new RescueObject((RescueContext *) context);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueObject_RescueObject");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_Create_1RescueParametricLGRMap0  (JNIEnv *env, jobject obj
  ,jlong lgrGeometryNdx
  ,jlong expectedRefined
  ,jlong expectedParent
  ,jlong refinedRealloc
  ,jlong parentRealloc)
{
  try
  {
    RescueGeometry * lgrGeometry = (RescueGeometry *) lgrGeometryNdx;
    RescueParametricLGRMap *myReturn = new RescueParametricLGRMap((RescueGeometry *) lgrGeometry,
                (RESCUEINT64) expectedRefined,
                (RESCUEINT64) expectedParent,
                (RESCUEINT64) refinedRealloc,
                (RESCUEINT64) parentRealloc);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_RescueParametricLGRMap");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_Delete_1RescueParametricLGRMap
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueParametricLGRMap *myObj = (RescueParametricLGRMap *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_~RescueParametricLGRMap");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ClearMap2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->ClearMap();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ClearMap");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_SetCellToCell3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong iNdx
  ,jlong jNdx
  ,jlong kNdx
  ,jlong parentCount
  ,jlongArray pIndxArray
  ,jlongArray pJndxArray
  ,jlongArray pKndxArray)
{
  jlong *pIndx = 0;
  jlong *pJndx = 0;
  jlong *pKndx = 0;
  try
  {
    if (pIndxArray != 0)
    {
      pIndx = (jlong *) env->GetPrimitiveArrayCritical(pIndxArray, 0);
    }
    if (pJndxArray != 0)
    {
      pJndx = (jlong *) env->GetPrimitiveArrayCritical(pJndxArray, 0);
    }
    if (pKndxArray != 0)
    {
      pKndx = (jlong *) env->GetPrimitiveArrayCritical(pKndxArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->SetCellToCell(
                (RESCUEINT64) iNdx,
                (RESCUEINT64) jNdx,
                (RESCUEINT64) kNdx,
                (RESCUEINT64) parentCount,
                (RESCUEINT64 *) pIndx,
                (RESCUEINT64 *) pJndx,
                (RESCUEINT64 *) pKndx);
    if (pIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pIndxArray, (jlong *) pIndx, 0);
    }
    if (pJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pJndxArray, (jlong *) pJndx, 0);
    }
    if (pKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pKndxArray, (jlong *) pKndx, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jlong *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jlong *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jlong *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jlong *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jlong *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jlong *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_SetCellToCell");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_SetCellToCell3i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint iNdx
  ,jint jNdx
  ,jint kNdx
  ,jint parentCount
  ,jintArray pIndxArray
  ,jintArray pJndxArray
  ,jintArray pKndxArray)
{
  jint *pIndx = 0;
  jint *pJndx = 0;
  jint *pKndx = 0;
  try
  {
    if (pIndxArray != 0)
    {
      pIndx = (jint *) env->GetPrimitiveArrayCritical(pIndxArray, 0);
    }
    if (pJndxArray != 0)
    {
      pJndx = (jint *) env->GetPrimitiveArrayCritical(pJndxArray, 0);
    }
    if (pKndxArray != 0)
    {
      pKndx = (jint *) env->GetPrimitiveArrayCritical(pKndxArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->SetCellToCell(iNdx,
                jNdx,
                kNdx,
                parentCount,
                (RESCUEINT32 *) pIndx,
                (RESCUEINT32 *) pJndx,
                (RESCUEINT32 *) pKndx);
    if (pIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pIndxArray, (jint *) pIndx, 0);
    }
    if (pJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pJndxArray, (jint *) pJndx, 0);
    }
    if (pKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pKndxArray, (jint *) pKndx, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jint *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jint *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jint *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jint *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jint *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jint *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_SetCellToCell");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ReadLGRCellToCell4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong iNdx
  ,jlong jNdx
  ,jlong kNdx
  ,jlong allocated
  ,jlongArray pIndxArray
  ,jlongArray pJndxArray
  ,jlongArray pKndxArray)
{
  jlong *pIndx = 0;
  jlong *pJndx = 0;
  jlong *pKndx = 0;
  try
  {
    if (pIndxArray != 0)
    {
      pIndx = (jlong *) env->GetPrimitiveArrayCritical(pIndxArray, 0);
    }
    if (pJndxArray != 0)
    {
      pJndx = (jlong *) env->GetPrimitiveArrayCritical(pJndxArray, 0);
    }
    if (pKndxArray != 0)
    {
      pKndx = (jlong *) env->GetPrimitiveArrayCritical(pKndxArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong myReturn = myObject->ReadLGRCellToCell(
                (RESCUEINT64) iNdx,
                (RESCUEINT64) jNdx,
                (RESCUEINT64) kNdx,
                (RESCUEINT64) allocated,
                (RESCUEINT64 *) pIndx,
                (RESCUEINT64 *) pJndx,
                (RESCUEINT64 *) pKndx);
    if (pIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pIndxArray, (jlong *) pIndx, 0);
    }
    if (pJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pJndxArray, (jlong *) pJndx, 0);
    }
    if (pKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pKndxArray, (jlong *) pKndx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jlong *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jlong *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jlong *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jlong *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jlong *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jlong *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ReadLGRCellToCell");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ReadLGRCellToCell4i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint iNdx
  ,jint jNdx
  ,jint kNdx
  ,jint allocated
  ,jintArray pIndxArray
  ,jintArray pJndxArray
  ,jintArray pKndxArray)
{
  jint *pIndx = 0;
  jint *pJndx = 0;
  jint *pKndx = 0;
  try
  {
    if (pIndxArray != 0)
    {
      pIndx = (jint *) env->GetPrimitiveArrayCritical(pIndxArray, 0);
    }
    if (pJndxArray != 0)
    {
      pJndx = (jint *) env->GetPrimitiveArrayCritical(pJndxArray, 0);
    }
    if (pKndxArray != 0)
    {
      pKndx = (jint *) env->GetPrimitiveArrayCritical(pKndxArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint myReturn = myObject->ReadLGRCellToCell(iNdx,
                jNdx,
                kNdx,
                allocated,
                (RESCUEINT32 *) pIndx,
                (RESCUEINT32 *) pJndx,
                (RESCUEINT32 *) pKndx);
    if (pIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pIndxArray, (jint *) pIndx, 0);
    }
    if (pJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pJndxArray, (jint *) pJndx, 0);
    }
    if (pKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(pKndxArray, (jint *) pKndx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jint *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jint *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jint *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (pIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pIndxArray, (jint *) pIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pJndxArray, (jint *) pJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (pKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(pKndxArray, (jint *) pKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ReadLGRCellToCell");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ReadParentCellToCell5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong iNdx
  ,jlong jNdx
  ,jlong kNdx
  ,jlong allocated
  ,jlongArray cIndxArray
  ,jlongArray cJndxArray
  ,jlongArray cKndxArray)
{
  jlong *cIndx = 0;
  jlong *cJndx = 0;
  jlong *cKndx = 0;
  try
  {
    if (cIndxArray != 0)
    {
      cIndx = (jlong *) env->GetPrimitiveArrayCritical(cIndxArray, 0);
    }
    if (cJndxArray != 0)
    {
      cJndx = (jlong *) env->GetPrimitiveArrayCritical(cJndxArray, 0);
    }
    if (cKndxArray != 0)
    {
      cKndx = (jlong *) env->GetPrimitiveArrayCritical(cKndxArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    int myReturn = myObject->ReadParentCellToCell(
                (RESCUEINT64) iNdx,
                (RESCUEINT64) jNdx,
                (RESCUEINT64) kNdx,
                (RESCUEINT64) allocated,
                (RESCUEINT64 *) cIndx,
                (RESCUEINT64 *) cJndx,
                (RESCUEINT64 *) cKndx);
    if (cIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
    }
    if (cJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
    }
    if (cKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jlong *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jlong *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jlong *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ReadParentCellToCell");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ReadParentCellToCell5i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint iNdx
  ,jint jNdx
  ,jint kNdx
  ,jint allocated
  ,jintArray cIndxArray
  ,jintArray cJndxArray
  ,jintArray cKndxArray)
{
  jint *cIndx = 0;
  jint *cJndx = 0;
  jint *cKndx = 0;
  try
  {
    if (cIndxArray != 0)
    {
      cIndx = (jint *) env->GetPrimitiveArrayCritical(cIndxArray, 0);
    }
    if (cJndxArray != 0)
    {
      cJndx = (jint *) env->GetPrimitiveArrayCritical(cJndxArray, 0);
    }
    if (cKndxArray != 0)
    {
      cKndx = (jint *) env->GetPrimitiveArrayCritical(cKndxArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    int myReturn = myObject->ReadParentCellToCell(iNdx,
                jNdx,
                kNdx,
                allocated,
                (RESCUEINT32 *) cIndx,
                (RESCUEINT32 *) cJndx,
                (RESCUEINT32 *) cKndx);
    if (cIndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
    }
    if (cJndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
    }
    if (cKndxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (cIndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cIndxArray, (jint *) cIndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cJndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cJndxArray, (jint *) cJndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cKndx != 0)
      {
        env->ReleasePrimitiveArrayCritical(cKndxArray, (jint *) cKndx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ReadParentCellToCell");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_CellToCellMapCount6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    RESCUEINT64 myReturn = myObject->CellToCellMapCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_CellToCellMapCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRIndx7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->LGRIndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRIndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRIndx7i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->LGRIndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRIndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRJndx8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->LGRJndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRJndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRJndx8i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->LGRJndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRJndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRKndx9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->LGRKndx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRKndx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRKndx9i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->LGRKndx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRKndx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentNdx10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->ParentNdx();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentNdx10i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->ParentNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentNdx10i");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentCount11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->ParentCount64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentCount");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentCount11i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->ParentCount(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellToCellMapCount64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentCount11i");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentMapCount12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    RESCUEINT64 myReturn = myObject->ParentMapCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentMapCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentINdx13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->ParentINdx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentINdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentINdx13i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->ParentINdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentINdx13i");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentJNdx14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->ParentJNdx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentJNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentJNdx14i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->ParentJNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentJNdx14i");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentKNdx15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->ParentKNdx64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentKNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_ParentKNdx15i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->ParentKNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_ParentKNdx15i");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRNdx16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->LGRNdx();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_LGRNdx16i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->LGRNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->ParentMapCount();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_LGRNdx16i");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_CopyArray17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint whichArrayInt
  ,jlong srcLowBound
  ,jlong srcCount
  ,jlongArray preAllocatedArray
  ,jlong destOffset)
{
  jlong *preAllocated = 0;
  try
  {
    RescueParametricLGRMap::RescuePMLGRArrayName whichArray = (RescueParametricLGRMap::RescuePMLGRArrayName) whichArrayInt;
    if (preAllocatedArray != 0)
    {
      preAllocated = (jlong *) env->GetPrimitiveArrayCritical(preAllocatedArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->CopyArray(
                (RescueParametricLGRMap::RescuePMLGRArrayName) whichArray,
                (RESCUEINT64) srcLowBound,
                (RESCUEINT64) srcCount,
                (RESCUEINT64 *) preAllocated,
                (RESCUEINT64) destOffset);
    if (preAllocatedArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_CopyArray");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_CopyArray17i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint whichArrayInt
  ,jint srcLowBound
  ,jint srcCount
  ,jintArray preAllocatedArray
  ,jint destOffset)
{
  jint *preAllocated = 0;
  try
  {
    RescueParametricLGRMap::RescuePMLGRArrayName whichArray = (RescueParametricLGRMap::RescuePMLGRArrayName) whichArrayInt;
    if (preAllocatedArray != 0)
    {
      preAllocated = (jint *) env->GetPrimitiveArrayCritical(preAllocatedArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->CopyArray((RescueParametricLGRMap::RescuePMLGRArrayName) whichArray,
                srcLowBound,
                srcCount,
                (RESCUEINT32 *) preAllocated,
                destOffset);
    if (preAllocatedArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_CopyArray");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_Set19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong cellToCellCount
  ,jlongArray lgrIndxInArray
  ,jlongArray lgrJndxInArray
  ,jlongArray lgrKndxInArray
  ,jlongArray parentNdxInArray
  ,jlongArray parentCountInArray
  ,jlong parentMapCount
  ,jlongArray parentIndxInArray
  ,jlongArray parentJndxInArray
  ,jlongArray parentKndxInArray
  ,jlongArray lgrNdxInArray)
{
  jlong *lgrIndxIn = 0;
  jlong *lgrJndxIn = 0;
  jlong *lgrKndxIn = 0;
  jlong *parentNdxIn = 0;
  jlong *parentCountIn = 0;
  jlong *parentIndxIn = 0;
  jlong *parentJndxIn = 0;
  jlong *parentKndxIn = 0;
  jlong *lgrNdxIn = 0;
  try
  {
    if (lgrIndxInArray != 0)
    {
      lgrIndxIn = (jlong *) env->GetPrimitiveArrayCritical(lgrIndxInArray, 0);
    }
    if (lgrJndxInArray != 0)
    {
      lgrJndxIn = (jlong *) env->GetPrimitiveArrayCritical(lgrJndxInArray, 0);
    }
    if (lgrKndxInArray != 0)
    {
      lgrKndxIn = (jlong *) env->GetPrimitiveArrayCritical(lgrKndxInArray, 0);
    }
    if (parentNdxInArray != 0)
    {
      parentNdxIn = (jlong *) env->GetPrimitiveArrayCritical(parentNdxInArray, 0);
    }
    if (parentCountInArray != 0)
    {
      parentCountIn = (jlong *) env->GetPrimitiveArrayCritical(parentCountInArray, 0);
    }
    if (parentIndxInArray != 0)
    {
      parentIndxIn = (jlong *) env->GetPrimitiveArrayCritical(parentIndxInArray, 0);
    }
    if (parentJndxInArray != 0)
    {
      parentJndxIn = (jlong *) env->GetPrimitiveArrayCritical(parentJndxInArray, 0);
    }
    if (parentKndxInArray != 0)
    {
      parentKndxIn = (jlong *) env->GetPrimitiveArrayCritical(parentKndxInArray, 0);
    }
    if (lgrNdxInArray != 0)
    {
      lgrNdxIn = (jlong *) env->GetPrimitiveArrayCritical(lgrNdxInArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->Set((RESCUEINT64) cellToCellCount,
                (RESCUEINT64 *) lgrIndxIn,
                (RESCUEINT64 *) lgrJndxIn,
                (RESCUEINT64 *) lgrKndxIn,
                (RESCUEINT64 *) parentNdxIn,
                (RESCUEINT64 *) parentCountIn,
                (RESCUEINT64) parentMapCount,
                (RESCUEINT64 *) parentIndxIn,
                (RESCUEINT64 *) parentJndxIn,
                (RESCUEINT64 *) parentKndxIn,
                (RESCUEINT64 *) lgrNdxIn);
    if (lgrIndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrIndxInArray, (jlong *) lgrIndxIn, 0);
    }
    if (lgrJndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrJndxInArray, (jlong *) lgrJndxIn, 0);
    }
    if (lgrKndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrKndxInArray, (jlong *) lgrKndxIn, 0);
    }
    if (parentNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentNdxInArray, (jlong *) parentNdxIn, 0);
    }
    if (parentCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentCountInArray, (jlong *) parentCountIn, 0);
    }
    if (parentIndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentIndxInArray, (jlong *) parentIndxIn, 0);
    }
    if (parentJndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentJndxInArray, (jlong *) parentJndxIn, 0);
    }
    if (parentKndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentKndxInArray, (jlong *) parentKndxIn, 0);
    }
    if (lgrNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrNdxInArray, (jlong *) lgrNdxIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (lgrIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrIndxInArray, (jlong *) lgrIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrJndxInArray, (jlong *) lgrJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrKndxInArray, (jlong *) lgrKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentNdxInArray, (jlong *) parentNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentCountInArray, (jlong *) parentCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentIndxInArray, (jlong *) parentIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentJndxInArray, (jlong *) parentJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentKndxInArray, (jlong *) parentKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrNdxInArray, (jlong *) lgrNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (lgrIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrIndxInArray, (jlong *) lgrIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrJndxInArray, (jlong *) lgrJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrKndxInArray, (jlong *) lgrKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentNdxInArray, (jlong *) parentNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentCountInArray, (jlong *) parentCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentIndxInArray, (jlong *) parentIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentJndxInArray, (jlong *) parentJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentKndxInArray, (jlong *) parentKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrNdxInArray, (jlong *) lgrNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_Set");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_Set19i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint cellToCellCount
  ,jintArray lgrIndxInArray
  ,jintArray lgrJndxInArray
  ,jintArray lgrKndxInArray
  ,jintArray parentNdxInArray
  ,jintArray parentCountInArray
  ,jint parentMapCount
  ,jintArray parentIndxInArray
  ,jintArray parentJndxInArray
  ,jintArray parentKndxInArray
  ,jintArray lgrNdxInArray)
{
  jint *lgrIndxIn = 0;
  jint *lgrJndxIn = 0;
  jint *lgrKndxIn = 0;
  jint *parentNdxIn = 0;
  jint *parentCountIn = 0;
  jint *parentIndxIn = 0;
  jint *parentJndxIn = 0;
  jint *parentKndxIn = 0;
  jint *lgrNdxIn = 0;
  try
  {
    if (lgrIndxInArray != 0)
    {
      lgrIndxIn = (jint *) env->GetPrimitiveArrayCritical(lgrIndxInArray, 0);
    }
    if (lgrJndxInArray != 0)
    {
      lgrJndxIn = (jint *) env->GetPrimitiveArrayCritical(lgrJndxInArray, 0);
    }
    if (lgrKndxInArray != 0)
    {
      lgrKndxIn = (jint *) env->GetPrimitiveArrayCritical(lgrKndxInArray, 0);
    }
    if (parentNdxInArray != 0)
    {
      parentNdxIn = (jint *) env->GetPrimitiveArrayCritical(parentNdxInArray, 0);
    }
    if (parentCountInArray != 0)
    {
      parentCountIn = (jint *) env->GetPrimitiveArrayCritical(parentCountInArray, 0);
    }
    if (parentIndxInArray != 0)
    {
      parentIndxIn = (jint *) env->GetPrimitiveArrayCritical(parentIndxInArray, 0);
    }
    if (parentJndxInArray != 0)
    {
      parentJndxIn = (jint *) env->GetPrimitiveArrayCritical(parentJndxInArray, 0);
    }
    if (parentKndxInArray != 0)
    {
      parentKndxIn = (jint *) env->GetPrimitiveArrayCritical(parentKndxInArray, 0);
    }
    if (lgrNdxInArray != 0)
    {
      lgrNdxIn = (jint *) env->GetPrimitiveArrayCritical(lgrNdxInArray, 0);
    }
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    myObject->Set(cellToCellCount,
                (RESCUEINT32 *) lgrIndxIn,
                (RESCUEINT32 *) lgrJndxIn,
                (RESCUEINT32 *) lgrKndxIn,
                (RESCUEINT32 *) parentNdxIn,
                (RESCUEINT32 *) parentCountIn,
                parentMapCount,
                (RESCUEINT32 *) parentIndxIn,
                (RESCUEINT32 *) parentJndxIn,
                (RESCUEINT32 *) parentKndxIn,
                (RESCUEINT32 *) lgrNdxIn);
    if (lgrIndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrIndxInArray, (jint *) lgrIndxIn, 0);
    }
    if (lgrJndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrJndxInArray, (jint *) lgrJndxIn, 0);
    }
    if (lgrKndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrKndxInArray, (jint *) lgrKndxIn, 0);
    }
    if (parentNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentNdxInArray, (jint *) parentNdxIn, 0);
    }
    if (parentCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentCountInArray, (jint *) parentCountIn, 0);
    }
    if (parentIndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentIndxInArray, (jint *) parentIndxIn, 0);
    }
    if (parentJndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentJndxInArray, (jint *) parentJndxIn, 0);
    }
    if (parentKndxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(parentKndxInArray, (jint *) parentKndxIn, 0);
    }
    if (lgrNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(lgrNdxInArray, (jint *) lgrNdxIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (lgrIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrIndxInArray, (jint *) lgrIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrJndxInArray, (jint *) lgrJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrKndxInArray, (jint *) lgrKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentNdxInArray, (jint *) parentNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentCountInArray, (jint *) parentCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentIndxInArray, (jint *) parentIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentJndxInArray, (jint *) parentJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentKndxInArray, (jint *) parentKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrNdxInArray, (jint *) lgrNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (lgrIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrIndxInArray, (jint *) lgrIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrJndxInArray, (jint *) lgrJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrKndxInArray, (jint *) lgrKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentNdxInArray, (jint *) parentNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentCountInArray, (jint *) parentCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentIndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentIndxInArray, (jint *) parentIndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentJndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentJndxInArray, (jint *) parentJndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (parentKndxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(parentKndxInArray, (jint *) parentKndxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (lgrNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(lgrNdxInArray, (jint *) lgrNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_Set");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_DataContainers20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_DataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueParametricLGRMap_DemandDataContainers21
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueParametricLGRMap *myObject = (RescueParametricLGRMap *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DemandDataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueParametricLGRMap_DemandDataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_Create_1RescuePillar0  (JNIEnv *env, jobject obj
)
{
  try
  {
    RescuePillar *myReturn = new RescuePillar();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_RescuePillar");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_Delete_1RescuePillar
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescuePillar *myObj = (RescuePillar *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_~RescuePillar");
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescuePillar_VertexIs2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescueGeometry::RescueVertexType myReturn = myObject->VertexIs();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_VertexIs");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescuePillar_NodeValues7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong i
  ,jlong j
  ,jlong k)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->NodeValues(i,
                j,
                k);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->NodeValuesLength();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_NodeValues");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescuePillar_NodeValuesLength8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    jint myReturn = myObject->NodeValuesLength();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_NodeValuesLength");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePillar_KValueR9
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong k, jlong dir)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    float myReturn = myObject->KValue(k, dir);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_KValueR9");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePillar_KValue9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong k)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    float myReturn = myObject->KValue(k);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_KValue");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_ZValue10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong k
  ,jfloat newZValues)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->ZValue(k,
                (float) newZValues);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_ZValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_ZStack11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jfloatArray newZValuesArray)
{
  jfloat *newZValues = 0;
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    if (newZValuesArray != 0)
    {
      newZValues = (jfloat *) env->GetPrimitiveArrayCritical(newZValuesArray, 0);
    }
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->ZStack((RescueGeometry *) geometry,
                (float *) newZValues);
    if (newZValuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(newZValuesArray, (jfloat *) newZValues, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (newZValues != 0)
      {
        env->ReleasePrimitiveArrayCritical(newZValuesArray, (jfloat *) newZValues, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (newZValues != 0)
      {
        env->ReleasePrimitiveArrayCritical(newZValuesArray, (jfloat *) newZValues, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_ZStack");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_ZStack12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jlong direction
  ,jfloatArray newZValuesArray)
{
  jfloat *newZValues = 0;
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    if (newZValuesArray != 0)
    {
      newZValues = (jfloat *) env->GetPrimitiveArrayCritical(newZValuesArray, 0);
    }
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->ZStack((RescueGeometry *) geometry,
                direction,
                (float *) newZValues);
    if (newZValuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(newZValuesArray, (jfloat *) newZValues, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (newZValues != 0)
      {
        env->ReleasePrimitiveArrayCritical(newZValuesArray, (jfloat *) newZValues, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (newZValues != 0)
      {
        env->ReleasePrimitiveArrayCritical(newZValuesArray, (jfloat *) newZValues, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_ZStack");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePillar_IsSplit13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsSplit();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_IsSplit");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePillar_IsVertical14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsVertical();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_IsVertical");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_TopTruncation15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescueTruncation * myReturn = myObject->TopTruncation();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_TopTruncation");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_BaseTruncation16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescueTruncation * myReturn = myObject->BaseTruncation();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_BaseTruncation");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_SetTopTruncation17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newTopNdx)
{
  try
  {
    RescueTruncation * newTop = (RescueTruncation *) newTopNdx;
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->SetTopTruncation((RescueTruncation *) newTop);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_SetTopTruncation");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_SetBaseTruncation18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newBaseNdx)
{
  try
  {
    RescueTruncation * newBase = (RescueTruncation *) newBaseNdx;
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->SetBaseTruncation((RescueTruncation *) newBase);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_SetBaseTruncation");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_AddControlPoint19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->AddControlPoint((float) x,
                (float) y,
                (float) z);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_AddControlPoint");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_rebuildSplineCoeffs20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->rebuildSplineCoeffs();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_rebuildSplineCoeffs");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePillar_AddControlPoint21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat x
  ,jfloat y
  ,jfloat z
  ,jfloat xb
  ,jfloat xc
  ,jfloat xd
  ,jfloat yb
  ,jfloat yc
  ,jfloat yd)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    myObject->AddControlPoint((float) x,
                (float) y,
                (float) z,
                (float) xb,
                (float) xc,
                (float) xd,
                (float) yb,
                (float) yc,
                (float) yd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_AddControlPoint");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getByZ22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat z)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescuePoint * myReturn = myObject->getByZ((float) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getByZ");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getMinTangent23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescuePoint * myReturn = myObject->getMinTangent();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getMinTangent");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getMaxTangent24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescuePoint * myReturn = myObject->getMaxTangent();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getMaxTangent");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getNumCtrlPoints25
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    jlong myReturn = myObject->getNumCtrlPoints();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getNumCtrlPoints");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getMinCtrlPoint26
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescuePoint * myReturn = myObject->getMinCtrlPoint();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getMinCtrlPoint");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getMaxCtrlPoint27
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescuePoint * myReturn = myObject->getMaxCtrlPoint();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getMaxCtrlPoint");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getCtrlPointAt28
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescuePoint * myReturn = myObject->getCtrlPointAt(ndx);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getCtrlPointAt");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getXSplineCoefAt29
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescueSplineCoef * myReturn = myObject->getXSplineCoefAt(ndx);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getXSplineCoefAt");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePillar_getYSplineCoefAt30
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndx)
{
  try
  {
    RescuePillar *myObject = (RescuePillar *) nativeNdx;
    RescueSplineCoef * myReturn = myObject->getYSplineCoefAt(ndx);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePillar_getYSplineCoefAt");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePoint_Create_1RescuePoint0  (JNIEnv *env, jobject obj
  ,jfloat xIn
  ,jfloat yIn
  ,jfloat zIn)
{
  try
  {
    RescuePoint *myReturn = new RescuePoint((float) xIn,
                (float) yIn,
                (float) zIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_RescuePoint");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePoint_Create_1RescuePoint1  (JNIEnv *env, jobject obj
  ,jlong inNdx)
{
  try
  {
    RescuePoint * in = (RescuePoint *) inNdx;
    RescuePoint *myReturn = new RescuePoint((RescuePoint *) in);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_RescuePoint");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePoint_Delete_1RescuePoint
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescuePoint *myObj = (RescuePoint *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_~RescuePoint");
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePoint_X4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePoint *myObject = (RescuePoint *) nativeNdx;
    float myReturn = myObject->X();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_X");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePoint_Y5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePoint *myObject = (RescuePoint *) nativeNdx;
    float myReturn = myObject->Y();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_Y");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePoint_Z6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePoint *myObject = (RescuePoint *) nativeNdx;
    float myReturn = myObject->Z();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_Z");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePoint_SetX7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat xIn)
{
  try
  {
    RescuePoint *myObject = (RescuePoint *) nativeNdx;
    myObject->SetX((float) xIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_SetX");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePoint_SetY8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat yIn)
{
  try
  {
    RescuePoint *myObject = (RescuePoint *) nativeNdx;
    myObject->SetY((float) yIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_SetY");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePoint_SetZ9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat zIn)
{
  try
  {
    RescuePoint *myObject = (RescuePoint *) nativeNdx;
    myObject->SetZ((float) zIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePoint_SetZ");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLine_Delete_1RescuePolyLine
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescuePolyLine *myObj = (RescuePolyLine *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_~RescuePolyLine");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_Create_1RescuePolyLine1  (JNIEnv *env, jobject obj
  ,jlong ownerInNdx
  ,jlong leftVertexInNdx
  ,jlong rightVertexInNdx)
{
  try
  {
    RescueWireframeOwner * ownerIn = (RescueWireframeOwner *) ownerInNdx;
    RescueTrimVertex * leftVertexIn = (RescueTrimVertex *) leftVertexInNdx;
    RescueTrimVertex * rightVertexIn = (RescueTrimVertex *) rightVertexInNdx;
    RescuePolyLine *myReturn = new RescuePolyLine((RescueWireframeOwner *) ownerIn,
                (RescueTrimVertex *) leftVertexIn,
                (RescueTrimVertex *) rightVertexIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_RescuePolyLine");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLine_Equals2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescuePolyLineStub * other = (RescuePolyLineStub *) otherNdx;
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescuePolyLineStub *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLine_Equals3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescuePolyLine * other = (RescuePolyLine *) otherNdx;
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescuePolyLine *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_Owner4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescueWireframe * myReturn = myObject->Owner();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_Owner");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_ParentModel5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_PolyLineNodes6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    cSetRescuePolyLineNode * myReturn = myObject->PolyLineNodes();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_PolyLineNodes");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_LeftVertexObj7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescueTrimVertexStub * myReturn = myObject->LeftVertexObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_LeftVertexObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_RightVertexObj8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescueTrimVertexStub * myReturn = myObject->RightVertexObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_RightVertexObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_LeftVertex9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->LeftVertex();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_LeftVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_RightVertex10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->RightVertex();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_RightVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_Traverse11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescuePolyLineNode * myReturn = myObject->Traverse(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_Traverse");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_InnerNodeCount12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    jlong myReturn = myObject->InnerNodeCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_InnerNodeCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLine_NthInnerNode13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedNdx)
{
  try
  {
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RescuePolyLineNode * myReturn = myObject->NthInnerNode(zeroBasedNdx);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_NthInnerNode");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLine_IsOfType14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePolyLine *myObject = (RescuePolyLine *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLine_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_Delete_1RescuePolyLineNode
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescuePolyLineNode *myObj = (RescuePolyLineNode *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_~RescuePolyLineNode");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_Create_1RescuePolyLineNode1  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jdouble x
  ,jdouble y
  ,jdouble z)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescuePolyLineNode *myReturn = new RescuePolyLineNode((RescueContext *) context,
                (double) x,
                (double) y,
                (double) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_RescuePolyLineNode");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_Create_1RescuePolyLineNode2  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescuePolyLineNode *myReturn = new RescuePolyLineNode((RescueContext *) context,
                (float) x,
                (float) y,
                (float) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_RescuePolyLineNode");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SetXYZValue3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jdouble x
  ,jdouble y
  ,jdouble z)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    myObject->SetXYZValue((double) x,
                (double) y,
                (double) z);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SetXYZValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SetXYZValue4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    myObject->SetXYZValue((float) x,
                (float) y,
                (float) z);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SetXYZValue");
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_X5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    double myReturn = myObject->X();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_X");
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_Y6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    double myReturn = myObject->Y();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_Y");
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_Z7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    double myReturn = myObject->Z();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_Z");
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SetUVValue8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong faceNdx
  ,jfloat u
  ,jfloat v)
{
  try
  {
    RescueIJSurface * face = (RescueIJSurface *) faceNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    myObject->SetUVValue((RescueIJSurface *) face,
                (float) u,
                (float) v);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SetUVValue");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_FaceCount9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    jlong myReturn = myObject->FaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_FaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_NthFace10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RescueIJSurface * myReturn = myObject->NthFace(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_NthFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_U11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong faceNdx)
{
  try
  {
    RescueIJSurface * face = (RescueIJSurface *) faceNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    float myReturn = myObject->U((RescueIJSurface *) face);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_U");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_V12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong faceNdx)
{
  try
  {
    RescueIJSurface * face = (RescueIJSurface *) faceNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    float myReturn = myObject->V((RescueIJSurface *) face);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_V");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SurfaceOnNode13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong surfNdx)
{
  try
  {
    RescueIJSurface & surf = (RescueIJSurface &) surfNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RESCUEBOOL myReturn = myObject->SurfaceOnNode((RescueIJSurface &) surf);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SurfaceOnNode");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SetUVValue14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong surfaceNdx
  ,jlong faceNdx
  ,jfloat u
  ,jfloat v)
{
  try
  {
    RescueTriangulatedSurface * surface = (RescueTriangulatedSurface *) surfaceNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    myObject->SetUVValue((RescueTriangulatedSurface *) surface,
                faceNdx,
                (float) u,
                (float) v);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SetUVValue");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_TSurfCount15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    jlong myReturn = myObject->TSurfCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_TSurfCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_NthTSurf16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx
  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->NthTSurf((RescueModel *) model,
                                                              zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_NthTSurf");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_U17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong tSurfNdx)
{
  try
  {
    RescueTriangulatedSurface * tSurf = (RescueTriangulatedSurface *) tSurfNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    float myReturn = myObject->U((RescueTriangulatedSurface *) tSurf);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_U");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_V18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong tSurfNdx)
{
  try
  {
    RescueTriangulatedSurface * tSurf = (RescueTriangulatedSurface *) tSurfNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    float myReturn = myObject->V((RescueTriangulatedSurface *) tSurf);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_V");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_FaceNdx19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong tSurfNdx)
{
  try
  {
    RescueTriangulatedSurface * tSurf = (RescueTriangulatedSurface *) tSurfNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    jlong myReturn = myObject->FaceNdx64((RescueTriangulatedSurface *) tSurf);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_FaceNdx");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SurfaceOnNode20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong surfNdx)
{
  try
  {
    RescueTriangulatedSurface & surf = (RescueTriangulatedSurface &) surfNdx;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RESCUEBOOL myReturn = myObject->SurfaceOnNode((RescueTriangulatedSurface &) surf);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SurfaceOnNode");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_SetLayerValue21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jint layerTypeInt
  ,jfloat layerNdxParam)
{
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    RescuePolyLineNode::RescueLayerType layerType = (RescuePolyLineNode::RescueLayerType) layerTypeInt;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    myObject->SetLayerValue((RescueGeometry *) geometry,
                (RescuePolyLineNode::RescueLayerType) layerType,
                (float) layerNdxParam);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_SetLayerValue");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_LayerCount22
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    jlong myReturn = myObject->LayerCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_LayerCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_NthLayer23
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RescuePolyLineNodeBUG * myReturn = myObject->NthLayer(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_NthLayer");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_ParamOn24
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jint layerTypeInt)
{
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    RescuePolyLineNode::RescueLayerType layerType = (RescuePolyLineNode::RescueLayerType) layerTypeInt;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RescuePolyLineNodeBUG * myReturn = myObject->ParamOn((RescueGeometry *) geometry,
                (RescuePolyLineNode::RescueLayerType) layerType);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_ParamOn");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNode_IsOfType25
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePolyLineNode *myObject = (RescuePolyLineNode *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNode_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeBUG_SetNdxParam0
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat paramIn)
{
  try
  {
    RescuePolyLineNodeBUG *myObject = (RescuePolyLineNodeBUG *) nativeNdx;
    myObject->SetNdxParam((float) paramIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeBUG_SetNdxParam");
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeBUG_Type1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeBUG *myObject = (RescuePolyLineNodeBUG *) nativeNdx;
    RescuePolyLineNode::RescueLayerType myReturn = myObject->Type();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeBUG_Type");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeBUG_NdxParam2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeBUG *myObject = (RescuePolyLineNodeBUG *) nativeNdx;
    float myReturn = myObject->NdxParam();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeBUG_NdxParam");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeBUG_Geometry3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeBUG *myObject = (RescuePolyLineNodeBUG *) nativeNdx;
    RescueGeometry * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeBUG_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeBUG_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePolyLineNodeBUG *myObject = (RescuePolyLineNodeBUG *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeBUG_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUV_Create_1RescuePolyLineNodeUV0  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jlong faceInNdx
  ,jfloat u
  ,jfloat v)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueIJSurface * faceIn = (RescueIJSurface *) faceInNdx;
    RescuePolyLineNodeUV *myReturn = new RescuePolyLineNodeUV((RescueContext *) context,
                (RescueIJSurface *) faceIn,
                (float) u,
                (float) v);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUV_RescuePolyLineNodeUV");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUV_SetUVValue1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat u
  ,jfloat v)
{
  try
  {
    RescuePolyLineNodeUV *myObject = (RescuePolyLineNodeUV *) nativeNdx;
    myObject->SetUVValue((float) u,
                (float) v);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUV_SetUVValue");
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUV_U2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeUV *myObject = (RescuePolyLineNodeUV *) nativeNdx;
    float myReturn = myObject->U();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUV_U");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUV_V3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeUV *myObject = (RescuePolyLineNodeUV *) nativeNdx;
    float myReturn = myObject->V();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUV_V");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUV_Face4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeUV *myObject = (RescuePolyLineNodeUV *) nativeNdx;
    RescueIJSurface * myReturn = myObject->Face();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUV_Face");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUV_IsOfType5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePolyLineNodeUV *myObject = (RescuePolyLineNodeUV *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUV_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_Create_1RescuePolyLineNodeUVT0  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jlong faceInNdx
  ,jlong faceNdxIn
  ,jfloat u
  ,jfloat v)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueTriangulatedSurface * faceIn = (RescueTriangulatedSurface *) faceInNdx;
    RescuePolyLineNodeUVT *myReturn = new RescuePolyLineNodeUVT((RescueContext *) context,
                (RescueTriangulatedSurface *) faceIn,
                faceNdxIn,
                (float) u,
                (float) v);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_RescuePolyLineNodeUVT");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_SetUVValue1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong faceNdxIn
  ,jfloat u
  ,jfloat v)
{
  try
  {
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    myObject->SetUVValue(faceNdxIn,
                (float) u,
                (float) v);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_SetUVValue");
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_U2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    float myReturn = myObject->U();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_U");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_V3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    float myReturn = myObject->V();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_V");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_FaceNdx4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    jlong myReturn = myObject->FaceNdx64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_FaceNdx");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_CompareFace5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toCompareNdx)
{
  try
  {
    RescueTriangulatedSurface * toCompare = (RescueTriangulatedSurface *) toCompareNdx;
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    RESCUEBOOL myReturn = myObject->CompareFace((RescueTriangulatedSurface *) toCompare);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_CompareFace");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_Face6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->Face((RescueModel *) model);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_Face");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineNodeUVT_IsOfType7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePolyLineNodeUVT *myObject = (RescuePolyLineNodeUVT *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineNodeUVT_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePolyLineStub_Delete_1RescuePolyLineStub
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescuePolyLineStub *myObj = (RescuePolyLineStub *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineStub_~RescuePolyLineStub");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineStub_Equals1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescuePolyLineStub * other = (RescuePolyLineStub *) otherNdx;
    RescuePolyLineStub *myObject = (RescuePolyLineStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescuePolyLineStub *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineStub_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineStub_Equals2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescuePolyLine * other = (RescuePolyLine *) otherNdx;
    RescuePolyLineStub *myObject = (RescuePolyLineStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescuePolyLine *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineStub_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePolyLineStub_PolyLine3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx
  ,jboolean loadIfNeededBool)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RESCUEBOOL loadIfNeeded = ((loadIfNeededBool == JNI_TRUE) ? TRUE : FALSE);
    RescuePolyLineStub *myObject = (RescuePolyLineStub *) nativeNdx;
    RescuePolyLine * myReturn = myObject->PolyLine((RescueModel *) model,
                (RESCUEBOOL) loadIfNeeded);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineStub_PolyLine");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePolyLineStub_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePolyLineStub *myObject = (RescuePolyLineStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePolyLineStub_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty0  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jfloat nullValue
  ,jfloatArray valueArrayArray
  ,jint attachedToInInt)
{
  jfloat *valueArray = 0;
  try
  {
    RescueTriangulatedSurface * parentSurface = (RescueTriangulatedSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueTriangulatedSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (float) nullValue,
                (float *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayFloat *)  myReturn->Data())->SetValue(nullValue, (float *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty1  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jint nullValue
  ,jintArray valueArrayArray
  ,jint attachedToInInt)
{
  jint *valueArray = 0;
  try
  {
    RescueTriangulatedSurface * parentSurface = (RescueTriangulatedSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    if (valueArrayArray != 0)
    {
      valueArray = (jint *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueTriangulatedSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RESCUEINT32) nullValue,
                (RESCUEINT32 *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayInt *)  myReturn->Data())->SetValue(nullValue, (RESCUEINT32 *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty2  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jlong lookupTableInNdx
  ,jbyte nullValueJ
  ,jbyteArray valueArrayArray
  ,jint attachedToInInt)
{
  jbyte *valueArray = 0;
  try
  {
    RescueTriangulatedSurface * parentSurface = (RescueTriangulatedSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned char nullValue = (unsigned char) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jbyte *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueTriangulatedSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RescueLookup *) lookupTableIn,
                (unsigned char) nullValue,
                (unsigned char *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayByte *)  myReturn->Data())->SetValue(nullValue, (unsigned char *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty3  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jlong lookupTableInNdx
  ,jchar nullValueJ
  ,jcharArray valueArrayArray
  ,jint attachedToInInt)
{
  jchar *valueArray = 0;
  try
  {
    RescueTriangulatedSurface * parentSurface = (RescueTriangulatedSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned short nullValue = (unsigned short) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jchar *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueTriangulatedSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RescueLookup *) lookupTableIn,
                (unsigned short) nullValue,
                (unsigned short *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayShort *)  myReturn->Data())->SetValue(nullValue, (unsigned short *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty4  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt)
{
  try
  {
    RescueTriangulatedSurface * parentSurface = (RescueTriangulatedSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    Rescue2dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    Rescue2dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        valueArray = new Rescue2dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueTriangulatedSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (Rescue2dVector) nullValue,
                (Rescue2dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty5  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt)
{
  try
  {
    RescueTriangulatedSurface * parentSurface = (RescueTriangulatedSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    jfieldID nullValueCoord3ID = env->GetFieldID(nullValueClass, "coord3", "F");
    Rescue3dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    nullValue.coord3 = env->GetFloatField(nullValueJ, nullValueCoord3ID);
    Rescue3dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        jfieldID valueArrayCoord3ID = env->GetFieldID(valueArrayClass, "coord3", "F");
        valueArray = new Rescue3dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
          valueArray[loop2].coord3 = env->GetFloatField(element, valueArrayCoord3ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueTriangulatedSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (Rescue3dVector) nullValue,
                (Rescue3dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty6  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jfloat nullValue
  ,jfloatArray valueArrayArray
  ,jint attachedToInInt
  ,jlong parentIJSurfaceNdx)
{
  jfloat *valueArray = 0;
  try
  {
    RescueSurface * parentSurface = (RescueSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueIJSurface * parentIJSurface = (RescueIJSurface *) parentIJSurfaceNdx;
    RescueProperty *myReturn = new RescueProperty((RescueSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (float) nullValue,
                (float *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn,
                (RescueIJSurface *) parentIJSurface);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayFloat *)  myReturn->Data())->SetValue(nullValue, (float *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty7  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jint nullValue
  ,jintArray valueArrayArray
  ,jint attachedToInInt
  ,jlong parentIJSurfaceNdx)
{
  jint *valueArray = 0;
  try
  {
    RescueSurface * parentSurface = (RescueSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    if (valueArrayArray != 0)
    {
      valueArray = (jint *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueIJSurface * parentIJSurface = (RescueIJSurface *) parentIJSurfaceNdx;
    RescueProperty *myReturn = new RescueProperty((RescueSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RESCUEINT32) nullValue,
                (RESCUEINT32 *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn,
                (RescueIJSurface *) parentIJSurface);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayInt *)  myReturn->Data())->SetValue(nullValue, (RESCUEINT32 *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty8  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jlong lookupTableInNdx
  ,jbyte nullValueJ
  ,jbyteArray valueArrayArray
  ,jint attachedToInInt
  ,jlong parentIJSurfaceNdx)
{
  jbyte *valueArray = 0;
  try
  {
    RescueSurface * parentSurface = (RescueSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned char nullValue = (unsigned char) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jbyte *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueIJSurface * parentIJSurface = (RescueIJSurface *) parentIJSurfaceNdx;
    RescueProperty *myReturn = new RescueProperty((RescueSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RescueLookup *) lookupTableIn,
                (unsigned char) nullValue,
                (unsigned char *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn,
                (RescueIJSurface *) parentIJSurface);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayByte *)  myReturn->Data())->SetValue(nullValue, (unsigned char *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty9  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jlong lookupTableInNdx
  ,jchar nullValueJ
  ,jcharArray valueArrayArray
  ,jint attachedToInInt
  ,jlong parentIJSurfaceNdx)
{
  jchar *valueArray = 0;
  try
  {
    RescueSurface * parentSurface = (RescueSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned short nullValue = (unsigned short) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jchar *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueIJSurface * parentIJSurface = (RescueIJSurface *) parentIJSurfaceNdx;
    RescueProperty *myReturn = new RescueProperty((RescueSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RescueLookup *) lookupTableIn,
                (unsigned short) nullValue,
                (unsigned short *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn,
                (RescueIJSurface *) parentIJSurface);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayShort *)  myReturn->Data())->SetValue(nullValue, (unsigned short *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty10  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt
  ,jlong parentIJSurfaceNdx)
{
  try
  {
    RescueSurface * parentSurface = (RescueSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    Rescue2dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    Rescue2dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        valueArray = new Rescue2dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueIJSurface * parentIJSurface = (RescueIJSurface *) parentIJSurfaceNdx;
    RescueProperty *myReturn = new RescueProperty((RescueSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (Rescue2dVector) nullValue,
                (Rescue2dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn,
                (RescueIJSurface *) parentIJSurface);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty11  (JNIEnv *env, jobject obj
  ,jlong parentSurfaceNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt
  ,jlong parentIJSurfaceNdx)
{
  try
  {
    RescueSurface * parentSurface = (RescueSurface *) parentSurfaceNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    jfieldID nullValueCoord3ID = env->GetFieldID(nullValueClass, "coord3", "F");
    Rescue3dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    nullValue.coord3 = env->GetFloatField(nullValueJ, nullValueCoord3ID);
    Rescue3dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        jfieldID valueArrayCoord3ID = env->GetFieldID(valueArrayClass, "coord3", "F");
        valueArray = new Rescue3dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
          valueArray[loop2].coord3 = env->GetFloatField(element, valueArrayCoord3ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueIJSurface * parentIJSurface = (RescueIJSurface *) parentIJSurfaceNdx;
    RescueProperty *myReturn = new RescueProperty((RescueSurface *) parentSurface,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (Rescue3dVector) nullValue,
                (Rescue3dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn,
                (RescueIJSurface *) parentIJSurface);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty12  (JNIEnv *env, jobject obj
  ,jlong geometryInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jfloat nullValue
  ,jfloatArray valueArrayArray
  ,jint attachedToInInt)
{
  jfloat *valueArray = 0;
  try
  {
    RescueGeometry * geometryIn = (RescueGeometry *) geometryInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueGeometry *) geometryIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (float) nullValue,
                (float *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayFloat *)  myReturn->Data())->SetValue(nullValue, (float *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty13  (JNIEnv *env, jobject obj
  ,jlong geometryInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint nullValue
  ,jintArray valueArrayArray
  ,jint attachedToInInt)
{
  jint *valueArray = 0;
  try
  {
    RescueGeometry * geometryIn = (RescueGeometry *) geometryInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    if (valueArrayArray != 0)
    {
      valueArray = (jint *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueGeometry *) geometryIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RESCUEINT32) nullValue,
                (RESCUEINT32 *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayInt *)  myReturn->Data())->SetValue(nullValue, (RESCUEINT32 *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty14  (JNIEnv *env, jobject obj
  ,jlong geometryInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jlong lookupTableInNdx
  ,jbyte nullValueJ
  ,jbyteArray valueArrayArray
  ,jint attachedToInInt)
{
  jbyte *valueArray = 0;
  try
  {
    RescueGeometry * geometryIn = (RescueGeometry *) geometryInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned char nullValue = (unsigned char) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jbyte *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueGeometry *) geometryIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueLookup *) lookupTableIn,
                (unsigned char) nullValue,
                (unsigned char *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayByte *)  myReturn->Data())->SetValue(nullValue, (unsigned char *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty15  (JNIEnv *env, jobject obj
  ,jlong geometryInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jlong lookupTableInNdx
  ,jchar nullValueJ
  ,jcharArray valueArrayArray
  ,jint attachedToInInt)
{
  jchar *valueArray = 0;
  try
  {
    RescueGeometry * geometryIn = (RescueGeometry *) geometryInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned short nullValue = (unsigned short) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jchar *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueGeometry *) geometryIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueLookup *) lookupTableIn,
                (unsigned short) nullValue,
                (unsigned short *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayShort *)  myReturn->Data())->SetValue(nullValue, (unsigned short *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty16  (JNIEnv *env, jobject obj
  ,jlong geometryInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt)
{
  try
  {
    RescueGeometry * geometryIn = (RescueGeometry *) geometryInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    Rescue2dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    Rescue2dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        valueArray = new Rescue2dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueGeometry *) geometryIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (Rescue2dVector) nullValue,
                (Rescue2dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty17  (JNIEnv *env, jobject obj
  ,jlong geometryInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt)
{
  try
  {
    RescueGeometry * geometryIn = (RescueGeometry *) geometryInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    jfieldID nullValueCoord3ID = env->GetFieldID(nullValueClass, "coord3", "F");
    Rescue3dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    nullValue.coord3 = env->GetFloatField(nullValueJ, nullValueCoord3ID);
    Rescue3dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        jfieldID valueArrayCoord3ID = env->GetFieldID(valueArrayClass, "coord3", "F");
        valueArray = new Rescue3dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
          valueArray[loop2].coord3 = env->GetFloatField(element, valueArrayCoord3ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueGeometry *) geometryIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (Rescue3dVector) nullValue,
                (Rescue3dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty18  (JNIEnv *env, jobject obj
  ,jlong containerInNdx
  ,jlong modelInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jfloat nullValue
  ,jfloatArray valueArrayArray
  ,jint attachedToInInt)
{
  jfloat *valueArray = 0;
  try
  {
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueDataContainer *) containerIn,
                (RescueModel *) modelIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (float) nullValue,
                (float *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayFloat *)  myReturn->Data())->SetValue(nullValue, (float *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty19  (JNIEnv *env, jobject obj
  ,jlong containerInNdx
  ,jlong modelInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jint nullValue
  ,jintArray valueArrayArray
  ,jint attachedToInInt)
{
  jint *valueArray = 0;
  try
  {
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    if (valueArrayArray != 0)
    {
      valueArray = (jint *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueDataContainer *) containerIn,
                (RescueModel *) modelIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RESCUEINT32) nullValue,
                (RESCUEINT32 *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayInt *)  myReturn->Data())->SetValue(nullValue, (RESCUEINT32 *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jint *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty20  (JNIEnv *env, jobject obj
  ,jlong containerInNdx
  ,jlong modelInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jlong lookupTableInNdx
  ,jbyte nullValueJ
  ,jbyteArray valueArrayArray
  ,jint attachedToInInt)
{
  jbyte *valueArray = 0;
  try
  {
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned char nullValue = (unsigned char) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jbyte *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueDataContainer *) containerIn,
                (RescueModel *) modelIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RescueLookup *) lookupTableIn,
                (unsigned char) nullValue,
                (unsigned char *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayByte *)  myReturn->Data())->SetValue(nullValue, (unsigned char *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jbyte *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty21  (JNIEnv *env, jobject obj
  ,jlong containerInNdx
  ,jlong modelInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jlong lookupTableInNdx
  ,jchar nullValueJ
  ,jcharArray valueArrayArray
  ,jint attachedToInInt)
{
  jchar *valueArray = 0;
  try
  {
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    RescueLookup * lookupTableIn = (RescueLookup *) lookupTableInNdx;
    unsigned short nullValue = (unsigned short) nullValueJ;
    if (valueArrayArray != 0)
    {
      valueArray = (jchar *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueDataContainer *) containerIn,
                (RescueModel *) modelIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (RescueLookup *) lookupTableIn,
                (unsigned short) nullValue,
                (unsigned short *) 0,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    if (valueArrayArray != 0)
    {
      ((RescueArrayShort *)  myReturn->Data())->SetValue(nullValue, (unsigned short *) valueArray);
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jchar *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty22  (JNIEnv *env, jobject obj
  ,jlong containerInNdx
  ,jlong modelInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt)
{
  try
  {
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    Rescue2dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    Rescue2dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue2dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        valueArray = new Rescue2dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueDataContainer *) containerIn,
                (RescueModel *) modelIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (Rescue2dVector) nullValue,
                (Rescue2dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Create_1RescueProperty23  (JNIEnv *env, jobject obj
  ,jlong containerInNdx
  ,jlong modelInNdx
  ,jstring propertyNameInStr
  ,jstring propertyTypeInStr
  ,jstring unitOfMeasureInStr
  ,jint appliesInt
  ,jobject nullValueJ
  ,jobjectArray valueArrayJ
  ,jint attachedToInInt)
{
  try
  {
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    jboolean propertyNameInBool;
    const char *propertyNameIn = env->GetStringUTFChars(propertyNameInStr, &propertyNameInBool);
    jboolean propertyTypeInBool;
    const char *propertyTypeIn = env->GetStringUTFChars(propertyTypeInStr, &propertyTypeInBool);
    jboolean unitOfMeasureInBool;
    const char *unitOfMeasureIn = env->GetStringUTFChars(unitOfMeasureInStr, &unitOfMeasureInBool);
    RescueProperty::AppliesToSurface applies = (RescueProperty::AppliesToSurface) appliesInt;
    jclass nullValueClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
    jfieldID nullValueCoord1ID = env->GetFieldID(nullValueClass, "coord1", "F");
    jfieldID nullValueCoord2ID = env->GetFieldID(nullValueClass, "coord2", "F");
    jfieldID nullValueCoord3ID = env->GetFieldID(nullValueClass, "coord3", "F");
    Rescue3dVector nullValue;
    nullValue.coord1 = env->GetFloatField(nullValueJ, nullValueCoord1ID);
    nullValue.coord2 = env->GetFloatField(nullValueJ, nullValueCoord2ID);
    nullValue.coord3 = env->GetFloatField(nullValueJ, nullValueCoord3ID);
    Rescue3dVector *valueArray = 0;
    if (valueArrayJ != 0)
    {
      jsize valueArrayLength = env->GetArrayLength(valueArrayJ);
      if (valueArrayLength > 0)
      {
        jclass valueArrayClass = env->FindClass("org/Rescue/rjni/Rescue3dVector");
        jfieldID valueArrayCoord1ID = env->GetFieldID(valueArrayClass, "coord1", "F");
        jfieldID valueArrayCoord2ID = env->GetFieldID(valueArrayClass, "coord2", "F");
        jfieldID valueArrayCoord3ID = env->GetFieldID(valueArrayClass, "coord3", "F");
        valueArray = new Rescue3dVector[valueArrayLength];
        jsize loop2;
        for (loop2 = 0; loop2 < valueArrayLength; loop2++)
        {
          jobject element = env->GetObjectArrayElement(valueArrayJ, loop2);
          valueArray[loop2].coord1 = env->GetFloatField(element, valueArrayCoord1ID);
          valueArray[loop2].coord2 = env->GetFloatField(element, valueArrayCoord2ID);
          valueArray[loop2].coord3 = env->GetFloatField(element, valueArrayCoord3ID);
        }
      }
    }
    RescueProperty::AttachmentPoint attachedToIn = (RescueProperty::AttachmentPoint) attachedToInInt;
    RescueProperty *myReturn = new RescueProperty((RescueDataContainer *) containerIn,
                (RescueModel *) modelIn,
                (char *) propertyNameIn,
                (char *) propertyTypeIn,
                (char *) unitOfMeasureIn,
                (RescueProperty::AppliesToSurface) applies,
                (Rescue3dVector) nullValue,
                (Rescue3dVector *) valueArray,
                (RescueProperty::AttachmentPoint) attachedToIn);
    env->ReleaseStringUTFChars(propertyNameInStr, propertyNameIn);
    env->ReleaseStringUTFChars(propertyTypeInStr, propertyTypeIn);
    env->ReleaseStringUTFChars(unitOfMeasureInStr, unitOfMeasureIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RescueProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueProperty_Delete_1RescueProperty
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueProperty *myObj = (RescueProperty *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_~RescueProperty");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_ParentBlockUnit19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueBlockUnit * myReturn = myObject->ParentBlockUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_ParentBlockUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_ParentGeobodyPart20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueGeobodyPart * myReturn = myObject->ParentGeobodyPart();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_ParentGeobodyPart");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_ParentSurface21
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueSurface * myReturn = myObject->ParentSurface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_ParentSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_ParentIJSurface22
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueIJSurface * myReturn = myObject->ParentIJSurface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_ParentIJSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueProperty_TriangulatedSurface23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->TriangulatedSurface();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_TriangulatedSurface");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_TrimLoopCount24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    jlong myReturn = myObject->TrimLoopCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_TrimLoopCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_NthTrimLoop25
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueTrimLoopStub * myReturn = myObject->NthTrimLoop(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_NthTrimLoop");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueProperty_HowApplies26
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueProperty::AppliesToSurface myReturn = myObject->HowApplies();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_HowApplies");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueProperty_PropertyAttachedTo27
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueProperty::AttachmentPoint myReturn = myObject->PropertyAttachedTo();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_PropertyAttachedTo");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueProperty_AddTrimLoop28
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingLoopNdx)
{
  try
  {
    RescueTrimLoop * existingLoop = (RescueTrimLoop *) existingLoopNdx;
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    myObject->AddTrimLoop((RescueTrimLoop *) existingLoop);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_AddTrimLoop");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueProperty_RelinkTrimLoops29
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    myObject->RelinkTrimLoops((RescueModel *) model);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_RelinkTrimLoops");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Data30
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueArray * myReturn = myObject->Data();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_Data");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Geometry31
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueGeometry * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueProperty_SetColorTable32
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newTableNdx)
{
  try
  {
    RescueColorTable * newTable = (RescueColorTable *) newTableNdx;
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    myObject->SetColorTable((RescueColorTable *) newTable);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_SetColorTable");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_ColorTable33
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueColorTable * myReturn = myObject->ColorTable();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_ColorTable");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueProperty_AnyFileTruncated34
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueProperty_IsNamed35
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring mayBeNameStr)
{
  try
  {
    jboolean mayBeNameBool;
    const char *mayBeName = env->GetStringUTFChars(mayBeNameStr, &mayBeNameBool);
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) mayBeName);
    env->ReleaseStringUTFChars(mayBeNameStr, mayBeName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueProperty_TestLock36
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->TestLock();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_TestLock");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueProperty_SetLock37
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    myObject->SetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_SetLock");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueProperty_ResetLock38
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    myObject->ResetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_ResetLock");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueProperty_IsOfType39
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_MakeRescuePropertyGroup0
  (JNIEnv *env, jclass myClass, jstring groupNameInStr, jlong blockUnitInNdx)
{
  try
  {
    jboolean groupNameInBool;
    const char *groupNameIn = env->GetStringUTFChars(groupNameInStr, &groupNameInBool);
    RescueBlockUnit * blockUnitIn = (RescueBlockUnit *) blockUnitInNdx;
    RescuePropertyGroup *myReturn = RescuePropertyGroup::MakeRescuePropertyGroup((char *) groupNameIn,
                                                            (RescueBlockUnit *) blockUnitIn);
    env->ReleaseStringUTFChars(groupNameInStr, groupNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RescuePropertyGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_MakeRescuePropertyGroup1
  (JNIEnv *env, jclass myClass, jstring groupNameInStr, jlong partInNdx)
{
  try
  {
    jboolean groupNameInBool;
    const char *groupNameIn = env->GetStringUTFChars(groupNameInStr, &groupNameInBool);
    RescueGeobodyPart * partIn = (RescueGeobodyPart *) partInNdx;
    RescuePropertyGroup *myReturn = RescuePropertyGroup::MakeRescuePropertyGroup((char *) groupNameIn,
                                                                                (RescueGeobodyPart *) partIn);
    env->ReleaseStringUTFChars(groupNameInStr, groupNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RescuePropertyGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_MakeRescuePropertyGroup2
  (JNIEnv *env, jclass myClass, jstring groupNameInStr, jlong surfaceInNdx)
{
  try
  {
    jboolean groupNameInBool;
    const char *groupNameIn = env->GetStringUTFChars(groupNameInStr, &groupNameInBool);
    RescueSurface * surfaceIn = (RescueSurface *) surfaceInNdx;
    RescuePropertyGroup *myReturn = RescuePropertyGroup::MakeRescuePropertyGroup((char *) groupNameIn,
                                                                              (RescueSurface *) surfaceIn);
    env->ReleaseStringUTFChars(groupNameInStr, groupNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RescuePropertyGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_MakeRescuePropertyGroup3
  (JNIEnv *env, jclass myClass, jstring groupNameInStr, jlong modelInNdx)
{
  try
  {
    jboolean groupNameInBool;
    const char *groupNameIn = env->GetStringUTFChars(groupNameInStr, &groupNameInBool);
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescuePropertyGroup *myReturn = RescuePropertyGroup::MakeRescuePropertyGroup((char *) groupNameIn,
                                                                                  (RescueModel *) modelIn);
    env->ReleaseStringUTFChars(groupNameInStr, groupNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RescuePropertyGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_MakeRescuePropertyGroup4
  (JNIEnv *env, jclass myClass, jstring groupNameInStr, jlong modelInNdx, jlong containerInNdx)
{
  try
  {
    jboolean groupNameInBool;
    const char *groupNameIn = env->GetStringUTFChars(groupNameInStr, &groupNameInBool);
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueDataContainer * containerIn = (RescueDataContainer *) containerInNdx;
    RescuePropertyGroup *myReturn = RescuePropertyGroup::MakeRescuePropertyGroup((char *) groupNameIn,
                                                                                  (RescueModel *) modelIn,
                                                                                  (RescueDataContainer *) containerIn);
    env->ReleaseStringUTFChars(groupNameInStr, groupNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RescuePropertyGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_Delete_1RescuePropertyGroup
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescuePropertyGroup *myObj = (RescuePropertyGroup *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_~RescuePropertyGroup");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_GroupName5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RCHString * myReturn = myObject->GroupName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_GroupName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_SetGroupName6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newGroupNameStr)
{
  try
  {
    jboolean newGroupNameBool;
    const char *newGroupName = env->GetStringUTFChars(newGroupNameStr, &newGroupNameBool);
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    myObject->SetGroupName((char *) newGroupName);
    env->ReleaseStringUTFChars(newGroupNameStr, newGroupName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_SetGroupName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_ParentUnit7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueUnit * myReturn = myObject->ParentUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_ParentUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_ParentBlockUnit8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueBlockUnit * myReturn = myObject->ParentBlockUnit();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_ParentBlockUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_ParentBody9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueGeobody * myReturn = myObject->ParentBody();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_ParentBody");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_ParentGeobodyPart10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueGeobodyPart * myReturn = myObject->ParentGeobodyPart();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_ParentGeobodyPart");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_ParentSurface11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueSurface * myReturn = myObject->ParentSurface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_ParentSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_Container13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueDataContainer * myReturn = myObject->Container();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_Container");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_TimeStepCount12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    jlong myReturn = myObject->TimeStepCount();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_TimeStepCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_NthTimeStepGroup13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueTimeStepGroup * myReturn = myObject->NthTimeStepGroup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_NthTimeStepGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C"
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_GetTimeStepManager24
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean refresh)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueTimeStepManager * myReturn = myObject->GetTimeStepManager(refresh);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_GetTimeStepManager");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C"
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_GetStaticGroup13a
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueTimeStepGroup * myReturn = myObject->GetStaticGroup();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_GetStaticGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_DropRescueTimeStepGroup14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong timeStepNdx)
{
  try
  {
    RescueTimeStepGroup * timeStep = (RescueTimeStepGroup *) timeStepNdx;
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueTimeStepGroup((RescueTimeStepGroup *) timeStep);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_DropRescueTimeStepGroup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_RescuePropertyCount15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    jlong myReturn = myObject->RescuePropertyCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RescuePropertyCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_NthRescueProperty16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueProperty * myReturn = myObject->NthRescueProperty(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_NthRescueProperty");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_RemoveRescueProperty17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueProperty * unitToDrop = (RescueProperty *) unitToDropNdx;
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->RemoveRescueProperty((RescueProperty *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_RemoveRescueProperty");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_AddProperty18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescueProperty * toAdd = (RescueProperty *) toAddNdx;
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    myObject->AddProperty((RescueProperty *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_AddProperty");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_TestLock19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->TestLock();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_TestLock");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_SetLock20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    myObject->SetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_SetLock");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_ResetLock21
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    myObject->ResetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_ResetLock");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_Context22
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RescueContext * myReturn = myObject->Context();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_Context");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescuePropertyGroup_IsOfType23
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescuePropertyGroup *myObject = (RescuePropertyGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescuePropertyGroup_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_Create_1RescueQuadrupletArray0  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jlong existingGridNdx
  ,jfloat missingValueIn
  ,jlong parentModelInNdx)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueGrid * existingGrid = (RescueGrid *) existingGridNdx;
    RescueModel * parentModelIn = (RescueModel *) parentModelInNdx;
    RescueQuadrupletArray *myReturn = new RescueQuadrupletArray((RescueContext *) context,
                (RescueGrid *) existingGrid,
                (float) missingValueIn,
                (RescueModel *) parentModelIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_RescueQuadrupletArray");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_Create_1RescueQuadrupletArray1  (JNIEnv *env, jobject obj
  ,jlong existingGridNdx
  ,jfloat missingValueIn
  ,jfloatArray valueArrayArray
  ,jlong parentModelInNdx)
{
  jfloat *valueArray = 0;
  try
  {
    RescueGrid * existingGrid = (RescueGrid *) existingGridNdx;
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueModel * parentModelIn = (RescueModel *) parentModelInNdx;
    RescueQuadrupletArray *myReturn = new RescueQuadrupletArray((RescueGrid *) existingGrid,
                (float) missingValueIn,
                (float *) valueArray,
                (RescueModel *) parentModelIn);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_RescueQuadrupletArray");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_Delete_1RescueQuadrupletArray
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueQuadrupletArray *myObj = (RescueQuadrupletArray *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_~RescueQuadrupletArray");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_SetValue3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat nullValueIn
  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    myObject->SetValue((float) nullValueIn,
                (float *) valueArray);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_SetValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_AssignMDValue4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    myObject->AssignMDValue((float *) (valueArrayArray == 0) ? 0 : copyFloatArray(valueArray, (int) env->GetArrayLength(valueArrayArray)));
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_AssignMDValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_SetMDValue5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    myObject->SetMDValue((float *) valueArray);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_SetMDValue");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_MDValueLength6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    jlong myReturn = myObject->MDValueLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_MDValueLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_MDValue7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->MDValue();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->MDValueLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_MDValue");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_MDValues8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray bufferArray
  ,jlong offset
  ,jlong valueCount)
{
  jfloat *buffer = 0;
  try
  {
    if (bufferArray != 0)
    {
      buffer = (jfloat *) env->GetPrimitiveArrayCritical(bufferArray, 0);
    }
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    myObject->MDValues((float *) buffer,
                offset,
                valueCount);
    if (bufferArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_MDValues");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueQuadrupletArray_IsOfType9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueQuadrupletArray *myObject = (RescueQuadrupletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueQuadrupletArray_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueRadialGrid_Delete_1RescueRadialGrid
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueRadialGrid *myObj = (RescueRadialGrid *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_~RescueRadialGrid");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_MaxI1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->MaxI64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_MaxI");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_MaxJ2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->MaxJ64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_MaxJ");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_MaxK3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->MaxK64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_MaxK");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_Nodes4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->Nodes64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_Nodes");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_VertexXLength5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->VertexXLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_VertexXLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_VertexYLength6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->VertexYLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_VertexYLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_VertexZLength7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->VertexZLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_VertexZLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_VertexX8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->VertexX();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->VertexXLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_VertexX");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_VertexY9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->VertexY();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->VertexYLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_VertexY");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_VertexZ10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->VertexZ();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->VertexZLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_VertexZ");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CopyArrays11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowSrc
  ,jlong count
  ,jfloatArray xsArray
  ,jfloatArray ysArray
  ,jfloatArray zsArray
  ,jlong offset)
{
  jfloat *xs = 0;
  jfloat *ys = 0;
  jfloat *zs = 0;
  try
  {
    if (xsArray != 0)
    {
      xs = (jfloat *) env->GetPrimitiveArrayCritical(xsArray, 0);
    }
    if (ysArray != 0)
    {
      ys = (jfloat *) env->GetPrimitiveArrayCritical(ysArray, 0);
    }
    if (zsArray != 0)
    {
      zs = (jfloat *) env->GetPrimitiveArrayCritical(zsArray, 0);
    }
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->CopyArrays(lowSrc,
                count,
                (float *) xs,
                (float *) ys,
                (float *) zs,
                offset);
    if (xsArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
    }
    if (ysArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
    }
    if (zsArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (xs != 0)
      {
        env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (ys != 0)
      {
        env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (zs != 0)
      {
        env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (xs != 0)
      {
        env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (ys != 0)
      {
        env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (zs != 0)
      {
        env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CopyArrays");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterX12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->CenterX();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->CenterXLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterX");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterY13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->CenterY();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->CenterYLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterY");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterZ14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->CenterZ();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->CenterZLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterZ");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterMD15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->CenterMD();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->CenterMDLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterMD");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterXLength16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->CenterXLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterXLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterYLength17
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->CenterYLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterYLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterZLength18
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->CenterZLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterZLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CenterMDLength19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->CenterMDLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CenterMDLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_CopyCenter20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowSrc
  ,jlong count
  ,jfloatArray xsArray
  ,jfloatArray ysArray
  ,jfloatArray zsArray
  ,jfloatArray mdArray
  ,jlong offset)
{
  jfloat *xs = 0;
  jfloat *ys = 0;
  jfloat *zs = 0;
  jfloat *md = 0;
  try
  {
    if (xsArray != 0)
    {
      xs = (jfloat *) env->GetPrimitiveArrayCritical(xsArray, 0);
    }
    if (ysArray != 0)
    {
      ys = (jfloat *) env->GetPrimitiveArrayCritical(ysArray, 0);
    }
    if (zsArray != 0)
    {
      zs = (jfloat *) env->GetPrimitiveArrayCritical(zsArray, 0);
    }
    if (mdArray != 0)
    {
      md = (jfloat *) env->GetPrimitiveArrayCritical(mdArray, 0);
    }
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    jlong myReturn = myObject->CopyCenter(lowSrc,
                count,
                (float *) xs,
                (float *) ys,
                (float *) zs,
                (float *) md,
                offset);
    if (xsArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
    }
    if (ysArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
    }
    if (zsArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
    }
    if (mdArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(mdArray, (jfloat *) md, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (xs != 0)
      {
        env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (ys != 0)
      {
        env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (zs != 0)
      {
        env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (md != 0)
      {
        env->ReleasePrimitiveArrayCritical(mdArray, (jfloat *) md, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (xs != 0)
      {
        env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (ys != 0)
      {
        env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (zs != 0)
      {
        env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (md != 0)
      {
        env->ReleasePrimitiveArrayCritical(mdArray, (jfloat *) md, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_CopyCenter");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_MaxI21
  (JNIEnv *env, jclass cls  ,jlong radialCells)
{
  try
  {
    jlong myReturn = RescueRadialGrid::MaxI(radialCells);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_MaxI");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_MaxJ22
  (JNIEnv *env, jclass cls  ,jlong angularCells
  ,jboolean closedBool)
{
  try
  {
    RESCUEBOOL closed = ((closedBool == JNI_TRUE) ? TRUE : FALSE);
    jlong myReturn = RescueRadialGrid::MaxJ(angularCells,
                (RESCUEBOOL) closed);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_MaxJ");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_MaxK23
  (JNIEnv *env, jclass cls  ,jlong kLayers)
{
  try
  {
    jlong myReturn = RescueRadialGrid::MaxK(kLayers);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_MaxK");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueRadialGrid_Nodes24
  (JNIEnv *env, jclass cls  ,jlong radialCells
  ,jlong angularCells
  ,jboolean closedBool
  ,jlong kLayers)
{
  try
  {
    RESCUEBOOL closed = ((closedBool == JNI_TRUE) ? TRUE : FALSE);
    jlong myReturn = RescueRadialGrid::Nodes(radialCells,
                angularCells,
                (RESCUEBOOL) closed,
                kLayers);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_Nodes");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueRadialGrid_Set26
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong radialCellsIn
  ,jlong angularCellsIn
  ,jlong kLayersIn
  ,jboolean closedInBool
  ,jfloatArray vertexXinArray
  ,jfloatArray vertexYinArray
  ,jfloatArray vertexZinArray
  ,jfloatArray centerXinArray
  ,jfloatArray centerYinArray
  ,jfloatArray centerZinArray
  ,jfloatArray centerMDinArray)
{
  jfloat *vertexXin = 0;
  jfloat *vertexYin = 0;
  jfloat *vertexZin = 0;
  jfloat *centerXin = 0;
  jfloat *centerYin = 0;
  jfloat *centerZin = 0;
  jfloat *centerMDin = 0;
  try
  {
    RESCUEBOOL closedIn = ((closedInBool == JNI_TRUE) ? TRUE : FALSE);
    if (vertexXinArray != 0)
    {
      vertexXin = (jfloat *) env->GetPrimitiveArrayCritical(vertexXinArray, 0);
    }
    if (vertexYinArray != 0)
    {
      vertexYin = (jfloat *) env->GetPrimitiveArrayCritical(vertexYinArray, 0);
    }
    if (vertexZinArray != 0)
    {
      vertexZin = (jfloat *) env->GetPrimitiveArrayCritical(vertexZinArray, 0);
    }
    if (centerXinArray != 0)
    {
      centerXin = (jfloat *) env->GetPrimitiveArrayCritical(centerXinArray, 0);
    }
    if (centerYinArray != 0)
    {
      centerYin = (jfloat *) env->GetPrimitiveArrayCritical(centerYinArray, 0);
    }
    if (centerZinArray != 0)
    {
      centerZin = (jfloat *) env->GetPrimitiveArrayCritical(centerZinArray, 0);
    }
    if (centerMDinArray != 0)
    {
      centerMDin = (jfloat *) env->GetPrimitiveArrayCritical(centerMDinArray, 0);
    }
    RescueRadialGrid *myObject = (RescueRadialGrid *) nativeNdx;
    myObject->Set(radialCellsIn,
                  angularCellsIn,
                  kLayersIn,
                (RESCUEBOOL) closedIn,
                (float *) vertexXin,
                (float *) vertexYin,
                (float *) vertexZin,
                (float *) centerXin,
                (float *) centerYin,
                (float *) centerZin,
                (float *) centerMDin);
    if (vertexXinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexXinArray, (jfloat *) vertexXin, 0);
    }
    if (vertexYinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexYinArray, (jfloat *) vertexYin, 0);
    }
    if (vertexZinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexZinArray, (jfloat *) vertexZin, 0);
    }
    if (centerXinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(centerXinArray, (jfloat *) centerXin, 0);
    }
    if (centerYinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(centerYinArray, (jfloat *) centerYin, 0);
    }
    if (centerZinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(centerZinArray, (jfloat *) centerZin, 0);
    }
    if (centerMDinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(centerMDinArray, (jfloat *) centerMDin, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (vertexXin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexXinArray, (jfloat *) vertexXin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexYin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexYinArray, (jfloat *) vertexYin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexZin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexZinArray, (jfloat *) vertexZin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerXin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerXinArray, (jfloat *) centerXin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerYin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerYinArray, (jfloat *) centerYin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerZin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerZinArray, (jfloat *) centerZin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerMDin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerMDinArray, (jfloat *) centerMDin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (vertexXin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexXinArray, (jfloat *) vertexXin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexYin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexYinArray, (jfloat *) vertexYin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexZin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexZinArray, (jfloat *) vertexZin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerXin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerXinArray, (jfloat *) centerXin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerYin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerYinArray, (jfloat *) centerYin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerZin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerZinArray, (jfloat *) centerZin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (centerMDin != 0)
      {
        env->ReleasePrimitiveArrayCritical(centerMDinArray, (jfloat *) centerMDin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueRadialGrid_Set");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReferenceSurface_Create_1RescueReferenceSurface0  (JNIEnv *env, jobject obj
  ,jlong modelNdx
  ,jint orientationInt
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jint typeInInt)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueReferenceSurface *myReturn = new RescueReferenceSurface((RescueModel *) model,
                (RescueCoordinateSystem::Orientation) orientation,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (RescueSurface::SurfaceType) typeIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReferenceSurface_RescueReferenceSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReferenceSurface_Create_1RescueReferenceSurface1  (JNIEnv *env, jobject obj
  ,jlong modelNdx
  ,jint orientationInt
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray valuesArray
  ,jint typeInInt)
{
  jfloat *values = 0;
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    if (valuesArray != 0)
    {
      values = (jfloat *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueReferenceSurface *myReturn = new RescueReferenceSurface((RescueModel *) model,
                (RescueCoordinateSystem::Orientation) orientation,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) values,
                (RescueSurface::SurfaceType) typeIn);
    if (valuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReferenceSurface_RescueReferenceSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReferenceSurface_Create_1RescueReferenceSurface2  (JNIEnv *env, jobject obj
  ,jlong modelNdx
  ,jint orientationInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jint typeInInt)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueReferenceSurface *myReturn = new RescueReferenceSurface((RescueModel *) model,
                (RescueCoordinateSystem::Orientation) orientation,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (RescueSurface::SurfaceType) typeIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReferenceSurface_RescueReferenceSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReferenceSurface_Create_1RescueReferenceSurface3  (JNIEnv *env, jobject obj
  ,jlong modelNdx
  ,jint orientationInt
  ,jfloat missingValue
  ,jint typeInInt)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueReferenceSurface *myReturn = new RescueReferenceSurface((RescueModel *) model,
                (RescueCoordinateSystem::Orientation) orientation,
                (float) missingValue,
                (RescueSurface::SurfaceType) typeIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReferenceSurface_RescueReferenceSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReferenceSurface_Create_1RescueReferenceSurface4  (JNIEnv *env, jobject obj
  ,jlong modelNdx
  ,jint orientationInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray tripletArrayArray
  ,jint typeInInt)
{
  jfloat *tripletArray = 0;
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    if (tripletArrayArray != 0)
    {
      tripletArray = (jfloat *) env->GetPrimitiveArrayCritical(tripletArrayArray, 0);
    }
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueReferenceSurface *myReturn = new RescueReferenceSurface((RescueModel *) model,
                (RescueCoordinateSystem::Orientation) orientation,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) tripletArray,
                (RescueSurface::SurfaceType) typeIn);
    if (tripletArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (tripletArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReferenceSurface_RescueReferenceSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueReferenceSurface_IsOfType5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueReferenceSurface *myObject = (RescueReferenceSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReferenceSurface_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueReservoir_Delete_1RescueReservoir
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueReservoir *myObj = (RescueReservoir *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_~RescueReservoir");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReservoir_Create_1RescueReservoir1  (JNIEnv *env, jobject obj
  ,jlong modelNdx
  ,jstring reservoirNameStr)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    jboolean reservoirNameBool;
    const char *reservoirName = env->GetStringUTFChars(reservoirNameStr, &reservoirNameBool);
    RescueReservoir *myReturn = new RescueReservoir((RescueModel *) model,
                (char *) reservoirName);
    env->ReleaseStringUTFChars(reservoirNameStr, reservoirName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_RescueReservoir");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueReservoir_ReservoirName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    RCHString * myReturn = myObject->ReservoirName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_ReservoirName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueReservoir_AddUnit3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescueUnit * toAdd = (RescueUnit *) toAddNdx;
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    myObject->AddUnit((RescueUnit *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_AddUnit");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueReservoir_DeleteUnit4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toDeleteNdx)
{
  try
  {
    RescueUnit * toDelete = (RescueUnit *) toDeleteNdx;
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    myObject->DeleteUnit((RescueUnit *) toDelete);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_DeleteUnit");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReservoir_UnitCount5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    jlong myReturn = myObject->UnitCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_UnitCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReservoir_NthUnitId6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    jlong myReturn = myObject->NthUnitId64(zeroBasedOrdinal);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_NthUnitId");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueReservoir_NthUnit7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx
  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    RescueUnit * myReturn = myObject->NthUnit((RescueModel *) model,
                zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_NthUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueReservoir_IsOfType8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueReservoir *myObject = (RescueReservoir *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueReservoir_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSection_Delete_1RescueSection
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSection *myObj = (RescueSection *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_~RescueSection");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSection_Create_1RescueSection1  (JNIEnv *env, jobject obj
  ,jint orientationInt
  ,jstring newSectionNameStr
  ,jlong parentModelNdx
  ,jint typeInInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue)
{
  try
  {
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    jboolean newSectionNameBool;
    const char *newSectionName = env->GetStringUTFChars(newSectionNameStr, &newSectionNameBool);
    RescueModel * parentModel = (RescueModel *) parentModelNdx;
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueSection *myReturn = new RescueSection((RescueCoordinateSystem::Orientation) orientation,
                (char *) newSectionName,
                (RescueModel *) parentModel,
                (RescueSurface::SurfaceType) typeIn,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue);
    env->ReleaseStringUTFChars(newSectionNameStr, newSectionName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_RescueSection");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSection_Create_1RescueSection2  (JNIEnv *env, jobject obj
  ,jint orientationInt
  ,jstring newSectionNameStr
  ,jlong parentModelNdx
  ,jint typeInInt
  ,jfloat missingValue)
{
  try
  {
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    jboolean newSectionNameBool;
    const char *newSectionName = env->GetStringUTFChars(newSectionNameStr, &newSectionNameBool);
    RescueModel * parentModel = (RescueModel *) parentModelNdx;
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    RescueSection *myReturn = new RescueSection((RescueCoordinateSystem::Orientation) orientation,
                (char *) newSectionName,
                (RescueModel *) parentModel,
                (RescueSurface::SurfaceType) typeIn,
                (float) missingValue);
    env->ReleaseStringUTFChars(newSectionNameStr, newSectionName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_RescueSection");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSection_Create_1RescueSection3  (JNIEnv *env, jobject obj
  ,jint orientationInt
  ,jstring newSectionNameStr
  ,jlong parentModelNdx
  ,jint typeInInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray tripletArrayArray)
{
  jfloat *tripletArray = 0;
  try
  {
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    jboolean newSectionNameBool;
    const char *newSectionName = env->GetStringUTFChars(newSectionNameStr, &newSectionNameBool);
    RescueModel * parentModel = (RescueModel *) parentModelNdx;
    RescueSurface::SurfaceType typeIn = (RescueSurface::SurfaceType) typeInInt;
    if (tripletArrayArray != 0)
    {
      tripletArray = (jfloat *) env->GetPrimitiveArrayCritical(tripletArrayArray, 0);
    }
    RescueSection *myReturn = new RescueSection((RescueCoordinateSystem::Orientation) orientation,
                (char *) newSectionName,
                (RescueModel *) parentModel,
                (RescueSurface::SurfaceType) typeIn,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) tripletArray);
    env->ReleaseStringUTFChars(newSectionNameStr, newSectionName);
    if (tripletArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (tripletArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_RescueSection");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSection_Create_1RescueSection4  (JNIEnv *env, jobject obj
  ,jint orientationInt
  ,jstring newSectionNameStr
  ,jlong modelInNdx
  ,jint typeInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue)
{
  try
  {
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    jboolean newSectionNameBool;
    const char *newSectionName = env->GetStringUTFChars(newSectionNameStr, &newSectionNameBool);
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueSurface::SurfaceType type = (RescueSurface::SurfaceType) typeInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    RescueSection *myReturn = new RescueSection((RescueCoordinateSystem::Orientation) orientation,
                (char *) newSectionName,
                (RescueModel *) modelIn,
                (RescueSurface::SurfaceType) type,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue);
    env->ReleaseStringUTFChars(newSectionNameStr, newSectionName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_RescueSection");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueSection_SectionName5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSection *myObject = (RescueSection *) nativeNdx;
    RCHString * myReturn = myObject->SectionName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_SectionName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSection_SetSectionName6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newSectionNameStr)
{
  try
  {
    jboolean newSectionNameBool;
    const char *newSectionName = env->GetStringUTFChars(newSectionNameStr, &newSectionNameBool);
    RescueSection *myObject = (RescueSection *) nativeNdx;
    myObject->SetSectionName((char *) newSectionName);
    env->ReleaseStringUTFChars(newSectionNameStr, newSectionName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_SetSectionName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSection_ParentModel7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSection *myObject = (RescueSection *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSection_IsOfType8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueSection *myObject = (RescueSection *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSection_IsNamed9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring possibleNameStr)
{
  try
  {
    jboolean possibleNameBool;
    const char *possibleName = env->GetStringUTFChars(possibleNameStr, &possibleNameBool);
    RescueSection *myObject = (RescueSection *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) possibleName);
    env->ReleaseStringUTFChars(possibleNameStr, possibleName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSection_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_Create_1RescueSOctTreeNode0  (JNIEnv *env, jobject obj
  ,jlong parentNdx
  ,jfloat minX
  ,jfloat maxX
  ,jfloat minY
  ,jfloat maxY
  ,jfloat minZ
  ,jfloat maxZ
  ,jlong xDivisions
  ,jlong yDivisions
  ,jlong zDivisions)
{
  try
  {
    RescueTriangulatedSurface * parent = (RescueTriangulatedSurface *) parentNdx;
    RescueSOctTreeNode *myReturn = new RescueSOctTreeNode((RescueTriangulatedSurface *) parent,
                (float) minX,
                (float) maxX,
                (float) minY,
                (float) maxY,
                (float) minZ,
                (float) maxZ,
                xDivisions,
                yDivisions,
                zDivisions);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_RescueSOctTreeNode");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_Delete_1RescueSOctTreeNode
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSOctTreeNode *myObj = (RescueSOctTreeNode *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_~RescueSOctTreeNode");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_VertexCount2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    jlong myReturn = myObject->VertexCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_VertexCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_NthVertex3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    RescueTriangleVertex * myReturn = myObject->NthVertex(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_NthVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_Leaf4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint whichInt)
{
  try
  {
    RescueSOctTreeNode::OctTreeBranches which = (RescueSOctTreeNode::OctTreeBranches) whichInt;
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    RescueSOctTreeNode * myReturn = myObject->Leaf((RescueSOctTreeNode::OctTreeBranches) which);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_Leaf");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_TerminalNode5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    RESCUEBOOL myReturn = myObject->TerminalNode();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_TerminalNode");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_MinX6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    float myReturn = myObject->MinX();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_MinX");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_MaxX7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    float myReturn = myObject->MaxX();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_MaxX");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_MinY8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    float myReturn = myObject->MinY();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_MinY");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_MaxY9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    float myReturn = myObject->MaxY();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_MaxY");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_MinZ10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    float myReturn = myObject->MinZ();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_MinZ");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSOctTreeNode_MaxZ11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSOctTreeNode *myObject = (RescueSOctTreeNode *) nativeNdx;
    float myReturn = myObject->MaxZ();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSOctTreeNode_MaxZ");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSplineCoef_Create_1RescueSplineCoef0  (JNIEnv *env, jobject obj
)
{
  try
  {
    RescueSplineCoef *myReturn = new RescueSplineCoef();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_RescueSplineCoef");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSplineCoef_B1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    float myReturn = myObject->B();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_B");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSplineCoef_C2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    float myReturn = myObject->C();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_C");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSplineCoef_D3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    float myReturn = myObject->D();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_D");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSplineCoef_SetB4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat bIn)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    myObject->SetB((float) bIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_SetB");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSplineCoef_SetC5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat cIn)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    myObject->SetC((float) cIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_SetC");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSplineCoef_SetD6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat dIn)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    myObject->SetD((float) dIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_SetD");
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSplineCoef_interpolate7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat zmin
  ,jfloat dz)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    float myReturn = myObject->interpolate((float) zmin,
                (float) dz);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_interpolate");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueSplineCoef_derive8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat dz)
{
  try
  {
    RescueSplineCoef *myObject = (RescueSplineCoef *) nativeNdx;
    float myReturn = myObject->derive((float) dz);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplineCoef_derive");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSplitLine_Delete_1RescueSplitLine
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSplitLine *myObj = (RescueSplitLine *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplitLine_~RescueSplitLine");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSplitPoint_Delete_1RescueSplitPoint
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSplitPoint *myObj = (RescueSplitPoint *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSplitPoint_~RescueSplitPoint");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_Geometry0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    RescueGeometry * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_Surface1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    RescueIJSurface * myReturn = myObject->Surface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_Surface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_CellPairCount2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    jlong myReturn = myObject->CellPairCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_CellPairCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jobject JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_NthCellPair3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    RescueIJKCellPair *myReturnCPP = myObject->NthCellPair(zeroBasedOrdinal);
    jclass objClass = env->FindClass("org/Rescue/rjni/RescueIJKCellPair");
    jobject myReturn = env->AllocObject(objClass);
    jfieldID fieldID;
    fieldID = env->GetFieldID(objClass, "i1", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->i1);
    fieldID = env->GetFieldID(objClass, "j1", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->j1);
    fieldID = env->GetFieldID(objClass, "k1", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->k1);
    fieldID = env->GetFieldID(objClass, "face1", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->face1);
    fieldID = env->GetFieldID(objClass, "lgrid1", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->lgrid1);
    fieldID = env->GetFieldID(objClass, "i2", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->i2);
    fieldID = env->GetFieldID(objClass, "j2", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->j2);
    fieldID = env->GetFieldID(objClass, "k2", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->k2);
    fieldID = env->GetFieldID(objClass, "face2", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->face2);
    fieldID = env->GetFieldID(objClass, "lgrid2", "I");
    env->SetIntField(myReturn, fieldID, myReturnCPP->lgrid2);
  return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobject) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_NthCellPair");
    return (jobject) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_DataContainers4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_DataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_DemandDataContainers5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DemandDataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_DemandDataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueStairSteppedFault *myObject = (RescueStairSteppedFault *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueStairSteppedFault_Delete_1RescueStairSteppedFault
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueStairSteppedFault *myObj = (RescueStairSteppedFault *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueStairSteppedFault_~RescueStairSteppedFault");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_Create_1RescueSurface0  (JNIEnv *env, jobject obj
  ,jlong modelInNdx
  ,jint orientationInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jint typeInt)
{
  try
  {
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    RescueSurface::SurfaceType type = (RescueSurface::SurfaceType) typeInt;
    RescueSurface *myReturn = new RescueSurface((RescueModel *) modelIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (RescueSurface::SurfaceType) type);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_RescueSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_Create_1RescueSurface1  (JNIEnv *env, jobject obj
  ,jlong modelInNdx
  ,jint orientationInt
  ,jlong i_axisNdx
  ,jfloat i_origin
  ,jfloat i_step
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_axisNdx
  ,jfloat j_origin
  ,jfloat j_step
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray valuesArray
  ,jint typeInt)
{
  jfloat *values = 0;
  try
  {
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueCoordinateSystemAxis * i_axis = (RescueCoordinateSystemAxis *) i_axisNdx;
    RescueCoordinateSystemAxis * j_axis = (RescueCoordinateSystemAxis *) j_axisNdx;
    if (valuesArray != 0)
    {
      values = (jfloat *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueSurface::SurfaceType type = (RescueSurface::SurfaceType) typeInt;
    RescueSurface *myReturn = new RescueSurface((RescueModel *) modelIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RescueCoordinateSystemAxis *) i_axis,
                (float) i_origin,
                (float) i_step,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RescueCoordinateSystemAxis *) j_axis,
                (float) j_origin,
                (float) j_step,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) values,
                (RescueSurface::SurfaceType) type);
    if (valuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_RescueSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_Create_1RescueSurface2  (JNIEnv *env, jobject obj
  ,jlong modelInNdx
  ,jint orientationInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jint typeInt)
{
  try
  {
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueSurface::SurfaceType type = (RescueSurface::SurfaceType) typeInt;
    RescueSurface *myReturn = new RescueSurface((RescueModel *) modelIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (RescueSurface::SurfaceType) type);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_RescueSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_Create_1RescueSurface3  (JNIEnv *env, jobject obj
  ,jlong modelInNdx
  ,jint orientationInt
  ,jlong i_lowbound
  ,jlong i_count
  ,jlong j_lowbound
  ,jlong j_count
  ,jfloat missingValue
  ,jfloatArray tripletArrayArray
  ,jint typeInt)
{
  jfloat *tripletArray = 0;
  try
  {
    RescueModel * modelIn = (RescueModel *) modelInNdx;
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    if (tripletArrayArray != 0)
    {
      tripletArray = (jfloat *) env->GetPrimitiveArrayCritical(tripletArrayArray, 0);
    }
    RescueSurface::SurfaceType type = (RescueSurface::SurfaceType) typeInt;
    RescueSurface *myReturn = new RescueSurface((RescueModel *) modelIn,
                (RescueCoordinateSystem::Orientation) orientation,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count,
                (RESCUEINT64) j_lowbound,
                (RESCUEINT64) j_count,
                (float) missingValue,
                (float *) tripletArray,
                (RescueSurface::SurfaceType) type);
    if (tripletArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (tripletArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(tripletArrayArray, (jfloat *) tripletArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_RescueSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_EdgesObj4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueEdgeSetStub * myReturn = myObject->EdgesObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_EdgesObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_Edges5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueEdgeSet * myReturn = myObject->Edges();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_Edges");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurface_AnyFileTruncated6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurface_IsOfType7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurface_Delete_1RescueSurface
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSurface *myObj = (RescueSurface *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_~RescueSurface");
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueSurface_Type9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueSurface::SurfaceType myReturn = myObject->Type();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_Type");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurface_SetColor11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong colorInNdx)
{
  try
  {
    RescueColor * colorIn = (RescueColor *) colorInNdx;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    myObject->SetColor((RescueColor *) colorIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_SetColor");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_Color12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueColor * myReturn = myObject->Color();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_Color");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_PropertyCount13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    jlong myReturn = myObject->PropertyCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_PropertyCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_NthRescueProperty14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueProperty * myReturn = myObject->NthRescueProperty(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_NthRescueProperty");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_PropertyIdentifiedBy15
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueProperty * myReturn = myObject->PropertyIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_PropertyIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_PropertyNamed16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueProperty * myReturn = myObject->PropertyNamed((char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_PropertyNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurface_DropRescueProperty17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueProperty * unitToDrop = (RescueProperty *) unitToDropNdx;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueProperty((RescueProperty *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_DropRescueProperty");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_IJSurfaceCount18
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    jlong myReturn = myObject->IJSurfaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_IJSurfaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_NthIJSurface19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueIJSurface * myReturn = myObject->NthIJSurface(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_NthIJSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_SurfaceIJIdentifiedBy20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueIJSurface * myReturn = myObject->SurfaceIJIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_SurfaceIJIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_SurfaceTriangulatedIdentifiedBy21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->SurfaceTriangulatedIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_SurfaceTriangulatedIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurface_DropIJSurface22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toDropNdx)
{
  try
  {
    RescueIJSurface * toDrop = (RescueIJSurface *) toDropNdx;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropIJSurface((RescueIJSurface *) toDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_DropIJSurface");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_ParentModel23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_CountOfPropertyGroup24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    jlong myReturn = myObject->CountOfPropertyGroup64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_CountOfPropertyGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurface_AddPropertyGroup25
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingPropertyGroupNdx)
{
  try
  {
    RescuePropertyGroup * existingPropertyGroup = (RescuePropertyGroup *) existingPropertyGroupNdx;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    myObject->AddPropertyGroup((RescuePropertyGroup *) existingPropertyGroup);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_AddPropertyGroup");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurface_DeletePropertyGroup26
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong groupNdx)
{
  try
  {
    RescuePropertyGroup * group = (RescuePropertyGroup *) groupNdx;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeletePropertyGroup((RescuePropertyGroup *) group);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_DeletePropertyGroup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_NthPropertyGroup27
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->NthPropertyGroup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_NthPropertyGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_CreateTriangulatedSurface28
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong verticesInNdx
  ,jlong facesInNdx)
{
  try
  {
    cSetRescueTriangleVertex * verticesIn = (cSetRescueTriangleVertex *) verticesInNdx;
    cSetRescueTriangleFace * facesIn = (cSetRescueTriangleFace *) facesInNdx;
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->CreateTriangulatedSurface((cSetRescueTriangleVertex *) verticesIn,
                (cSetRescueTriangleFace *) facesIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_CreateTriangulatedSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueProperty_Container29
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueProperty *myObject = (RescueProperty *) nativeNdx;
    RescueDataContainer * myReturn = myObject->Container();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueProperty_Container");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_CreateTriangulatedSurface29
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong vertexCount
  ,jobjectArray coordinatesArray
  ,jlong faceCount
  ,jobjectArray facesArray)
{
  jfloat **coordinates = 0;
  jlong **faces = 0;
  try
  {
    if (coordinatesArray != 0)
    {
      jlong coordinatesDim1 = env->GetArrayLength(coordinatesArray);
      coordinates = new jfloat*[coordinatesDim1];
      int loop;
      for (loop = 0; loop < coordinatesDim1; loop++)
      {
        jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
        coordinates[loop] = (jfloat *) env->GetPrimitiveArrayCritical(dimArray, 0);
      }
    }
    if (facesArray != 0)
    {
      jlong facesDim1 = env->GetArrayLength(facesArray);
      faces = new jlong*[facesDim1];
      int loop;
      for (loop = 0; loop < facesDim1; loop++)
      {
        jlongArray dimArray = (jlongArray) env->GetObjectArrayElement(facesArray, loop);
        faces[loop] = (jlong *) env->GetPrimitiveArrayCritical(dimArray, 0);
      }
    }
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->CreateTriangulatedSurface((int) vertexCount,
                (float **) coordinates,
                (RESCUEINT64) faceCount,
                (RESCUEINT64 **) faces);
    if (coordinatesArray != 0)
    {
      int coordinatesDim1 = env->GetArrayLength(coordinatesArray);
      int loop;
      for (loop = 0; loop < coordinatesDim1; loop++)
      {
        jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jfloat *) coordinates[loop], 0);
      }
      delete [] coordinates;
   }
    if (facesArray != 0)
    {
      jlong facesDim1 = env->GetArrayLength(facesArray);
      jlong loop;
      for (loop = 0; loop < facesDim1; loop++)
      {
        jlongArray dimArray = (jlongArray) env->GetObjectArrayElement(facesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jlong *) faces[loop], 0);
      }
      delete [] faces;
   }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
  if (coordinates != 0)
  {
    jlong coordinatesDim1 = env->GetArrayLength(coordinatesArray);
    jlong loop;
    for (loop = 0; loop < coordinatesDim1; loop++)
    {
      jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
      env->ReleasePrimitiveArrayCritical(dimArray, (jfloat *) coordinates[loop], 0);
    }
    delete [] coordinates;
  }
  if (faces != 0)
  {
    jlong facesDim1 = env->GetArrayLength(facesArray);
    jlong loop;
    for (loop = 0; loop < facesDim1; loop++)
    {
      jlongArray dimArray = (jlongArray) env->GetObjectArrayElement(facesArray, loop);
      env->ReleasePrimitiveArrayCritical(dimArray, (jlong *) faces[loop], 0);
    }
    delete [] faces;
  }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    if (coordinates != 0)
    {
      jlong coordinatesDim1 = env->GetArrayLength(coordinatesArray);
      jlong loop;
      for (loop = 0; loop < coordinatesDim1; loop++)
      {
        jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jfloat *) coordinates[loop], 0);
      }
      delete [] coordinates;
    }
    if (faces != 0)
    {
      jlong facesDim1 = env->GetArrayLength(facesArray);
      jlong loop;
      for (loop = 0; loop < facesDim1; loop++)
      {
        jlongArray dimArray = (jlongArray) env->GetObjectArrayElement(facesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jlong *) faces[loop], 0);
      }
      delete [] faces;
   }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_CreateTriangulatedSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_CreateTriangulatedSurface29i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint vertexCount
  ,jobjectArray coordinatesArray
  ,jint faceCount
  ,jobjectArray facesArray)
{
  jfloat **coordinates = 0;
  RESCUEINT32 **faces = 0;
  try
  {
    if (coordinatesArray != 0)
    {
      int coordinatesDim1 = env->GetArrayLength(coordinatesArray);
      coordinates = new jfloat*[coordinatesDim1];
      int loop;
      for (loop = 0; loop < coordinatesDim1; loop++)
      {
        jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
        coordinates[loop] = (jfloat *) env->GetPrimitiveArrayCritical(dimArray, 0);
      }
    }
    if (facesArray != 0)
    {
      int facesDim1 = env->GetArrayLength(facesArray);
      faces = new RESCUEINT32*[facesDim1];
      int loop;
      for (loop = 0; loop < facesDim1; loop++)
      {
        jintArray dimArray = (jintArray) env->GetObjectArrayElement(facesArray, loop);
        faces[loop] = (RESCUEINT32 *) env->GetPrimitiveArrayCritical(dimArray, 0);
      }
    }
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->CreateTriangulatedSurface(vertexCount,
                (float **) coordinates,
                (RESCUEINT32) faceCount,
                (RESCUEINT32 **) faces);
    if (coordinatesArray != 0)
    {
      int coordinatesDim1 = env->GetArrayLength(coordinatesArray);
      int loop;
      for (loop = 0; loop < coordinatesDim1; loop++)
      {
        jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jfloat *) coordinates[loop], 0);
      }
      delete [] coordinates;
   }
    if (facesArray != 0)
    {
      int facesDim1 = env->GetArrayLength(facesArray);
      int loop;
      for (loop = 0; loop < facesDim1; loop++)
      {
        jintArray dimArray = (jintArray) env->GetObjectArrayElement(facesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jint *) faces[loop], 0);
      }
      delete [] faces;
   }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
  if (coordinates != 0)
  {
    int coordinatesDim1 = env->GetArrayLength(coordinatesArray);
    int loop;
    for (loop = 0; loop < coordinatesDim1; loop++)
    {
      jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
      env->ReleasePrimitiveArrayCritical(dimArray, (jfloat *) coordinates[loop], 0);
    }
    delete [] coordinates;
  }
  if (faces != 0)
  {
    int facesDim1 = env->GetArrayLength(facesArray);
    int loop;
    for (loop = 0; loop < facesDim1; loop++)
    {
      jintArray dimArray = (jintArray) env->GetObjectArrayElement(facesArray, loop);
      env->ReleasePrimitiveArrayCritical(dimArray, (jlong *) faces[loop], 0);
    }
    delete [] faces;
  }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    if (coordinates != 0)
    {
      int coordinatesDim1 = env->GetArrayLength(coordinatesArray);
      int loop;
      for (loop = 0; loop < coordinatesDim1; loop++)
      {
        jfloatArray dimArray = (jfloatArray) env->GetObjectArrayElement(coordinatesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jfloat *) coordinates[loop], 0);
      }
      delete [] coordinates;
    }
    if (faces != 0)
    {
      int facesDim1 = env->GetArrayLength(facesArray);
      int loop;
      for (loop = 0; loop < facesDim1; loop++)
      {
        jintArray dimArray = (jintArray) env->GetObjectArrayElement(facesArray, loop);
        env->ReleasePrimitiveArrayCritical(dimArray, (jint *) faces[loop], 0);
      }
      delete [] faces;
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_CreateTriangulatedSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_CreateTriangulatedSurface30
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong vertexCount
  ,jfloatArray coordinatesArray
  ,jlong faceCount
  ,jlongArray facesArray)
{
  jfloat *coordinates = 0;
  jlong *faces = 0;
  try
  {
    if (coordinatesArray != 0)
    {
      coordinates = (jfloat *) env->GetPrimitiveArrayCritical(coordinatesArray, 0);
    }
    if (facesArray != 0)
    {
      faces = (jlong *) env->GetPrimitiveArrayCritical(facesArray, 0);
    }
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->CreateTriangulatedSurface((int) vertexCount,
                (float *) coordinates,
                (RESCUEINT64) faceCount,
                (RESCUEINT64 *) faces);
    if (coordinatesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(coordinatesArray, (jfloat *) coordinates, 0);
    }
    if (facesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(facesArray, (jlong *) faces, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (coordinates != 0)
      {
        env->ReleasePrimitiveArrayCritical(coordinatesArray, (jfloat *) coordinates, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faces != 0)
      {
        env->ReleasePrimitiveArrayCritical(facesArray, (jlong *) faces, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (coordinates != 0)
      {
        env->ReleasePrimitiveArrayCritical(coordinatesArray, (jfloat *) coordinates, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faces != 0)
      {
        env->ReleasePrimitiveArrayCritical(facesArray, (jlong *) faces, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_CreateTriangulatedSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_CreateTriangulatedSurface30i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint vertexCount
  ,jfloatArray coordinatesArray
  ,jint faceCount
  ,jintArray facesArray)
{
  jfloat *coordinates = 0;
  RESCUEINT32 *faces = 0;
  try
  {
    if (coordinatesArray != 0)
    {
      coordinates = (jfloat *) env->GetPrimitiveArrayCritical(coordinatesArray, 0);
    }
    if (facesArray != 0)
    {
      faces = (RESCUEINT32 *) env->GetPrimitiveArrayCritical(facesArray, 0);
    }
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->CreateTriangulatedSurface(vertexCount,
                (float *) coordinates,
                (RESCUEINT32) faceCount,
                (RESCUEINT32 *) faces);
    if (coordinatesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(coordinatesArray, (jfloat *) coordinates, 0);
    }
    if (facesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(facesArray, (jint *) faces, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (coordinates != 0)
      {
        env->ReleasePrimitiveArrayCritical(coordinatesArray, (jfloat *) coordinates, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faces != 0)
      {
        env->ReleasePrimitiveArrayCritical(facesArray, (jint *) faces, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (coordinates != 0)
      {
        env->ReleasePrimitiveArrayCritical(coordinatesArray, (jfloat *) coordinates, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faces != 0)
      {
        env->ReleasePrimitiveArrayCritical(facesArray, (jlong *) faces, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_CreateTriangulatedSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_TriangulatedSurface31
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    RescueTriangulatedSurface * myReturn = myObject->TriangulatedSurface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_TriangulatedSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_DataContainers32
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_DataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurface_DemandDataContainers33
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurface *myObject = (RescueSurface *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DemandDataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurface_DemandDataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_Geometry0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    RescueGeometry * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_Surface1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    RescueIJSurface * myReturn = myObject->Surface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_Surface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_Side2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    RescueSurfaceCell::SurfaceSide myReturn = myObject->Side();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_Side");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_CellFaceNumber3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    jlong myReturn = myObject->CellFaceNumber();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_CellFaceNumber");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_UVArray4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->UVArray();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->UVArrayLength();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_UVArray");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_UVArrayLength5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    jint myReturn = myObject->UVArrayLength();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_UVArrayLength");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_CellIndex7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jlongArray returnArrayArray
  ,jlong returnArraySize)
{
  RESCUEINT32 *returnArray = 0;
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    if (returnArrayArray != 0)
    {
      returnArray = (RESCUEINT32 *) env->GetPrimitiveArrayCritical(returnArrayArray, 0);
    }
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    myObject->CellIndex((RescueGeometry *) geometry,
                (RESCUEINT32 *) returnArray,
                (RESCUEINT32) returnArraySize);
    if (returnArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_CellIndex");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_CellIndex7i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jintArray returnArrayArray
  ,jint returnArraySize)
{
  jint *returnArray = 0;
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    if (returnArrayArray != 0)
    {
      returnArray = (jint *) env->GetPrimitiveArrayCritical(returnArrayArray, 0);
    }
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    myObject->CellIndex((RescueGeometry *) geometry,
                (RESCUEINT32 *) returnArray,
                (RESCUEINT32) returnArraySize);
    if (returnArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_CellIndex");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_IsOfType8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueSurfaceCell *myObject = (RescueSurfaceCell *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurfaceCell_Delete_1RescueSurfaceCell
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSurfaceCell *myObj = (RescueSurfaceCell *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceCell_~RescueSurfaceCell");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_Geometry0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    RescueGeometry * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_Surface1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    RescueIJSurface * myReturn = myObject->Surface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_Surface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_IList2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->IList64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->IListLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_IList");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_IList2i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->IList(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->IListLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_IList");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_JList3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->JList64();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->JListLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_JList");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_JList3i
  (JNIEnv *env, jobject obj, jlong nativeNdx,  jboolean throwIfTooBig)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->JList(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->JListLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_JList");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_IListLength4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jlong myReturn = myObject->IListLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_IListLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_JListLength5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jlong myReturn = myObject->JListLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_JListLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_ListLength6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    jlong myReturn = myObject->ListLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_ListLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_DataContainers7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_DataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_DemandDataContainers8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    cSetRescueDataContainer * myReturn = myObject->DemandDataContainers();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_DemandDataContainers");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_IsOfType7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueSurfaceToGrid *myObject = (RescueSurfaceToGrid *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueSurfaceToGrid_Delete_1RescueSurfaceToGrid
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueSurfaceToGrid *myObj = (RescueSurfaceToGrid *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueSurfaceToGrid_~RescueSurfaceToGrid");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_Create_1RescueTimeStepGroup0  (JNIEnv *env, jobject obj
  ,jstring timeStepNameInStr
  ,jlong groupInNdx)
{
  try
  {
    jboolean timeStepNameInBool;
    const char *timeStepNameIn = env->GetStringUTFChars(timeStepNameInStr, &timeStepNameInBool);
    RescuePropertyGroup * groupIn = (RescuePropertyGroup *) groupInNdx;
    RescueTimeStepGroup *myReturn = new RescueTimeStepGroup((const char *) timeStepNameIn,
                (RescuePropertyGroup *) groupIn);
    env->ReleaseStringUTFChars(timeStepNameInStr, timeStepNameIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_RescueTimeStepGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_Delete_1RescueTimeStepGroup
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTimeStepGroup *myObj = (RescueTimeStepGroup *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_~RescueTimeStepGroup");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_TimeStepName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RCHString * myReturn = myObject->TimeStepName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_TimeStepName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_SetTimeStepName3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newTimeStepNameStr)
{
  try
  {
    jboolean newTimeStepNameBool;
    const char *newTimeStepName = env->GetStringUTFChars(newTimeStepNameStr, &newTimeStepNameBool);
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    myObject->SetTimeStepName((char *) newTimeStepName);
    env->ReleaseStringUTFChars(newTimeStepNameStr, newTimeStepName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_SetTimeStepName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_ParentGroup4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->ParentGroup();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_ParentGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_RescueGeometryCount14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    jlong myReturn = myObject->RescueGeometryCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_RescueGeometryCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_RescuePropertyCount5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    int myReturn = myObject->RescuePropertyCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_RescuePropertyCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_AddGeometry15
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescueGeometry * toAdd = (RescueGeometry *) toAddNdx;
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    myObject->AddGeometry((RescueGeometry *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_AddGeometry");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_AddProperty6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescueProperty * toAdd = (RescueProperty *) toAddNdx;
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    myObject->AddProperty((RescueProperty *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_AddProperty");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_NthRescueGeometry16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RescueGeometry* myReturn = myObject->NthRescueGeometry(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_NthRescueGeometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_NthRescueProperty7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RescueProperty * myReturn = myObject->NthRescueProperty(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_NthRescueProperty");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C"
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_GetProperty13a
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong geometryNdx, jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RescueGeometry *geometry = (RescueGeometry *) geometryNdx;
    RescueProperty * myReturn = myObject->GetProperty(geometry, (char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_PropertyNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_PropertyNamed13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring nameStr)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RescueProperty * myReturn = myObject->PropertyNamed((char *) name);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_PropertyNamed");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_RemoveRescueGeometry17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueGeometry * unitToDrop = (RescueGeometry *) unitToDropNdx;
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->RemoveRescueGeometry((RescueGeometry *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_RemoveRescueGeometry");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_RemoveRescueProperty8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueProperty * unitToDrop = (RescueProperty *) unitToDropNdx;
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->RemoveRescueProperty((RescueProperty *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_RemoveRescueProperty");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_TestLock9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->TestLock();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_TestLock");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_SetLock10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    myObject->SetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_SetLock");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_ResetLock11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    myObject->ResetLock();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_ResetLock");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTimeStepGroup_IsOfType12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTimeStepGroup *myObject = (RescueTimeStepGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepGroup_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleFace_Create_1RescueTriangleFace0  (JNIEnv *env, jobject obj
  ,jlong v1Ndx
  ,jlong v2Ndx
  ,jlong v3Ndx)
{
  try
  {
    RescueTriangleVertex * v1 = (RescueTriangleVertex *) v1Ndx;
    RescueTriangleVertex * v2 = (RescueTriangleVertex *) v2Ndx;
    RescueTriangleVertex * v3 = (RescueTriangleVertex *) v3Ndx;
    RescueTriangleFace *myReturn = new RescueTriangleFace((RescueTriangleVertex *) v1,
                (RescueTriangleVertex *) v2,
                (RescueTriangleVertex *) v3);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleFace_RescueTriangleFace");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleFace_Create_1RescueTriangleFace1  (JNIEnv *env, jobject obj
  ,jlong vNdx)
{
  try
  {
    RescueTriangleVertex ** v = (RescueTriangleVertex **) vNdx;
    RescueTriangleFace *myReturn = new RescueTriangleFace((RescueTriangleVertex **) v);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleFace_RescueTriangleFace");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangleFace_Delete_1RescueTriangleFace
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTriangleFace *myObj = (RescueTriangleFace *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleFace_~RescueTriangleFace");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleFace_NthVertex3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ordinal)
{
  try
  {
    RescueTriangleFace *myObject = (RescueTriangleFace *) nativeNdx;
    RescueTriangleVertex * myReturn = myObject->NthVertex(ordinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleFace_NthVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleFace_CrossFace4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ordinal)
{
  try
  {
    RescueTriangleFace *myObject = (RescueTriangleFace *) nativeNdx;
    RescueTriangleFace * myReturn = myObject->CrossFace(ordinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleFace_CrossFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_Create_1RescueTriangleVertex0  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jfloat xIn
  ,jfloat yIn
  ,jfloat zIn)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueTriangleVertex *myReturn = new RescueTriangleVertex((RescueContext *) context,
                (float) xIn,
                (float) yIn,
                (float) zIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_RescueTriangleVertex");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_Create_1RescueTriangleVertex1  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jfloat xIn
  ,jfloat yIn
  ,jfloat zIn
  ,jfloat uIn
  ,jfloat vIn)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueTriangleVertex *myReturn = new RescueTriangleVertex((RescueContext *) context,
                (float) xIn,
                (float) yIn,
                (float) zIn,
                (float) uIn,
                (float) vIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_RescueTriangleVertex");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_Delete_1RescueTriangleVertex
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTriangleVertex *myObj = (RescueTriangleVertex *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_~RescueTriangleVertex");
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_X3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    float myReturn = myObject->X();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_X");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_Y4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    float myReturn = myObject->Y();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_Y");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_Z5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    float myReturn = myObject->Z();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_Z");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_U6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    float myReturn = myObject->U();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_U");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_V7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    float myReturn = myObject->V();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_V");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_SetUV8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat uIn
  ,jfloat vIn)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    myObject->SetUV((float) uIn,
                (float) vIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_SetUV");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_FaceCount9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    jlong myReturn = myObject->FaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_FaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangleVertex_NthFace10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTriangleVertex *myObject = (RescueTriangleVertex *) nativeNdx;
    RescueTriangleFace * myReturn = myObject->NthFace(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangleVertex_NthFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_VertexCount0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    jlong myReturn = myObject->VertexCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_VertexCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_NthVertex1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RescueTriangleVertex * myReturn = myObject->NthVertex((jlong) zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_NthVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_FaceCount2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    jlong myReturn = myObject->FaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_FaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_NthFace3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RescueTriangleFace * myReturn = myObject->NthFace(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_NthFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_FaceList6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    cSetRescueTriangleFace * myReturn = myObject->FaceList();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_FaceList");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_VertexList7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    cSetRescueTriangleVertex * myReturn = myObject->VertexList();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_VertexList");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_AddVertex8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescueTriangleVertex * toAdd = (RescueTriangleVertex *) toAddNdx;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    myObject->AddVertex((RescueTriangleVertex *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_AddVertex");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_AddFace9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toAddNdx)
{
  try
  {
    RescueTriangleFace * toAdd = (RescueTriangleFace *) toAddNdx;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    myObject->AddFace((RescueTriangleFace *) toAdd);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_AddFace");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_DropVertex10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toDropNdx)
{
  try
  {
    RescueTriangleVertex * toDrop = (RescueTriangleVertex *) toDropNdx;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropVertex((RescueTriangleVertex *) toDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_DropVertex");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_DropFace11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toDropNdx)
{
  try
  {
    RescueTriangleFace * toDrop = (RescueTriangleFace *) toDropNdx;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropFace((RescueTriangleFace *) toDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_DropFace");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_Grid12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint howAttachedInt)
{
  try
  {
    RescueProperty::AttachmentPoint howAttached = (RescueProperty::AttachmentPoint) howAttachedInt;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RescueGrid * myReturn = myObject->Grid((RescueProperty::AttachmentPoint) howAttached);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_Grid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_Delete_1RescueTriangulatedSurface
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTriangulatedSurface *myObj = (RescueTriangulatedSurface *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_~RescueTriangulatedSurface");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_ParentSurface14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RescueSurface * myReturn = myObject->ParentSurface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_ParentSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_Contains15
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong vertexNdx)
{
  try
  {
    RescueTriangleVertex * vertex = (RescueTriangleVertex *) vertexNdx;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Contains((RescueTriangleVertex *) vertex);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_Contains");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_OctTreeCount16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    jlong myReturn = myObject->OctTreeCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_OctTreeCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_NthOctTree17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RescueSOctTreeNode * myReturn = myObject->NthOctTree(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_NthOctTree");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_DropOctTree18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong toDropNdx)
{
  try
  {
    RescueSOctTreeNode * toDrop = (RescueSOctTreeNode *) toDropNdx;
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropOctTree((RescueSOctTreeNode *) toDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_DropOctTree");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_IsLoaded19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsLoaded();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_IsLoaded");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_Load20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Load();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_Load");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_FileTruncated21
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->FileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_FileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_Unload22
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Unload();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_Unload");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_HasChanged23
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->HasChanged();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_HasChanged");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_MarkChanged24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    myObject->MarkChanged();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_MarkChanged");
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_Version25
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean reloadBool)
{
  try
  {
    RESCUEBOOL reload = ((reloadBool == JNI_TRUE) ? TRUE : FALSE);
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    jint myReturn = myObject->Version((RESCUEBOOL) reload);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_Version");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_SetFaceStatus26
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong i, jlong status)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    myObject->SetFaceStatus(i, (RescueIJSurface::RescueFaceStatus) status);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_SetFaceStatus26");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTriangulatedSurface_FaceStatus27
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong i)
{
  try
  {
    RescueTriangulatedSurface *myObject = (RescueTriangulatedSurface *) nativeNdx;
    jlong myReturn = myObject->FaceStatus(i);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTriangulatedSurface_Version");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimEdge_Delete_1RescueTrimEdge
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTrimEdge *myObj = (RescueTrimEdge *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_~RescueTrimEdge");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_Create_1RescueTrimEdge1  (JNIEnv *env, jobject obj
  ,jlong polyLineInNdx
  ,jint directionInInt)
{
  try
  {
    RescuePolyLine * polyLineIn = (RescuePolyLine *) polyLineInNdx;
    _RescueLineDirection directionIn = (_RescueLineDirection) directionInInt;
    RescueTrimEdge *myReturn = new RescueTrimEdge((RescuePolyLine *) polyLineIn,
                (_RescueLineDirection) directionIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_RescueTrimEdge");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueTrimEdge_Direction2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    _RescueLineDirection myReturn = myObject->Direction();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_Direction");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_StartingPoint3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->StartingPoint((RescueModel *) model);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_StartingPoint");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_EndingPoint4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->EndingPoint((RescueModel *) model);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_EndingPoint");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_NodeCount5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    jlong myReturn = myObject->NodeCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_NodeCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_NthNode6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescuePolyLineNode * myReturn = myObject->NthNode(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_NthNode");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_PolyLine7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescuePolyLine * myReturn = myObject->PolyLine((RescueModel *) model);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_PolyLine");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_ParentLoop8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescueTrimLoop * myReturn = myObject->ParentLoop();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_ParentLoop");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_StartingPointObj9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescueTrimVertexStub * myReturn = myObject->StartingPointObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_StartingPointObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_EndingPointObj10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescueTrimVertexStub * myReturn = myObject->EndingPointObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_EndingPointObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimEdge_PolyLineObj11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RescuePolyLineStub * myReturn = myObject->PolyLineObj();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_PolyLineObj");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimEdge_SurfaceOnEdge12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong surfNdx)
{
  try
  {
    RescueIJSurface & surf = (RescueIJSurface &) surfNdx;
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RESCUEBOOL myReturn = myObject->SurfaceOnEdge((RescueIJSurface &) surf);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_SurfaceOnEdge");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimEdge_IsOfType13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTrimEdge *myObject = (RescueTrimEdge *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimEdge_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_Create_1RescueTrimLoop0  (JNIEnv *env, jobject obj
  ,jlong wireframeInNdx
  ,jstring loopClassInStr)
{
  try
  {
    RescueWireframeOwner * wireframeIn = (RescueWireframeOwner *) wireframeInNdx;
    jboolean loopClassInBool;
    const char *loopClassIn = env->GetStringUTFChars(loopClassInStr, &loopClassInBool);
    RescueTrimLoop *myReturn = new RescueTrimLoop((RescueWireframeOwner *) wireframeIn,
                (char *) loopClassIn);
    env->ReleaseStringUTFChars(loopClassInStr, loopClassIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_RescueTrimLoop");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimLoop_Delete_1RescueTrimLoop
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTrimLoop *myObj = (RescueTrimLoop *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_~RescueTrimLoop");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_Owner2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RescueWireframe * myReturn = myObject->Owner();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_Owner");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_OwnerSet3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RescueEdgeSet * myReturn = myObject->OwnerSet();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_OwnerSet");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_OwnerProperty4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RescueProperty * myReturn = myObject->OwnerProperty((RescueModel *) model);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_OwnerProperty");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueTrimLoop_LoopClass5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RCHString * myReturn = myObject->LoopClass();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_LoopClass");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimLoop_SetLoopClass6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newClassStr)
{
  try
  {
    jboolean newClassBool;
    const char *newClass = env->GetStringUTFChars(newClassStr, &newClassBool);
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    myObject->SetLoopClass((char *) newClass);
    env->ReleaseStringUTFChars(newClassStr, newClass);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_SetLoopClass");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_FaceHint7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    jlong myReturn = myObject->FaceHint();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_FaceHint");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimLoop_SetFaceHint8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong hint)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    myObject->SetFaceHint(hint);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_SetFaceHint");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimLoop_AddLoopEdge9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeNdx)
{
  try
  {
    RescueTrimEdge * existingEdge = (RescueTrimEdge *) existingEdgeNdx;
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    myObject->AddLoopEdge((RescueTrimEdge *) existingEdge);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_AddLoopEdge");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimLoop_DropLoopEdge10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingEdgeNdx)
{
  try
  {
    RescueTrimEdge * existingEdge = (RescueTrimEdge *) existingEdgeNdx;
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    myObject->DropLoopEdge((RescueTrimEdge *) existingEdge);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_DropLoopEdge");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_NthLoopEdge11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RescueTrimEdge * myReturn = myObject->NthLoopEdge(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_NthLoopEdge");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoop_CountOfLoopEdge12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    jlong myReturn = myObject->CountOfLoopEdge64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_CountOfLoopEdge");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimLoop_IsLoop13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsLoop((RescueModel *) model);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_IsLoop");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimLoop_IsOfType14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTrimLoop *myObject = (RescueTrimLoop *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoop_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimLoopStub_Delete_1RescueTrimLoopStub
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTrimLoopStub *myObj = (RescueTrimLoopStub *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoopStub_~RescueTrimLoopStub");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimLoopStub_Equals1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescueTrimLoopStub * other = (RescueTrimLoopStub *) otherNdx;
    RescueTrimLoopStub *myObject = (RescueTrimLoopStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescueTrimLoopStub *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoopStub_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimLoopStub_Equals2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescueTrimLoop * other = (RescueTrimLoop *) otherNdx;
    RescueTrimLoopStub *myObject = (RescueTrimLoopStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescueTrimLoop *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoopStub_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimLoopStub_TrimLoop3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx
  ,jboolean loadIfNeededBool)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RESCUEBOOL loadIfNeeded = ((loadIfNeededBool == JNI_TRUE) ? TRUE : FALSE);
    RescueTrimLoopStub *myObject = (RescueTrimLoopStub *) nativeNdx;
    RescueTrimLoop * myReturn = myObject->TrimLoop((RescueModel *) model,
                (RESCUEBOOL) loadIfNeeded);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoopStub_TrimLoop");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimLoopStub_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTrimLoopStub *myObject = (RescueTrimLoopStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimLoopStub_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimVertex_Create_1RescueTrimVertex0  (JNIEnv *env, jobject obj
  ,jlong ownerInNdx
  ,jdouble x
  ,jdouble y
  ,jdouble z)
{
  try
  {
    RescueWireframeOwner * ownerIn = (RescueWireframeOwner *) ownerInNdx;
    RescueTrimVertex *myReturn = new RescueTrimVertex((RescueWireframeOwner *) ownerIn,
                (double) x,
                (double) y,
                (double) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_RescueTrimVertex");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimVertex_Create_1RescueTrimVertex1  (JNIEnv *env, jobject obj
  ,jlong ownerInNdx
  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescueWireframeOwner * ownerIn = (RescueWireframeOwner *) ownerInNdx;
    RescueTrimVertex *myReturn = new RescueTrimVertex((RescueWireframeOwner *) ownerIn,
                (float) x,
                (float) y,
                (float) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_RescueTrimVertex");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimVertex_Delete_1RescueTrimVertex
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTrimVertex *myObj = (RescueTrimVertex *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_~RescueTrimVertex");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimVertex_NthPolyLine3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueTrimVertex *myObject = (RescueTrimVertex *) nativeNdx;
    RescuePolyLineStub * myReturn = myObject->NthPolyLine(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_NthPolyLine");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimVertex_Owner4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTrimVertex *myObject = (RescueTrimVertex *) nativeNdx;
    RescueWireframe * myReturn = myObject->Owner();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_Owner");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimVertex_Equals5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescueTrimVertexStub * other = (RescueTrimVertexStub *) otherNdx;
    RescueTrimVertex *myObject = (RescueTrimVertex *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescueTrimVertexStub *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimVertex_Equals6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescueTrimVertex * other = (RescueTrimVertex *) otherNdx;
    RescueTrimVertex *myObject = (RescueTrimVertex *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescueTrimVertex *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimVertex_IsOfType7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTrimVertex *myObject = (RescueTrimVertex *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertex_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTrimVertexStub_Delete_1RescueTrimVertexStub
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTrimVertexStub *myObj = (RescueTrimVertexStub *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertexStub_~RescueTrimVertexStub");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimVertexStub_Equals1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescueTrimVertexStub * other = (RescueTrimVertexStub *) otherNdx;
    RescueTrimVertexStub *myObject = (RescueTrimVertexStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescueTrimVertexStub *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertexStub_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimVertexStub_Equals2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong otherNdx)
{
  try
  {
    RescueTrimVertex * other = (RescueTrimVertex *) otherNdx;
    RescueTrimVertexStub *myObject = (RescueTrimVertexStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Equals((RescueTrimVertex *) other);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertexStub_Equals");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTrimVertexStub_TrimVertex3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx
  ,jboolean loadIfNeededBool)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RESCUEBOOL loadIfNeeded = ((loadIfNeededBool == JNI_TRUE) ? TRUE : FALSE);
    RescueTrimVertexStub *myObject = (RescueTrimVertexStub *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->TrimVertex((RescueModel *) model,
                (RESCUEBOOL) loadIfNeeded);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertexStub_TrimVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTrimVertexStub_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTrimVertexStub *myObject = (RescueTrimVertexStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTrimVertexStub_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_Create_1RescueTripletArray0  (JNIEnv *env, jobject obj
  ,jlong contextNdx
  ,jlong existingGridNdx
  ,jfloat missingValueIn
  ,jlong parentModelInNdx)
{
  try
  {
    RescueContext * context = (RescueContext *) contextNdx;
    RescueGrid * existingGrid = (RescueGrid *) existingGridNdx;
    RescueModel * parentModelIn = (RescueModel *) parentModelInNdx;
    RescueTripletArray *myReturn = new RescueTripletArray((RescueContext *) context,
                (RescueGrid *) existingGrid,
                (float) missingValueIn,
                (RescueModel *) parentModelIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueTripletArray");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_Create_1RescueTripletArray1  (JNIEnv *env, jobject obj
  ,jlong existingGridNdx
  ,jfloat missingValueIn
  ,jfloatArray valueArrayArray
  ,jlong parentModelInNdx)
{
  jfloat *valueArray = 0;
  try
  {
    RescueGrid * existingGrid = (RescueGrid *) existingGridNdx;
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueModel * parentModelIn = (RescueModel *) parentModelInNdx;
    RescueTripletArray *myReturn = new RescueTripletArray((RescueGrid *) existingGrid,
                (float) missingValueIn,
                (float *) valueArray,
                (RescueModel *) parentModelIn);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueTripletArray");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_Delete_1RescueTripletArray
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueTripletArray *myObj = (RescueTripletArray *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_~RescueTripletArray");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_Grid3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RescueGrid * myReturn = myObject->Grid();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_Grid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTripletArray_MissingValue4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    float myReturn = myObject->MissingValue();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_MissingValue");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_SetValue5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat nullValueIn
  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->SetValue((float) nullValueIn,
                (float *) valueArray);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_SetValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_AssignXValue6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->AssignXValue((float *) (valueArrayArray == 0) ? 0 : copyFloatArray(valueArray, (int) env->GetArrayLength(valueArrayArray)));
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_AssignXValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_AssignYValue7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->AssignYValue((float *) (valueArrayArray == 0) ? 0 : copyFloatArray(valueArray, (int) env->GetArrayLength(valueArrayArray)));
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_AssignYValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_AssignZValue8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->AssignZValue((float *) (valueArrayArray == 0) ? 0 : copyFloatArray(valueArray, (int) env->GetArrayLength(valueArrayArray)));
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_AssignZValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_SetXValue9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->SetXValue((float *) valueArray);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_SetXValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_SetYValue10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->SetYValue((float *) valueArray);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_SetYValue");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_SetZValue11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray valueArrayArray)
{
  jfloat *valueArray = 0;
  try
  {
    if (valueArrayArray != 0)
    {
      valueArray = (jfloat *) env->GetPrimitiveArrayCritical(valueArrayArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->SetZValue((float *) valueArray);
    if (valueArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (valueArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(valueArrayArray, (jfloat *) valueArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_SetZValue");
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueTripletArray_RescueGetXValue12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->RescueGetXValue();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->RescueGetXValueLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueGetXValue");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueTripletArray_RescueGetYValue13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->RescueGetYValue();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->RescueGetYValueLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueGetYValue");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueTripletArray_RescueGetZValue14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->RescueGetZValue();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->RescueGetZValueLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueGetZValue");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_RescueGetXValueLength15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jlong myReturn = myObject->RescueGetXValueLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueGetXValueLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_RescueGetYValueLength16
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jlong myReturn = myObject->RescueGetYValueLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueGetYValueLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_RescueGetZValueLength17
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jlong myReturn = myObject->RescueGetZValueLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_RescueGetZValueLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_XValues18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray bufferArray
  ,jlong offset
  ,jlong valueCount)
{
  jfloat *buffer = 0;
  try
  {
    if (bufferArray != 0)
    {
      buffer = (jfloat *) env->GetPrimitiveArrayCritical(bufferArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->XValues((float *) buffer,
                offset,
                valueCount);
    if (bufferArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_XValues");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_YValues19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray bufferArray
  ,jlong offset
  ,jlong valueCount)
{
  jfloat *buffer = 0;
  try
  {
    if (bufferArray != 0)
    {
      buffer = (jfloat *) env->GetPrimitiveArrayCritical(bufferArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->YValues((float *) buffer,
                offset,
                valueCount);
    if (bufferArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_YValues");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_ZValues20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloatArray bufferArray
  ,jlong offset
  ,jlong valueCount)
{
  jfloat *buffer = 0;
  try
  {
    if (bufferArray != 0)
    {
      buffer = (jfloat *) env->GetPrimitiveArrayCritical(bufferArray, 0);
    }
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->ZValues((float *) buffer,
                offset,
                valueCount);
    if (bufferArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (buffer != 0)
      {
        env->ReleasePrimitiveArrayCritical(bufferArray, (jfloat *) buffer, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_ZValues");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_IsOfType21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_IsRegular22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong which)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsRegular(which);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_IsRegular");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_IsCalculated23
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong which)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsCalculated(which);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_IsCalculated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_ParentModel27
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_HasSplitNodes29
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->HasSplitNodes();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_HasSplitNodes");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_IsSplit30
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong i
  ,jlong j)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsSplit(i, j);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_IsSplit");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_SetXYZCorner31
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong i
  ,jlong j
  ,jlong faceNumber
  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->SetXYZCorner(i,
                j,
                faceNumber,
                (float) x,
                (float) y,
                (float) z);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_SetXYZCorner");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_ClearSplitNode32
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong i
  ,jlong j)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->ClearSplitNode(i, j);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_ClearSplitNode");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_ClearSplitNodes33
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->ClearSplitNodes();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_ClearSplitNodes");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_IsLoaded34
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsLoaded();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_IsLoaded");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_Load35
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Load();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_Load");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_FileTruncated36
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->FileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_FileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_Unload37
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->Unload();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_Unload");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTripletArray_HasChanged38
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    RESCUEBOOL myReturn = myObject->HasChanged();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_HasChanged");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_MarkChanged39
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->MarkChanged();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_MarkChanged");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTripletArray_Version40
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean reloadBool)
{
  try
  {
    RESCUEBOOL reload = ((reloadBool == JNI_TRUE) ? TRUE : FALSE);
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    jlong myReturn = myObject->Version((RESCUEBOOL) reload);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_Version");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C"
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTripletArray_EnsureLoadedNative
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTripletArray *myObject = (RescueTripletArray *) nativeNdx;
    myObject->EnsureLoaded();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTripletArray_EnsureLoaded");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTruncation_Create_1RescueTruncation0  (JNIEnv *env, jobject obj
)
{
  try
  {
    RescueTruncation *myReturn = new RescueTruncation();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_RescueTruncation");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTruncation_SetI1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong iIn)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    myObject->SetI(iIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_SetI");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTruncation_SetJ2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong jIn)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    myObject->SetJ(jIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_SetJ");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTruncation_SetSelfFaultId3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong self_fault_idIn)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    myObject->SetSelfFaultId(self_fault_idIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_SetSelfFaultId");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTruncation_SetSelfLimit4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat self_limitIn)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    myObject->SetSelfLimit((float) self_limitIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_SetSelfLimit");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTruncation_I5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    jlong myReturn = myObject->I();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_I");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTruncation_J6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    jlong myReturn = myObject->J();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_J");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTruncation_SelfFaultId7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    jlong myReturn = myObject->SelfFaultId();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_SelfFaultId");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueTruncation_SelfLimit8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    float myReturn = myObject->SelfLimit();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_SelfLimit");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueTruncation_isSelfTruncating10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTruncation *myObject = (RescueTruncation *) nativeNdx;
    RESCUEBOOL myReturn = myObject->isSelfTruncating();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTruncation_isSelfTruncating");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnit_Create_1RescueUnit0  (JNIEnv *env, jobject obj
  ,jstring newUnitNameStr
  ,jlong newParentModelNdx)
{
  try
  {
    jboolean newUnitNameBool;
    const char *newUnitName = env->GetStringUTFChars(newUnitNameStr, &newUnitNameBool);
    RescueModel * newParentModel = (RescueModel *) newParentModelNdx;
    RescueUnit *myReturn = new RescueUnit((char *) newUnitName,
                (RescueModel *) newParentModel);
    env->ReleaseStringUTFChars(newUnitNameStr, newUnitName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_RescueUnit");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnit_Delete_1RescueUnit
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueUnit *myObj = (RescueUnit *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_~RescueUnit");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueUnit_UnitName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RCHString * myReturn = myObject->UnitName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_UnitName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnit_SetUnitName3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newUnitNameStr)
{
  try
  {
    jboolean newUnitNameBool;
    const char *newUnitName = env->GetStringUTFChars(newUnitNameStr, &newUnitNameBool);
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    myObject->SetUnitName((char *) newUnitName);
    env->ReleaseStringUTFChars(newUnitNameStr, newUnitName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_SetUnitName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnit_ParentModel4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnit_PropertyGroupCount5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    jlong myReturn = myObject->PropertyGroupCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_PropertyGroupCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnit_NthRescuePropertyGroup6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->NthRescuePropertyGroup(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_NthRescuePropertyGroup");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnit_PropertyGroupIdentifiedBy7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->PropertyGroupIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_PropertyGroupIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUnit_DropRescuePropertyGroup8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescuePropertyGroup * unitToDrop = (RescuePropertyGroup *) unitToDropNdx;
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescuePropertyGroup((RescuePropertyGroup *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_DropRescuePropertyGroup");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnit_AddBlockUnit9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingBlockUnitNdx)
{
  try
  {
    RescueBlockUnit * existingBlockUnit = (RescueBlockUnit *) existingBlockUnitNdx;
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    myObject->AddBlockUnit((RescueBlockUnit *) existingBlockUnit);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_AddBlockUnit");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUnit_DeleteBlockUnit10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingBlockUnitNdx)
{
  try
  {
    RescueBlockUnit * existingBlockUnit = (RescueBlockUnit *) existingBlockUnitNdx;
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DeleteBlockUnit((RescueBlockUnit *) existingBlockUnit);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_DeleteBlockUnit");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnit_NthBlockUnit11
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RescueBlockUnit * myReturn = myObject->NthBlockUnit(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_NthBlockUnit");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUnit_IsNamed12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring possibleNameStr)
{
  try
  {
    jboolean possibleNameBool;
    const char *possibleName = env->GetStringUTFChars(possibleNameStr, &possibleNameBool);
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsNamed((char *) possibleName);
    env->ReleaseStringUTFChars(possibleNameStr, possibleName);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_IsNamed");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUnit_IsOfType13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueUnit *myObject = (RescueUnit *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnit_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_Delete_1RescueUnstructuredGrid
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueUnstructuredGrid *myObj = (RescueUnstructuredGrid *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_~RescueUnstructuredGrid");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_AddVertices1
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong count
  ,jfloatArray vertexXInArray
  ,jfloatArray vertexYInArray
  ,jfloatArray vertexZinArray)
{
  jfloat *vertexXIn = 0;
  jfloat *vertexYIn = 0;
  jfloat *vertexZin = 0;
  try
  {
    if (vertexXInArray != 0)
    {
      vertexXIn = (jfloat *) env->GetPrimitiveArrayCritical(vertexXInArray, 0);
    }
    if (vertexYInArray != 0)
    {
      vertexYIn = (jfloat *) env->GetPrimitiveArrayCritical(vertexYInArray, 0);
    }
    if (vertexZinArray != 0)
    {
      vertexZin = (jfloat *) env->GetPrimitiveArrayCritical(vertexZinArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->AddVertices(count,
                (float *) vertexXIn,
                (float *) vertexYIn,
                (float *) vertexZin);
    if (vertexXInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexXInArray, (jfloat *) vertexXIn, 0);
    }
    if (vertexYInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexYInArray, (jfloat *) vertexYIn, 0);
    }
    if (vertexZinArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexZinArray, (jfloat *) vertexZin, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (vertexXIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexXInArray, (jfloat *) vertexXIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexYIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexYInArray, (jfloat *) vertexYIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexZin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexZinArray, (jfloat *) vertexZin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (vertexXIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexXInArray, (jfloat *) vertexXIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexYIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexYInArray, (jfloat *) vertexYIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (vertexZin != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexZinArray, (jfloat *) vertexZin, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_AddVertices");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_AddFace2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong count
  ,jlongArray vertexIndicesArray)
{
  jlong *vertexIndices = 0;
  try
  {
    if (vertexIndicesArray != 0)
    {
      vertexIndices = (jlong *) env->GetPrimitiveArrayCritical(vertexIndicesArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->AddFace(count,
                (RESCUEINT64 *) vertexIndices);
    if (vertexIndicesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexIndicesArray, (jlong *) vertexIndices, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (vertexIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexIndicesArray, (jlong *) vertexIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (vertexIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexIndicesArray, (jlong *) vertexIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_AddFace");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_AddFace2i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint count
  ,jintArray vertexIndicesArray)
{
  jint *vertexIndices = 0;
  try
  {
    if (vertexIndicesArray != 0)
    {
      vertexIndices = (jint *) env->GetPrimitiveArrayCritical(vertexIndicesArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->AddFace((RESCUEINT32) count,
                (RESCUEINT32 *) vertexIndices);
    if (vertexIndicesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(vertexIndicesArray, (jint *) vertexIndices, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (vertexIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexIndicesArray, (jint *) vertexIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (vertexIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(vertexIndicesArray, (jint *) vertexIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_AddFace");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_AddCell3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong cellCenterNdxIn
  ,jlong kLayerIn
  ,jlong count
  ,jlongArray faceIndicesArray)
{
  jlong *faceIndices = 0;
  try
  {
    if (faceIndicesArray != 0)
    {
      faceIndices = (jlong *) env->GetPrimitiveArrayCritical(faceIndicesArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->AddCell((RESCUEINT64) cellCenterNdxIn,
                (RESCUEINT64) kLayerIn,
                (RESCUEINT64) count,
                (RESCUEINT64 *) faceIndices);
    if (faceIndicesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceIndicesArray, (jlong *) faceIndices, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndicesArray, (jlong *) faceIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndicesArray, (jlong *) faceIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_AddCell");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_AddCell3i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint cellCenterNdxIn
  ,jint kLayerIn
  ,jint count
  ,jintArray faceIndicesArray)
{
  jint *faceIndices = 0;
  try
  {
    if (faceIndicesArray != 0)
    {
      faceIndices = (jint *) env->GetPrimitiveArrayCritical(faceIndicesArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->AddCell((RESCUEINT32) cellCenterNdxIn,
                (RESCUEINT32) kLayerIn,
                (RESCUEINT32) count,
                (RESCUEINT32 *) faceIndices);
    if (faceIndicesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceIndicesArray, (jint *) faceIndices, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndicesArray, (jint *) faceIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceIndices != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceIndicesArray, (jint *) faceIndices, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_AddCell");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VertexCount4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->VertexCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VertexCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_NthVertexX5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    float myReturn = myObject->NthVertexX(zeroBasedOrdinal);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_NthVertexX");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_NthVertexY6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    float myReturn = myObject->NthVertexY(zeroBasedOrdinal);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_NthVertexY");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_NthVertexZ7
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    float myReturn = myObject->NthVertexZ(zeroBasedOrdinal);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_NthVertexZ");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VerticesX8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->VerticesX();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->VerticesXLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VerticesX");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VerticesY9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->VerticesY();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->VerticesYLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VerticesY");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloatArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VerticesZ10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jfloat * myReturnCpp = (jfloat *) myObject->VerticesZ();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->VerticesZLength64();
      jfloatArray myReturn = env->NewFloatArray(howMany);
      env->SetFloatArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VerticesZ");
    return (jfloatArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VerticesXLength11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->VerticesXLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VerticesXLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VerticesYLength12
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->VerticesYLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VerticesYLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_VerticesZLength13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->VerticesZLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_VerticesZLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyVertices14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowNdx
  ,jlong count
  ,jfloatArray preAllocatedXArray
  ,jfloatArray preAllocatedYArray
  ,jfloatArray preAllocatedZArray
  ,jlong offset)
{
  jfloat *preAllocatedX = 0;
  jfloat *preAllocatedY = 0;
  jfloat *preAllocatedZ = 0;
  try
  {
    if (preAllocatedXArray != 0)
    {
      preAllocatedX = (jfloat *) env->GetPrimitiveArrayCritical(preAllocatedXArray, 0);
    }
    if (preAllocatedYArray != 0)
    {
      preAllocatedY = (jfloat *) env->GetPrimitiveArrayCritical(preAllocatedYArray, 0);
    }
    if (preAllocatedZArray != 0)
    {
      preAllocatedZ = (jfloat *) env->GetPrimitiveArrayCritical(preAllocatedZArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyVertices(lowNdx,
                count,
                (float *) preAllocatedX,
                (float *) preAllocatedY,
                (float *) preAllocatedZ,
                offset);
    if (preAllocatedXArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedXArray, (jfloat *) preAllocatedX, 0);
    }
    if (preAllocatedYArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedYArray, (jfloat *) preAllocatedY, 0);
    }
    if (preAllocatedZArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedZArray, (jfloat *) preAllocatedZ, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocatedX != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedXArray, (jfloat *) preAllocatedX, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedY != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedYArray, (jfloat *) preAllocatedY, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedZ != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedZArray, (jfloat *) preAllocatedZ, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocatedX != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedXArray, (jfloat *) preAllocatedX, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedY != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedYArray, (jfloat *) preAllocatedY, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedZ != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedZArray, (jfloat *) preAllocatedZ, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyVertices");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_SetVertices16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong count
  ,jfloatArray xsArray
  ,jfloatArray ysArray
  ,jfloatArray zsArray)
{
  jfloat *xs = 0;
  jfloat *ys = 0;
  jfloat *zs = 0;
  try
  {
    if (xsArray != 0)
    {
      xs = (jfloat *) env->GetPrimitiveArrayCritical(xsArray, 0);
    }
    if (ysArray != 0)
    {
      ys = (jfloat *) env->GetPrimitiveArrayCritical(ysArray, 0);
    }
    if (zsArray != 0)
    {
      zs = (jfloat *) env->GetPrimitiveArrayCritical(zsArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->SetVertices(count,
                (float *) xs,
                (float *) ys,
                (float *) zs);
    if (xsArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
    }
    if (ysArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
    }
    if (zsArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (xs != 0)
      {
        env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (ys != 0)
      {
        env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (zs != 0)
      {
        env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (xs != 0)
      {
        env->ReleasePrimitiveArrayCritical(xsArray, (jfloat *) xs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (ys != 0)
      {
        env->ReleasePrimitiveArrayCritical(ysArray, (jfloat *) ys, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (zs != 0)
      {
        env->ReleasePrimitiveArrayCritical(zsArray, (jfloat *) zs, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_SetVertices");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCount17
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_NthFace18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal
  ,jlong count
  ,jlongArray preAllocatedArray)
{
  jlong *preAllocated = 0;
  try
  {
    if (preAllocatedArray != 0)
    {
      preAllocated = (jlong *) env->GetPrimitiveArrayCritical(preAllocatedArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    int myReturn = myObject->NthFace(zeroBasedOrdinal,
                count,
                (RESCUEINT64 *) preAllocated);
    if (preAllocatedArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jlong *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_NthFace");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_NthFace18i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint zeroBasedOrdinal
  ,jint count
  ,jintArray preAllocatedArray)
{
  jint *preAllocated = 0;
  try
  {
    if (preAllocatedArray != 0)
    {
      preAllocated = (jint *) env->GetPrimitiveArrayCritical(preAllocatedArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    int myReturn = myObject->NthFace(zeroBasedOrdinal,
                count,
                (RESCUEINT32 *) preAllocated);
    if (preAllocatedArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
    }
    return myReturn;
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (preAllocated != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedArray, (jint *) preAllocated, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_NthFace");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexNdx19
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceVertexNdx();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceVertexNdxLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexNdx19i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceVertexNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->FaceVertexNdxLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexNdx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexCount20
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceVertexCount();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jint howMany = myObject->FaceVertexCountLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexCount");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexCount20i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint *myReturnCpp = (jint *) myObject->FaceVertexCount(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->FaceVertexCountLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexCount");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexNdxLength21
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceVertexNdxLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexNdxLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexCountLength22
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceVertexCountLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexCountLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyFaces23
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowNdx
  ,jlong count
  ,jlongArray preAllocatedNdxArray
  ,jlongArray preAllocatedCountArray
  ,jlong offset)
{
  jlong *preAllocatedNdx = 0;
  jlong *preAllocatedCount = 0;
  try
  {
    if (preAllocatedNdxArray != 0)
    {
      preAllocatedNdx = (jlong *) env->GetPrimitiveArrayCritical(preAllocatedNdxArray, 0);
    }
    if (preAllocatedCountArray != 0)
    {
      preAllocatedCount = (jlong *) env->GetPrimitiveArrayCritical(preAllocatedCountArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyFaces(lowNdx,
                count,
                (RESCUEINT64 *) preAllocatedNdx,
                (RESCUEINT64 *) preAllocatedCount,
                offset);
    if (preAllocatedNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jlong *) preAllocatedNdx, 0);
    }
    if (preAllocatedCountArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedCountArray, (jlong *) preAllocatedCount, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jlong *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedCount != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedCountArray, (jlong *) preAllocatedCount, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jlong *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedCount != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedCountArray, (jlong *) preAllocatedCount, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyFaces");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyFaces23i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint lowNdx
  ,jint count
  ,jintArray preAllocatedNdxArray
  ,jintArray preAllocatedCountArray
  ,jint offset)
{
  jint *preAllocatedNdx = 0;
  jint *preAllocatedCount = 0;
  try
  {
    if (preAllocatedNdxArray != 0)
    {
      preAllocatedNdx = (jint *) env->GetPrimitiveArrayCritical(preAllocatedNdxArray, 0);
    }
    if (preAllocatedCountArray != 0)
    {
      preAllocatedCount = (jint *) env->GetPrimitiveArrayCritical(preAllocatedCountArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyFaces(lowNdx,
                count,
                (RESCUEINT32 *) preAllocatedNdx,
                (RESCUEINT32 *) preAllocatedCount,
                offset);
    if (preAllocatedNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jint *) preAllocatedNdx, 0);
    }
    if (preAllocatedCountArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedCountArray, (jint *) preAllocatedCount, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jint *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedCount != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedCountArray, (jint *) preAllocatedCount, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jint *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (preAllocatedCount != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedCountArray, (jint *) preAllocatedCount, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyFaces");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceVertexTupleCount24
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceVertexTupleCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceVertexTupleCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceArray25
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceArray();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->FaceArrayLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceArray");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceArray25i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint *myReturnCpp = (jint *) myObject->FaceArray(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      int howMany = myObject->FaceArrayLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceArray");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceArrayLength26
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceArrayLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceArrayLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyFaceVertexTuples27
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowNdx
  ,jlong count
  ,jlongArray preAllocatedNdxArray
  ,jlong offset)
{
  jlong *preAllocatedNdx = 0;
  try
  {
    if (preAllocatedNdxArray != 0)
    {
      preAllocatedNdx = (jlong *) env->GetPrimitiveArrayCritical(preAllocatedNdxArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyFaceVertexTuples(lowNdx,
                count,
                (RESCUEINT64 *) preAllocatedNdx,
                offset);
    if (preAllocatedNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jlong *) preAllocatedNdx, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jlong *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jlong *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyFaceVertexTuples");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyFaceVertexTuples27i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint lowNdx
  ,jint count
  ,jintArray preAllocatedNdxArray
  ,jint offset)
{
  jint *preAllocatedNdx = 0;
  try
  {
    if (preAllocatedNdxArray != 0)
    {
      preAllocatedNdx = (jint *) env->GetPrimitiveArrayCritical(preAllocatedNdxArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyFaceVertexTuples(lowNdx,
                count,
                (RESCUEINT32 *) preAllocatedNdx,
                offset);
    if (preAllocatedNdxArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jint *) preAllocatedNdx, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jint *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (preAllocatedNdx != 0)
      {
        env->ReleasePrimitiveArrayCritical(preAllocatedNdxArray, (jint *) preAllocatedNdx, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyFaceVertexTuples");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_SetFaces29
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong faceCountIn
  ,jlongArray faceVertexNdxInArray
  ,jlongArray faceVertexCountInArray
  ,jlong faceVertexTupleCountIn
  ,jlongArray faceArrayInArray)
{
  jlong *faceVertexNdxIn = 0;
  jlong *faceVertexCountIn = 0;
  jlong *faceArrayIn = 0;
  try
  {
    if (faceVertexNdxInArray != 0)
    {
      faceVertexNdxIn = (jlong *) env->GetPrimitiveArrayCritical(faceVertexNdxInArray, 0);
    }
    if (faceVertexCountInArray != 0)
    {
      faceVertexCountIn = (jlong *) env->GetPrimitiveArrayCritical(faceVertexCountInArray, 0);
    }
    if (faceArrayInArray != 0)
    {
      faceArrayIn = (jlong *) env->GetPrimitiveArrayCritical(faceArrayInArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->SetFaces(faceCountIn,
                (RESCUEINT64 *) faceVertexNdxIn,
                (RESCUEINT64 *) faceVertexCountIn,
                faceVertexTupleCountIn,
                (RESCUEINT64 *) faceArrayIn);
    if (faceVertexNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceVertexNdxInArray, (jlong *) faceVertexNdxIn, 0);
    }
    if (faceVertexCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceVertexCountInArray, (jlong *) faceVertexCountIn, 0);
    }
    if (faceArrayInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceArrayInArray, (jlong *) faceArrayIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceVertexNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexNdxInArray, (jlong *) faceVertexNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceVertexCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexCountInArray, (jlong *) faceVertexCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceArrayIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceArrayInArray, (jlong *) faceArrayIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceVertexNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexNdxInArray, (jlong *) faceVertexNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceVertexCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexCountInArray, (jlong *) faceVertexCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceArrayIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceArrayInArray, (jlong *) faceArrayIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_SetFaces");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_SetFaces29i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint faceCountIn
  ,jintArray faceVertexNdxInArray
  ,jintArray faceVertexCountInArray
  ,jint faceVertexTupleCountIn
  ,jintArray faceArrayInArray)
{
  jint *faceVertexNdxIn = 0;
  jint *faceVertexCountIn = 0;
  jint *faceArrayIn = 0;
  try
  {
    if (faceVertexNdxInArray != 0)
    {
      faceVertexNdxIn = (jint *) env->GetPrimitiveArrayCritical(faceVertexNdxInArray, 0);
    }
    if (faceVertexCountInArray != 0)
    {
      faceVertexCountIn = (jint *) env->GetPrimitiveArrayCritical(faceVertexCountInArray, 0);
    }
    if (faceArrayInArray != 0)
    {
      faceArrayIn = (jint *) env->GetPrimitiveArrayCritical(faceArrayInArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->SetFaces(faceCountIn,
                (RESCUEINT32 *) faceVertexNdxIn,
                (RESCUEINT32 *) faceVertexCountIn,
                faceVertexTupleCountIn,
                (RESCUEINT32 *) faceArrayIn);
    if (faceVertexNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceVertexNdxInArray, (jint *) faceVertexNdxIn, 0);
    }
    if (faceVertexCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceVertexCountInArray, (jint *) faceVertexCountIn, 0);
    }
    if (faceArrayInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceArrayInArray, (jint *) faceArrayIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceVertexNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexNdxInArray, (jint *) faceVertexNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceVertexCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexCountInArray, (jint *) faceVertexCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceArrayIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceArrayInArray, (jint *) faceArrayIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceVertexNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexNdxInArray, (jint *) faceVertexNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceVertexCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceVertexCountInArray, (jint *) faceVertexCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceArrayIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceArrayInArray, (jint *) faceArrayIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_SetFaces");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CellCount30
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->CellCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CellCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCellNdx32
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceCellNdx();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCellNdxLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCellNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCellNdx32i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceCellNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->FaceCellNdxLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCellNdx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCellCount33
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceCellCount();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceCellCountLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCellCount");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCellCount33i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceCellCount(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->FaceCellCountLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCellCount");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CellCenterNdx34
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->CellCenterNdx();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->CellCenterNdxLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CellCenterNdx");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CellCenterNdx34i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->CellCenterNdx(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->CellCenterNdxLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CellCenterNdx");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_KLayer35
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->KLayer();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->KLayerLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_KLayer");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_KLayer35i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->KLayer(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT32 howMany = myObject->KLayerLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_KLayer");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCellNdxLength36
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceCellNdxLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCellNdxLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceCellCountLength37
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceCellCountLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceCellCountLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CellCenterNdxLength38
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->CellCenterNdxLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CellCenterNdxLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_KLayerLength39
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->KLayerLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_KLayerLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyCells40
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowNdx
  ,jlong count
  ,jlongArray faceCellNdxArrayArray
  ,jlongArray faceCellCountArrayArray
  ,jlongArray cellCenterNdxArrayArray
  ,jlongArray kLayerArrayArray
  ,jlong offset)
{
  jlong *faceCellNdxArray = 0;
  jlong *faceCellCountArray = 0;
  jlong *cellCenterNdxArray = 0;
  jlong *kLayerArray = 0;
  try
  {
    if (faceCellNdxArrayArray != 0)
    {
      faceCellNdxArray = (jlong *) env->GetPrimitiveArrayCritical(faceCellNdxArrayArray, 0);
    }
    if (faceCellCountArrayArray != 0)
    {
      faceCellCountArray = (jlong *) env->GetPrimitiveArrayCritical(faceCellCountArrayArray, 0);
    }
    if (cellCenterNdxArrayArray != 0)
    {
      cellCenterNdxArray = (jlong *) env->GetPrimitiveArrayCritical(cellCenterNdxArrayArray, 0);
    }
    if (kLayerArrayArray != 0)
    {
      kLayerArray = (jlong *) env->GetPrimitiveArrayCritical(kLayerArrayArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyCells(lowNdx,
                count,
                (RESCUEINT64 *) faceCellNdxArray,
                (RESCUEINT64 *) faceCellCountArray,
                (RESCUEINT64 *) cellCenterNdxArray,
                (RESCUEINT64 *) kLayerArray,
                offset);
    if (faceCellNdxArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellNdxArrayArray, (jlong *) faceCellNdxArray, 0);
    }
    if (faceCellCountArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellCountArrayArray, (jlong *) faceCellCountArray, 0);
    }
    if (cellCenterNdxArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellCenterNdxArrayArray, (jlong *) cellCenterNdxArray, 0);
    }
    if (kLayerArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(kLayerArrayArray, (jlong *) kLayerArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceCellNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxArrayArray, (jlong *) faceCellNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountArrayArray, (jlong *) faceCellCountArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxArrayArray, (jlong *) cellCenterNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerArrayArray, (jlong *) kLayerArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceCellNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxArrayArray, (jlong *) faceCellNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountArrayArray, (jlong *) faceCellCountArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxArrayArray, (jlong *) cellCenterNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerArrayArray, (jlong *) kLayerArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyCells");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyCells40i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint lowNdx
  ,jint count
  ,jintArray faceCellNdxArrayArray
  ,jintArray faceCellCountArrayArray
  ,jintArray cellCenterNdxArrayArray
  ,jintArray kLayerArrayArray
  ,jint offset)
{
  jint *faceCellNdxArray = 0;
  jint *faceCellCountArray = 0;
  jint *cellCenterNdxArray = 0;
  jint *kLayerArray = 0;
  try
  {
    if (faceCellNdxArrayArray != 0)
    {
      faceCellNdxArray = (jint *) env->GetPrimitiveArrayCritical(faceCellNdxArrayArray, 0);
    }
    if (faceCellCountArrayArray != 0)
    {
      faceCellCountArray = (jint *) env->GetPrimitiveArrayCritical(faceCellCountArrayArray, 0);
    }
    if (cellCenterNdxArrayArray != 0)
    {
      cellCenterNdxArray = (jint *) env->GetPrimitiveArrayCritical(cellCenterNdxArrayArray, 0);
    }
    if (kLayerArrayArray != 0)
    {
      kLayerArray = (jint *) env->GetPrimitiveArrayCritical(kLayerArrayArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyCells(lowNdx,
                count,
                (RESCUEINT32 *) faceCellNdxArray,
                (RESCUEINT32 *) faceCellCountArray,
                (RESCUEINT32 *) cellCenterNdxArray,
                (RESCUEINT32 *) kLayerArray,
                offset);
    if (faceCellNdxArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellNdxArrayArray, (jint *) faceCellNdxArray, 0);
    }
    if (faceCellCountArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellCountArrayArray, (jint *) faceCellCountArray, 0);
    }
    if (cellCenterNdxArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellCenterNdxArrayArray, (jint *) cellCenterNdxArray, 0);
    }
    if (kLayerArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(kLayerArrayArray, (jint *) kLayerArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceCellNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxArrayArray, (jint *) faceCellNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountArrayArray, (jint *) faceCellCountArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxArrayArray, (jint *) cellCenterNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerArrayArray, (jint *) kLayerArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceCellNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxArrayArray, (jint *) faceCellNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountArrayArray, (jint *) faceCellCountArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxArrayArray, (jint *) cellCenterNdxArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerArrayArray, (jint *) kLayerArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyCells");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceListCount41
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceListCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceListCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceList42
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong * myReturnCpp = (jlong *) myObject->FaceList();
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      RESCUEINT64 howMany = myObject->FaceListLength64();
      jlongArray myReturn = env->NewLongArray(howMany);
      env->SetLongArrayRegion(myReturn, 0, howMany, myReturnCpp);
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceList");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jintArray JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceList42i
  (JNIEnv *env, jobject obj, jlong nativeNdx, jboolean throwIfTooBig)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jint * myReturnCpp = (jint *) myObject->FaceList(throwIfTooBig);
    if (myReturnCpp == 0)
    {
      return 0;
    }
    else
    {
      jlong howMany = myObject->FaceListLength64();
      jintArray myReturn = env->NewIntArray(howMany);
      env->SetIntArrayRegion(myReturn, 0, howMany, myReturnCpp);
      delete [] myReturnCpp;
      return myReturn;
    }
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceList");
    return (jintArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_FaceListLength43
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    jlong myReturn = myObject->FaceListLength64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_FaceListLength");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyCellFaceTuples44
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong lowNdx
  ,jlong count
  ,jlongArray faceListArrayArray
  ,jlong offset)
{
  jlong *faceListArray = 0;
  try
  {
    if (faceListArrayArray != 0)
    {
      faceListArray = (jlong *) env->GetPrimitiveArrayCritical(faceListArrayArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyCellFaceTuples(lowNdx,
                count,
                (RESCUEINT64 *) faceListArray,
                offset);
    if (faceListArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceListArrayArray, (jlong *) faceListArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceListArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListArrayArray, (jlong *) faceListArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceListArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListArrayArray, (jlong *) faceListArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyCellFaceTuples");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_CopyCellFaceTuples44i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint lowNdx
  ,jint count
  ,jintArray faceListArrayArray
  ,jint offset)
{
  jint *faceListArray = 0;
  try
  {
    if (faceListArrayArray != 0)
    {
      faceListArray = (jint *) env->GetPrimitiveArrayCritical(faceListArrayArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->CopyCellFaceTuples(lowNdx,
                count,
                (RESCUEINT32 *) faceListArray,
                offset);
    if (faceListArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceListArrayArray, (jint *) faceListArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceListArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListArrayArray, (jint *) faceListArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceListArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListArrayArray, (jint *) faceListArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_CopyCellFaceTuples");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_SetCells46
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong cellCountIn
  ,jlongArray faceCellNdxInArray
  ,jlongArray faceCellCountInArray
  ,jlongArray cellCenterNdxInArray
  ,jlongArray kLayerInArray
  ,jlong faceListCountIn
  ,jlongArray faceListInArray)
{
  jlong *faceCellNdxIn = 0;
  jlong *faceCellCountIn = 0;
  jlong *cellCenterNdxIn = 0;
  jlong *kLayerIn = 0;
  jlong *faceListIn = 0;
  try
  {
    if (faceCellNdxInArray != 0)
    {
      faceCellNdxIn = (jlong *) env->GetPrimitiveArrayCritical(faceCellNdxInArray, 0);
    }
    if (faceCellCountInArray != 0)
    {
      faceCellCountIn = (jlong *) env->GetPrimitiveArrayCritical(faceCellCountInArray, 0);
    }
    if (cellCenterNdxInArray != 0)
    {
      cellCenterNdxIn = (jlong *) env->GetPrimitiveArrayCritical(cellCenterNdxInArray, 0);
    }
    if (kLayerInArray != 0)
    {
      kLayerIn = (jlong *) env->GetPrimitiveArrayCritical(kLayerInArray, 0);
    }
    if (faceListInArray != 0)
    {
      faceListIn = (jlong *) env->GetPrimitiveArrayCritical(faceListInArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->SetCells(cellCountIn,
                (RESCUEINT64 *) faceCellNdxIn,
                (RESCUEINT64 *) faceCellCountIn,
                (RESCUEINT64 *) cellCenterNdxIn,
                (RESCUEINT64 *) kLayerIn,
                faceListCountIn,
                (RESCUEINT64 *) faceListIn);
    if (faceCellNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellNdxInArray, (jlong *) faceCellNdxIn, 0);
    }
    if (faceCellCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellCountInArray, (jlong *) faceCellCountIn, 0);
    }
    if (cellCenterNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellCenterNdxInArray, (jlong *) cellCenterNdxIn, 0);
    }
    if (kLayerInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(kLayerInArray, (jlong *) kLayerIn, 0);
    }
    if (faceListInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceListInArray, (jlong *) faceListIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceCellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxInArray, (jlong *) faceCellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountInArray, (jlong *) faceCellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxInArray, (jlong *) cellCenterNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerInArray, (jlong *) kLayerIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceListIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListInArray, (jlong *) faceListIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceCellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxInArray, (jlong *) faceCellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountInArray, (jlong *) faceCellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxInArray, (jlong *) cellCenterNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerInArray, (jlong *) kLayerIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceListIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListInArray, (jlong *) faceListIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_SetCells");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueUnstructuredGrid_SetCells46i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint cellCountIn
  ,jintArray faceCellNdxInArray
  ,jintArray faceCellCountInArray
  ,jintArray cellCenterNdxInArray
  ,jintArray kLayerInArray
  ,jint faceListCountIn
  ,jintArray faceListInArray)
{
  jint *faceCellNdxIn = 0;
  jint *faceCellCountIn = 0;
  jint *cellCenterNdxIn = 0;
  jint *kLayerIn = 0;
  jint *faceListIn = 0;
  try
  {
    if (faceCellNdxInArray != 0)
    {
      faceCellNdxIn = (jint *) env->GetPrimitiveArrayCritical(faceCellNdxInArray, 0);
    }
    if (faceCellCountInArray != 0)
    {
      faceCellCountIn = (jint *) env->GetPrimitiveArrayCritical(faceCellCountInArray, 0);
    }
    if (cellCenterNdxInArray != 0)
    {
      cellCenterNdxIn = (jint *) env->GetPrimitiveArrayCritical(cellCenterNdxInArray, 0);
    }
    if (kLayerInArray != 0)
    {
      kLayerIn = (jint *) env->GetPrimitiveArrayCritical(kLayerInArray, 0);
    }
    if (faceListInArray != 0)
    {
      faceListIn = (jint *) env->GetPrimitiveArrayCritical(faceListInArray, 0);
    }
    RescueUnstructuredGrid *myObject = (RescueUnstructuredGrid *) nativeNdx;
    myObject->SetCells(cellCountIn,
                (RESCUEINT32 *) faceCellNdxIn,
                (RESCUEINT32 *) faceCellCountIn,
                (RESCUEINT32 *) cellCenterNdxIn,
                (RESCUEINT32 *) kLayerIn,
                faceListCountIn,
                (RESCUEINT32 *) faceListIn);
    if (faceCellNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellNdxInArray, (jint *) faceCellNdxIn, 0);
    }
    if (faceCellCountInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceCellCountInArray, (jint *) faceCellCountIn, 0);
    }
    if (cellCenterNdxInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(cellCenterNdxInArray, (jint *) cellCenterNdxIn, 0);
    }
    if (kLayerInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(kLayerInArray, (jint *) kLayerIn, 0);
    }
    if (faceListInArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(faceListInArray, (jint *) faceListIn, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (faceCellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxInArray, (jint *) faceCellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountInArray, (jint *) faceCellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxInArray, (jint *) cellCenterNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerInArray, (jint *) kLayerIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceListIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListInArray, (jint *) faceListIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (faceCellNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellNdxInArray, (jint *) faceCellNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceCellCountIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceCellCountInArray, (jint *) faceCellCountIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (cellCenterNdxIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(cellCenterNdxInArray, (jint *) cellCenterNdxIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (kLayerIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(kLayerInArray, (jint *) kLayerIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    try
    {
      if (faceListIn != 0)
      {
        env->ReleasePrimitiveArrayCritical(faceListInArray, (jint *) faceListIn, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUnstructuredGrid_SetCells");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueVertex_Create_1RescueVertex0  (JNIEnv *env, jobject obj
  ,jstring nameStr
  ,jlong existingCoordinateSystemNdx
  ,jdouble xIn
  ,jdouble yIn
  ,jdouble zIn)
{
  try
  {
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    RescueCoordinateSystem * existingCoordinateSystem = (RescueCoordinateSystem *) existingCoordinateSystemNdx;
    RescueVertex *myReturn = new RescueVertex((char *) name,
                (RescueCoordinateSystem *) existingCoordinateSystem,
                (double) xIn,
                (double) yIn,
                (double) zIn);
    env->ReleaseStringUTFChars(nameStr, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_RescueVertex");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueVertex_Dimensions1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    int myReturn = myObject->Dimensions();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_Dimensions");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueVertex_VertexName2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    RCHString * myReturn = myObject->VertexName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_VertexName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueVertex_SetVertexName3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newNameStr)
{
  try
  {
    jboolean newNameBool;
    const char *newName = env->GetStringUTFChars(newNameStr, &newNameBool);
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    myObject->SetVertexName((char *) newName);
    env->ReleaseStringUTFChars(newNameStr, newName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_SetVertexName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueVertex_CoordinateSystem4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    RescueCoordinateSystem * myReturn = myObject->CoordinateSystem();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_CoordinateSystem");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueVertex_SetXYZ5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat xIn
  ,jfloat yIn
  ,jfloat zIn)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    myObject->SetXYZ((float) xIn,
                (float) yIn,
                (float) zIn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_SetXYZ");
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueVertex_X6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    double myReturn = myObject->X();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_X");
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueVertex_Y7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    double myReturn = myObject->Y();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_Y");
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueVertex_Z8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    double myReturn = myObject->Z();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_Z");
    return (jdouble) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueVertex_IsOfType9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueVertex *myObject = (RescueVertex *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueVertex_Delete_1RescueVertex
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueVertex *myObj = (RescueVertex *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueVertex_~RescueVertex");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellbore_Delete_1RescueWellbore
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWellbore *myObj = (RescueWellbore *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_~RescueWellbore");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_Create_1RescueWellbore1  (JNIEnv *env, jobject obj
  ,jint orientationInt
  ,jlong parentModelNdx
  ,jstring wellboreNameStr
  ,jfloat missingValue
  ,jlong i_lowbound
  ,jlong i_count)
{
  try
  {
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueModel * parentModel = (RescueModel *) parentModelNdx;
    jboolean wellboreNameBool;
    const char *wellboreName = env->GetStringUTFChars(wellboreNameStr, &wellboreNameBool);
    RescueWellbore *myReturn = new RescueWellbore((RescueCoordinateSystem::Orientation) orientation,
                (RescueModel *) parentModel,
                (char *) wellboreName,
                (float) missingValue,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count);
    env->ReleaseStringUTFChars(wellboreNameStr, wellboreName);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_RescueWellbore");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_Create_1RescueWellbore2  (JNIEnv *env, jobject obj
  ,jint orientationInt
  ,jlong parentModelNdx
  ,jstring wellboreNameStr
  ,jfloat missingValue
  ,jfloatArray quadrupletArrayArray
  ,jlong i_lowbound
  ,jlong i_count)
{
  jfloat *quadrupletArray = 0;
  try
  {
    RescueCoordinateSystem::Orientation orientation = (RescueCoordinateSystem::Orientation) orientationInt;
    RescueModel * parentModel = (RescueModel *) parentModelNdx;
    jboolean wellboreNameBool;
    const char *wellboreName = env->GetStringUTFChars(wellboreNameStr, &wellboreNameBool);
    if (quadrupletArrayArray != 0)
    {
      quadrupletArray = (jfloat *) env->GetPrimitiveArrayCritical(quadrupletArrayArray, 0);
    }
    RescueWellbore *myReturn = new RescueWellbore((RescueCoordinateSystem::Orientation) orientation,
                (RescueModel *) parentModel,
                (char *) wellboreName,
                (float) missingValue,
                (float *) quadrupletArray,
                (RESCUEINT64) i_lowbound,
                (RESCUEINT64) i_count);
    env->ReleaseStringUTFChars(wellboreNameStr, wellboreName);
    if (quadrupletArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(quadrupletArrayArray, (jfloat *) quadrupletArray, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (quadrupletArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(quadrupletArrayArray, (jfloat *) quadrupletArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_RescueWellbore");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueWellbore_WellboreName3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RCHString * myReturn = myObject->WellboreName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_WellboreName");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellbore_SetWellboreName4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jstring newNameStr)
{
  try
  {
    jboolean newNameBool;
    const char *newName = env->GetStringUTFChars(newNameStr, &newNameBool);
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    myObject->SetWellboreName((char *) newName);
    env->ReleaseStringUTFChars(newNameStr, newName);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_SetWellboreName");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_ParentModel5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_WellboreGrid6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RescueGrid * myReturn = myObject->WellboreGrid();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_WellboreGrid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_WellboreGeometry7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RescueQuadrupletArray * myReturn = myObject->WellboreGeometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_WellboreGeometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_WellboreSamplingCount8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RESCUEINT64 myReturn = (RESCUEINT64) myObject->WellboreSamplingCount64();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_WellboreSamplingCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_NthRescueWellboreSampling9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RescueWellboreSampling * myReturn = myObject->NthRescueWellboreSampling((RESCUEINT64) zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_NthRescueWellboreSampling");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_WellboreSamplingIdentifiedBy17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RescueWellboreSampling * myReturn = myObject->WellboreSamplingIdentifiedBy((RESCUEINT64) identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_NthRescueWellboreSampling");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellbore_DropRescueWellboreSampling10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueWellboreSampling * unitToDrop = (RescueWellboreSampling *) unitToDropNdx;
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueWellboreSampling((RescueWellboreSampling *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_DropRescueWellboreSampling");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_WellboreSurfaceCount11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    jlong myReturn = myObject->WellboreSurfaceCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_WellboreSurfaceCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_NthRescueWellboreSurface12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RescueWellboreSurface * myReturn = myObject->NthRescueWellboreSurface(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_NthRescueWellboreSurface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellbore_DropRescueWellboreSurface13
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong surfaceToDropNdx)
{
  try
  {
    RescueWellboreSurface * surfaceToDrop = (RescueWellboreSurface *) surfaceToDropNdx;
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueWellboreSurface((RescueWellboreSurface *) surfaceToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_DropRescueWellboreSurface");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellbore_CellIntersections14
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    cBagRescueWellboreCell * myReturn = myObject->CellIntersections();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_CellIntersections");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellbore_AnyFileTruncated15
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellbore_IsOfType16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWellbore *myObject = (RescueWellbore *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellbore_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreCell_Wellbore0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreCell *myObject = (RescueWellboreCell *) nativeNdx;
    RescueWellbore * myReturn = myObject->Wellbore();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreCell_Wellbore");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreCell_Geometry1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreCell *myObject = (RescueWellboreCell *) nativeNdx;
    RescueGeometry * myReturn = myObject->Geometry();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreCell_Geometry");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreCell_CellIndex3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jlongArray returnArrayArray
  ,jlong returnArraySize)
{
  jlong *returnArray = 0;
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    if (returnArrayArray != 0)
    {
      returnArray = (jlong *) env->GetPrimitiveArrayCritical(returnArrayArray, 0);
    }
    RescueWellboreCell *myObject = (RescueWellboreCell *) nativeNdx;
    myObject->CellIndex((RescueGeometry *) geometry,
                (RESCUEINT64 *) returnArray,
                (RESCUEINT64) returnArraySize);
    if (returnArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(returnArrayArray, (jlong *) returnArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jlong *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jlong *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreCell_CellIndex");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreCell_CellIndex3i
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong geometryNdx
  ,jintArray returnArrayArray
  ,jint returnArraySize, jboolean throwIfTooBig)
{
  jint *returnArray = 0;
  try
  {
    RescueGeometry * geometry = (RescueGeometry *) geometryNdx;
    if (returnArrayArray != 0)
    {
      returnArray = (jint *) env->GetPrimitiveArrayCritical(returnArrayArray, 0);
    }
    RescueWellboreCell *myObject = (RescueWellboreCell *) nativeNdx;
    myObject->CellIndex((RescueGeometry *) geometry,
                (RESCUEINT32 *) returnArray,
                returnArraySize, (bool) throwIfTooBig);
    if (returnArrayArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
    }
  }
  catch (char *errorText)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    try
    {
      if (returnArray != 0)
      {
        env->ReleasePrimitiveArrayCritical(returnArrayArray, (jint *) returnArray, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreCell_CellIndex");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreCell_IsOfType4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWellboreCell *myObject = (RescueWellboreCell *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreCell_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreCell_Delete_1RescueWellboreCell
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWellboreCell *myObj = (RescueWellboreCell *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreCell_~RescueWellboreCell");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_Create_1RescueWellboreProperty0  (JNIEnv *env, jobject obj
  ,jlong parentSamplingNdx
  ,jstring propertyNameStr
  ,jstring propertyTypeStr
  ,jstring unitOfMeasureStr
  ,jfloat nullValue
  ,jfloatArray valuesArray)
{
  jfloat *values = 0;
  try
  {
    RescueWellboreSampling * parentSampling = (RescueWellboreSampling *) parentSamplingNdx;
    jboolean propertyNameBool;
    const char *propertyName = env->GetStringUTFChars(propertyNameStr, &propertyNameBool);
    jboolean propertyTypeBool;
    const char *propertyType = env->GetStringUTFChars(propertyTypeStr, &propertyTypeBool);
    jboolean unitOfMeasureBool;
    const char *unitOfMeasure = env->GetStringUTFChars(unitOfMeasureStr, &unitOfMeasureBool);
    if (valuesArray != 0)
    {
      values = (jfloat *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueWellboreProperty *myReturn = new RescueWellboreProperty((RescueWellboreSampling *) parentSampling,
                (char *) propertyName,
                (char *) propertyType,
                (char *) unitOfMeasure,
                (float) nullValue,
                (float *) 0);
    env->ReleaseStringUTFChars(propertyNameStr, propertyName);
    env->ReleaseStringUTFChars(propertyTypeStr, propertyType);
    env->ReleaseStringUTFChars(unitOfMeasureStr, unitOfMeasure);
    if (valuesArray != 0)
    {
      ((RescueArrayFloat *)  myReturn->Data())->SetValue(nullValue, (float *) values);
      env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_RescueWellboreProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_Create_1RescueWellboreProperty1  (JNIEnv *env, jobject obj
  ,jlong parentSamplingNdx
  ,jstring propertyNameStr
  ,jstring propertyTypeStr
  ,jstring unitOfMeasureStr
  ,jint nullValue
  ,jintArray valuesArray)
{
  jint *values = 0;
  try
  {
    RescueWellboreSampling * parentSampling = (RescueWellboreSampling *) parentSamplingNdx;
    jboolean propertyNameBool;
    const char *propertyName = env->GetStringUTFChars(propertyNameStr, &propertyNameBool);
    jboolean propertyTypeBool;
    const char *propertyType = env->GetStringUTFChars(propertyTypeStr, &propertyTypeBool);
    jboolean unitOfMeasureBool;
    const char *unitOfMeasure = env->GetStringUTFChars(unitOfMeasureStr, &unitOfMeasureBool);
    if (valuesArray != 0)
    {
      values = (jint *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueWellboreProperty *myReturn = new RescueWellboreProperty((RescueWellboreSampling *) parentSampling,
                (char *) propertyName,
                (char *) propertyType,
                (char *) unitOfMeasure,
                (RESCUEINT32) nullValue,
                (RESCUEINT32 *) 0);
    env->ReleaseStringUTFChars(propertyNameStr, propertyName);
    env->ReleaseStringUTFChars(propertyTypeStr, propertyType);
    env->ReleaseStringUTFChars(unitOfMeasureStr, unitOfMeasure);
    if (valuesArray != 0)
    {
      ((RescueArrayInt *)  myReturn->Data())->SetValue(nullValue, (RESCUEINT32 *) values);
      env->ReleasePrimitiveArrayCritical(valuesArray, (jint *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jint *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_RescueWellboreProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_Create_1RescueWellboreProperty2  (JNIEnv *env, jobject obj
  ,jlong parentSamplingNdx
  ,jstring propertyNameStr
  ,jstring propertyTypeStr
  ,jstring unitOfMeasureStr
  ,jbyte nullValueJ
  ,jlong lookupInNdx
  ,jbyteArray valuesArray)
{
  jbyte *values = 0;
  try
  {
    RescueWellboreSampling * parentSampling = (RescueWellboreSampling *) parentSamplingNdx;
    jboolean propertyNameBool;
    const char *propertyName = env->GetStringUTFChars(propertyNameStr, &propertyNameBool);
    jboolean propertyTypeBool;
    const char *propertyType = env->GetStringUTFChars(propertyTypeStr, &propertyTypeBool);
    jboolean unitOfMeasureBool;
    const char *unitOfMeasure = env->GetStringUTFChars(unitOfMeasureStr, &unitOfMeasureBool);
    unsigned char nullValue = (unsigned char) nullValueJ;
    RescueLookup * lookupIn = (RescueLookup *) lookupInNdx;
    if (valuesArray != 0)
    {
      values = (jbyte *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueWellboreProperty *myReturn = new RescueWellboreProperty((RescueWellboreSampling *) parentSampling,
                (char *) propertyName,
                (char *) propertyType,
                (char *) unitOfMeasure,
                (unsigned char) nullValue,
                (RescueLookup *) lookupIn,
                (unsigned char *) 0);
    env->ReleaseStringUTFChars(propertyNameStr, propertyName);
    env->ReleaseStringUTFChars(propertyTypeStr, propertyType);
    env->ReleaseStringUTFChars(unitOfMeasureStr, unitOfMeasure);
    if (valuesArray != 0)
    {
      ((RescueArrayByte *)  myReturn->Data())->SetValue(nullValue, (unsigned char *) values);
      env->ReleasePrimitiveArrayCritical(valuesArray, (jbyte *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jbyte *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_RescueWellboreProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_Create_1RescueWellboreProperty3  (JNIEnv *env, jobject obj
  ,jlong parentSamplingNdx
  ,jstring propertyNameStr
  ,jstring propertyTypeStr
  ,jstring unitOfMeasureStr
  ,jchar nullValueJ
  ,jlong lookupInNdx
  ,jcharArray valuesArray)
{
  jchar *values = 0;
  try
  {
    RescueWellboreSampling * parentSampling = (RescueWellboreSampling *) parentSamplingNdx;
    jboolean propertyNameBool;
    const char *propertyName = env->GetStringUTFChars(propertyNameStr, &propertyNameBool);
    jboolean propertyTypeBool;
    const char *propertyType = env->GetStringUTFChars(propertyTypeStr, &propertyTypeBool);
    jboolean unitOfMeasureBool;
    const char *unitOfMeasure = env->GetStringUTFChars(unitOfMeasureStr, &unitOfMeasureBool);
    unsigned short nullValue = (unsigned short) nullValueJ;
    RescueLookup * lookupIn = (RescueLookup *) lookupInNdx;
    if (valuesArray != 0)
    {
      values = (jchar *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueWellboreProperty *myReturn = new RescueWellboreProperty((RescueWellboreSampling *) parentSampling,
                (char *) propertyName,
                (char *) propertyType,
                (char *) unitOfMeasure,
                (unsigned short) nullValue,
                (RescueLookup *) lookupIn,
                (unsigned short *) 0);
    env->ReleaseStringUTFChars(propertyNameStr, propertyName);
    env->ReleaseStringUTFChars(propertyTypeStr, propertyType);
    env->ReleaseStringUTFChars(unitOfMeasureStr, unitOfMeasure);
    if (valuesArray != 0)
    {
      ((RescueArrayShort *)  myReturn->Data())->SetValue(nullValue, (unsigned short *) values);
      env->ReleasePrimitiveArrayCritical(valuesArray, (jchar *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jchar *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_RescueWellboreProperty");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_Delete_1RescueWellboreProperty
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWellboreProperty *myObj = (RescueWellboreProperty *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_~RescueWellboreProperty");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_ParentWellbore5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreProperty *myObject = (RescueWellboreProperty *) nativeNdx;
    RescueWellbore * myReturn = myObject->ParentWellbore();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_ParentWellbore");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_ParentWellboreSampling6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreProperty *myObject = (RescueWellboreProperty *) nativeNdx;
    RescueWellboreSampling * myReturn = myObject->ParentWellboreSampling();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_ParentWellboreSampling");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_Data7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreProperty *myObject = (RescueWellboreProperty *) nativeNdx;
    RescueArray * myReturn = myObject->Data();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_Data");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_AnyFileTruncated8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreProperty *myObject = (RescueWellboreProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreProperty_IsOfType9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWellboreProperty *myObject = (RescueWellboreProperty *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreProperty_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_Delete_1RescueWellboreSampling
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWellboreSampling *myObj = (RescueWellboreSampling *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_~RescueWellboreSampling");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_Create_1RescueWellboreSampling1  (JNIEnv *env, jobject obj
  ,jlong parentWellboreNdx
  ,jlong count
  ,jfloat origin
  ,jfloat step)
{
  try
  {
    RescueWellbore * parentWellbore = (RescueWellbore *) parentWellboreNdx;
    RescueWellboreSampling *myReturn = new RescueWellboreSampling((RescueWellbore *) parentWellbore,
                count,
                (float) origin,
                (float) step);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_RescueWellboreSampling");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_Create_1RescueWellboreSampling2  (JNIEnv *env, jobject obj
  ,jlong parentWellboreNdx
  ,jlong count
  ,jfloatArray valuesArray)
{
  jfloat *values = 0;
  try
  {
    RescueWellbore * parentWellbore = (RescueWellbore *) parentWellboreNdx;
    if (valuesArray != 0)
    {
      values = (jfloat *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueWellboreSampling *myReturn = new RescueWellboreSampling((RescueWellbore *) parentWellbore,
                count,
                (float *) (valuesArray == 0) ? 0 : copyFloatArray(values, env->GetArrayLength(valuesArray)));
    if (valuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    try
    {
      if (values != 0)
      {
        env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
      }
    }
    catch (...)
    {
      //intentionally blank
    }
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_RescueWellboreSampling");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_ParentWellbore3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RescueWellbore * myReturn = myObject->ParentWellbore();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_ParentWellbore");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_TimeStamp4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RCHString * myReturn = myObject->TimeStamp();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_TimeStamp");
    return (jstring) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_SampleGrid5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RescueGrid * myReturn = myObject->SampleGrid();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_SampleGrid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_Count6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    jlong myReturn = myObject->Count64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_Count");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_WellborePropertyCount7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    jlong myReturn = myObject->WellborePropertyCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_WellborePropertyCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_NthRescueWellboreProperty8
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RescueWellboreProperty * myReturn = myObject->NthRescueWellboreProperty(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_NthRescueWellboreProperty");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_DropRescueWellboreProperty9
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong unitToDropNdx)
{
  try
  {
    RescueWellboreProperty * unitToDrop = (RescueWellboreProperty *) unitToDropNdx;
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueWellboreProperty((RescueWellboreProperty *) unitToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_DropRescueWellboreProperty");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_MeasuredDepthAt10
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ndx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    float myReturn = myObject->MeasuredDepthAt(ndx);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_MeasuredDepthAt");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_AnyFileTruncated11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RESCUEBOOL myReturn = myObject->AnyFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_AnyFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_IsOfType12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_SetValues13
  (JNIEnv *env, jobject obj, jlong nativeNdx, jfloatArray valuesArray)
{
  try
  {
    jfloat *values = 0;
    if (valuesArray != 0)
    {
      values = (jfloat *) env->GetPrimitiveArrayCritical(valuesArray, 0);
    }
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;
    myObject->SetValues((float *) (valuesArray == 0) ? 0 : copyFloatArray(values, env->GetArrayLength(valuesArray))); 
    if (valuesArray != 0)
    {
      env->ReleasePrimitiveArrayCritical(valuesArray, (jfloat *) values, 0);
    }

  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSampling_IsOfType");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSampling_PropertyDescribedBy14
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring nameStr, jstring typeStr, jstring uomStr)
{
  try
  {
    RescueWellboreProperty *myReturn = 0;
    RescueWellboreSampling *myObject = (RescueWellboreSampling *) nativeNdx;

    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameStr, &nameBool);
    jboolean typeBool;
    const char *type = env->GetStringUTFChars(typeStr, &typeBool);
    jboolean uomBool;
    const char *uom = env->GetStringUTFChars(uomStr, &uomBool);

    myReturn = myObject->PropertyDescribedBy(name, type, uom);

    env->ReleaseStringUTFChars(nameStr, name);
    env->ReleaseStringUTFChars(typeStr, type);
    env->ReleaseStringUTFChars(uomStr, uom);

    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueArray_Grid");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_Create_1RescueWellboreSurface0  (JNIEnv *env, jobject obj
  ,jlong wellboreInNdx
  ,jlong surfaceInNdx
  ,jfloat uIn
  ,jfloat vIn
  ,jfloat mdIn)
{
  try
  {
    RescueWellbore * wellboreIn = (RescueWellbore *) wellboreInNdx;
    RescueIJSurface * surfaceIn = (RescueIJSurface *) surfaceInNdx;
    RescueWellboreSurface *myReturn = new RescueWellboreSurface((RescueWellbore *) wellboreIn,
                (RescueIJSurface *) surfaceIn,
                (float) uIn,
                (float) vIn,
                (float) mdIn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_RescueWellboreSurface");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_Wellbore1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSurface *myObject = (RescueWellboreSurface *) nativeNdx;
    RescueWellbore * myReturn = myObject->Wellbore();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_Wellbore");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_Surface2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSurface *myObject = (RescueWellboreSurface *) nativeNdx;
    RescueIJSurface * myReturn = myObject->Surface();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_Surface");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_U3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSurface *myObject = (RescueWellboreSurface *) nativeNdx;
    float myReturn = myObject->U();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_U");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_V4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSurface *myObject = (RescueWellboreSurface *) nativeNdx;
    float myReturn = myObject->V();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_V");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_MD5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWellboreSurface *myObject = (RescueWellboreSurface *) nativeNdx;
    float myReturn = myObject->MD();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_MD");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_IsOfType6
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWellboreSurface *myObject = (RescueWellboreSurface *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWellboreSurface_Delete_1RescueWellboreSurface
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWellboreSurface *myObj = (RescueWellboreSurface *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWellboreSurface_~RescueWellboreSurface");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWireframe_Delete_1RescueWireframe
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWireframe *myObj = (RescueWireframe *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_~RescueWireframe");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_PolyLineCount1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->PolyLineCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_PolyLineCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_VertexCount2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->VertexCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_VertexCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_EdgeSetCount3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->EdgeSetCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_EdgeSetCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_TrimLoopCount4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->TrimLoopCount64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_TrimLoopCount");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_Owner5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueWireframeOwner * myReturn = myObject->Owner();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Owner");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_IsWireframeLoaded6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsWireframeLoaded();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_IsWireframeLoaded");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_LoadWireframe7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->LoadWireframe();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_LoadWireframe");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWireframe_DeleteWireframe8
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    myObject->DeleteWireframe();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_DeleteWireframe");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_IsDeleted9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsDeleted();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_IsDeleted");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_WireframeFileTruncated10
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->WireframeFileTruncated();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_WireframeFileTruncated");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_ParentModel11
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_WireframeVersion12
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jboolean reloadBool)
{
  try
  {
    RESCUEBOOL reload = ((reloadBool == JNI_TRUE) ? TRUE : FALSE);
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->WireframeVersion((RESCUEBOOL) reload);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_WireframeVersion");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_WireframeFileSize13
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->WireframeFileSize();
    return (jint) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_WireframeFileSize");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_TrimVertexLocatedBy14
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jfloat x
  ,jfloat y
  ,jfloat z)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->TrimVertexLocatedBy((float) x,
                (float) y,
                (float) z);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_TrimVertexLocatedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_PolyLineBetween15
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong end1Ndx
  ,jlong end2Ndx)
{
  try
  {
    RescueTrimVertex * end1 = (RescueTrimVertex *) end1Ndx;
    RescueTrimVertex * end2 = (RescueTrimVertex *) end2Ndx;
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescuePolyLine * myReturn = myObject->PolyLineBetween((RescueTrimVertex *) end1,
                (RescueTrimVertex *) end2);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_PolyLineBetween");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_IsOfType16
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_NthRescuePolyLine17
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescuePolyLine * myReturn = myObject->NthRescuePolyLine(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_NthRescuePolyLine");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_NthRescueTrimVertex18
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->NthRescueTrimVertex(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_NthRescueTrimVertex");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_NthRescueEdgeSet19
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueEdgeSet * myReturn = myObject->NthRescueEdgeSet(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_NthRescueEdgeSet");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_NthRescueTrimLoop20
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong zeroBasedOrdinal)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueTrimLoop * myReturn = myObject->NthRescueTrimLoop(zeroBasedOrdinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_NthRescueTrimLoop");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_DropRescuePolyLine21
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong polyLineToDropNdx)
{
  try
  {
    RescuePolyLine * polyLineToDrop = (RescuePolyLine *) polyLineToDropNdx;
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescuePolyLine((RescuePolyLine *) polyLineToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_DropRescuePolyLine");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_DropRescueTrimVertex22
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong trimVertexToDropNdx)
{
  try
  {
    RescueTrimVertex * trimVertexToDrop = (RescueTrimVertex *) trimVertexToDropNdx;
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueTrimVertex((RescueTrimVertex *) trimVertexToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_DropRescueTrimVertex");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_DropRescueEdgeSet23
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong edgeSetToDropNdx)
{
  try
  {
    RescueEdgeSet * edgeSetToDrop = (RescueEdgeSet *) edgeSetToDropNdx;
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueEdgeSet((RescueEdgeSet *) edgeSetToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_DropRescueEdgeSet");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_DropRescueTrimLoop24
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong trimLoopToDropNdx)
{
  try
  {
    RescueTrimLoop * trimLoopToDrop = (RescueTrimLoop *) trimLoopToDropNdx;
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->DropRescueTrimLoop((RescueTrimLoop *) trimLoopToDrop);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_DropRescueTrimLoop");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_PolyLineIdentifiedBy25
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescuePolyLine * myReturn = myObject->PolyLineIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_PolyLineIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_TrimVertexIdentifiedBy26
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueTrimVertex * myReturn = myObject->TrimVertexIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_TrimVertexIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_EdgeSetIdentifiedBy27
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueEdgeSet * myReturn = myObject->EdgeSetIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_EdgeSetIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_TrimLoopIdentifiedBy28
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong identifier)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RescueTrimLoop * myReturn = myObject->TrimLoopIdentifiedBy(identifier);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_TrimLoopIdentifiedBy");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_UnloadWireframe29
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->UnloadWireframe();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_UnloadWireframe");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframe_WireframeHasChanged30
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    RESCUEBOOL myReturn = myObject->WireframeHasChanged();
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_WireframeHasChanged");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframe_LoadNo31
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    jlong myReturn = myObject->LoadNo();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_LoadNo");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWireframe_MarkWireframeChanged32
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    myObject->MarkWireframeChanged();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_MarkWireframeChanged");
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_X133
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->X1();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_X1");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_X234
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->X2();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_X2");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_X335
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->X3();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_X3");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_X436
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->X4();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_X4");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_Y137
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->Y1();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Y1");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_Y238
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->Y2();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Y2");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_Y339
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->Y3();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Y3");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_Y440
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->Y4();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Y4");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_Z141
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->Z1();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Z1");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jfloat JNICALL Java_org_Rescue_rjni_RescueWireframe_Z242
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframe *myObject = (RescueWireframe *) nativeNdx;
    float myReturn = myObject->Z2();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframe_Z2");
    return (jfloat) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframeOwner_ParentModel0
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframeOwner *myObject = (RescueWireframeOwner *) nativeNdx;
    RescueModel * myReturn = myObject->ParentModel();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeOwner_ParentModel");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframeOwner_Wireframe1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframeOwner *myObject = (RescueWireframeOwner *) nativeNdx;
    RescueWireframe * myReturn = myObject->Wireframe();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeOwner_Wireframe");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframeOwner_IsOfType2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWireframeOwner *myObject = (RescueWireframeOwner *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeOwner_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueWireframeStub_Delete_1RescueWireframeStub
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueWireframeStub *myObj = (RescueWireframeStub *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeStub_~RescueWireframeStub");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframeStub_WireframeId1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframeStub *myObject = (RescueWireframeStub *) nativeNdx;
    jlong myReturn = myObject->WireframeId();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeStub_WireframeId");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframeStub_ObjectId2
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframeStub *myObject = (RescueWireframeStub *) nativeNdx;
    jlong myReturn = myObject->ObjectId();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeStub_ObjectId");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframeStub_Wireframe3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong modelNdx)
{
  try
  {
    RescueModel * model = (RescueModel *) modelNdx;
    RescueWireframeStub *myObject = (RescueWireframeStub *) nativeNdx;
    RescueWireframe * myReturn = myObject->Wireframe((RescueModel *) model);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeStub_Wireframe");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueWireframeStub_BestIdentifier4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueWireframeStub *myObject = (RescueWireframeStub *) nativeNdx;
    jlong myReturn = myObject->BestIdentifier();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeStub_BestIdentifier");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueWireframeStub_IsOfType5
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jint thisTypeInt)
{
  try
  {
    _RescueObjectType thisType = (_RescueObjectType) thisTypeInt;
    RescueWireframeStub *myObject = (RescueWireframeStub *) nativeNdx;
    RESCUEBOOL myReturn = myObject->IsOfType((_RescueObjectType) thisType);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueWireframeStub_IsOfType");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueZStack_Delete_1RescueZStack
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueZStack *myObj = (RescueZStack *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueZStack_~RescueZStack");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_Create_1RescueGeometryPropertyList0
  (JNIEnv *env, jobject obj, jlong geometryNdx, jboolean byTimeStep, jboolean includeLGRs, 
   jlong groupNdx, jstring timeStepName)
{
  try
  {
    jboolean nameBool;
    RescueGeometry *geometry = (RescueGeometry *) geometryNdx;
    RescuePropertyGroup *group = (RescuePropertyGroup *) groupNdx;
    const char *name = 0;
    if (timeStepName != 0)
    {
      name = env->GetStringUTFChars(timeStepName, &nameBool);
    }
    RescueGeometryPropertyList * myReturn = new RescueGeometryPropertyList(geometry, 
                                                                          (RESCUEBOOL) byTimeStep,
                                                                          (RESCUEBOOL) includeLGRs,
                                                                          group,
                                                                          (char *) name);
    if (timeStepName != 0)
    {
      env->ReleaseStringUTFChars(timeStepName, name);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in Create_1RescueGeometryPropertyList0");
    return (jlong) 0;
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryPropertyList
 * Method:    Delete_RescueGeometryPropertyList
 * Signature: (J)V
 */

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_Delete_1RescueGeometryPropertyList
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueGeometryPropertyList *myObject = (RescueGeometryPropertyList *) objNdx;
    delete myObject;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in Delete_1RescueGeometryPropertyList");
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryPropertyList
 * Method:    Count1
 * Signature: (J)I
 */
extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_Count1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGeometryPropertyList *myObject = (RescueGeometryPropertyList *) nativeNdx;
    jint myReturn = myObject->Count();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryPropertyList_Count1");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryPropertyList
 * Method:    NthRowProperty2
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_NthRowProperty2
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryPropertyList *myObject = (RescueGeometryPropertyList *) nativeNdx;
    RescueProperty * myReturn = myObject->NthRowProperty(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryPropertyList_NthRowProperty2");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryPropertyList
 * Method:    NthRowGeometry3
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_NthRowGeometry3
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryPropertyList *myObject = (RescueGeometryPropertyList *) nativeNdx;
    RescueGeometry * myReturn = myObject->NthRowGeometry(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryPropertyList_NthRowGeometry3");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryPropertyList
 * Method:    NthRowTimeStepGroup4
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_NthRowTimeStepGroup4
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryPropertyList *myObject = (RescueGeometryPropertyList *) nativeNdx;
    RescueTimeStepGroup * myReturn = myObject->NthRowTimeStepGroup(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryPropertyList_NthRowTimeStepGroup4");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryPropertyList
 * Method:    NthRowPropertyGroup5
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryPropertyList_NthRowPropertyGroup5
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryPropertyList *myObject = (RescueGeometryPropertyList *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->NthRowPropertyGroup(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryPropertyList_NthRowPropertyGroup5");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryLGRList_Create_1RescueGeometryLGRList0
  (JNIEnv *env, jobject obj, jlong geometryNdx, jboolean byTimeStep, 
   jlong groupNdx, jstring timeStepName)
{
  try
  {
    jboolean nameBool;
    RescueGeometry *geometry = (RescueGeometry *) geometryNdx;
    RescuePropertyGroup *group = (RescuePropertyGroup *) groupNdx;
    const char *name = 0;
    if (timeStepName != 0)
    {
      name = env->GetStringUTFChars(timeStepName, &nameBool);
    }
    RescueGeometryLGRList * myReturn = new RescueGeometryLGRList(geometry, 
                                                                          (RESCUEBOOL) byTimeStep,
                                                                          group,
                                                                          (char *) name);
    if (timeStepName != 0)
    {
      env->ReleaseStringUTFChars(timeStepName, name);
    }
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in Create_1RescueGeometryLGRList0");
    return (jlong) 0;
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryLGRList
 * Method:    Delete_RescueGeometryLGRList
 * Signature: (J)V
 */

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueGeometryLGRList_Delete_1RescueGeometryLGRList
  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    RescueGeometryLGRList *myObject = (RescueGeometryLGRList *) objNdx;
    delete myObject;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in Delete_1RescueGeometryLGRList");
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryLGRList
 * Method:    Count1
 * Signature: (J)I
 */
extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueGeometryLGRList_Count1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueGeometryLGRList *myObject = (RescueGeometryLGRList *) nativeNdx;
    jint myReturn = myObject->Count();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryLGRList_Count1");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryLGRList
 * Method:    NthRowGeometry3
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryLGRList_NthRowGeometry3
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryLGRList *myObject = (RescueGeometryLGRList *) nativeNdx;
    RescueGeometry * myReturn = myObject->NthRowGeometry(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryLGRList_NthRowGeometry3");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryLGRList
 * Method:    NthRowTimeStepGroup4
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryLGRList_NthRowTimeStepGroup4
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryLGRList *myObject = (RescueGeometryLGRList *) nativeNdx;
    RescueTimeStepGroup * myReturn = myObject->NthRowTimeStepGroup(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryLGRList_NthRowTimeStepGroup4");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

/*
 * Class:     org_Rescue_rjni_RescueGeometryLGRList
 * Method:    NthRowPropertyGroup5
 * Signature: (JI)J
 */
extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueGeometryLGRList_NthRowPropertyGroup5
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zbn)
{
  try
  {
    RescueGeometryLGRList *myObject = (RescueGeometryLGRList *) nativeNdx;
    RescuePropertyGroup * myReturn = myObject->NthRowPropertyGroup(zbn);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueGeometryLGRList_NthRowPropertyGroup5");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_cBagRescueTimeStepGroup_Create_1cBagRescueTimeStepGroup0
														  (JNIEnv *env, jobject obj)
{
  try
  {
    cBagRescueTimeStepGroup *myReturn = new cBagRescueTimeStepGroup();
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in cBagRescueTimeStepGroup_cBagRescueTimeStepGroup");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_cBagRescueTimeStepGroup_Delete_1cBagRescueTimeStepGroup
														  (JNIEnv *env, jobject obj, jlong objNdx)
{
  try
  {
    cBagRescueTimeStepGroup *myObj = (cBagRescueTimeStepGroup *) objNdx;
    delete myObj;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in cBagRescueTimeStepGroup_~cBagRescueTimeStepGroup");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_cBagRescueTimeStepGroup_AddTo2
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong newObjectNdx)
{
  try
  {
    RescueTimeStepGroup * newObject = (RescueTimeStepGroup *) newObjectNdx;
    cBagRescueTimeStepGroup *myObject = (cBagRescueTimeStepGroup *) nativeNdx;
    myObject->operator+=((RescueTimeStepGroup *) newObject);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in cBagRescueTimeStepGroup_operator+=");
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_cBagRescueTimeStepGroup_RemoveFrom3
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong existingObjectNdx)
{
  try
  {
    RescueTimeStepGroup * existingObject = (RescueTimeStepGroup *) existingObjectNdx;
    cBagRescueTimeStepGroup *myObject = (cBagRescueTimeStepGroup *) nativeNdx;
    RESCUEBOOL myReturn = myObject->operator-=((RescueTimeStepGroup *) existingObject);
    return ((myReturn == FALSE) ? (jboolean) false : (jboolean) true);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in cBagRescueTimeStepGroup_operator-=");
    return (jboolean) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_cBagRescueTimeStepGroup_NthObject4
  (JNIEnv *env, jobject obj, jlong nativeNdx  ,jlong ordinal)
{
  try
  {
    cBagRescueTimeStepGroup *myObject = (cBagRescueTimeStepGroup *) nativeNdx;
    RescueTimeStepGroup * myReturn = myObject->NthObject((RESCUEINT64) ordinal);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in cBagRescueTimeStepGroup_NthObject");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_cBagRescueTimeStepGroup_Count5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    cBagRescueTimeStepGroup *myObject = (cBagRescueTimeStepGroup *) nativeNdx;
    jlong myReturn = myObject->Count64();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in cBagRescueTimeStepGroup_Count");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_Delete_1RescueTimeStepManager
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepManager *tManager = (RescueTimeStepManager *) nativeNdx;
    delete tManager;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in Delete_1RescueTimeStepManager");
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_UniquePropertyNameCount5a
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepManager *tManager = (RescueTimeStepManager *) nativeNdx;
    return (jint) tManager->UniquePropertyNameCount64();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_UniquePropertyNameCount5a");
    return (jint) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_Count5
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepManager *tManager = (RescueTimeStepManager *) nativeNdx;
    return (jlong) tManager->Count64();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in Create_1RescueTimeStepManager");
    return (jlong) 0; // Dummy return prevents compiler warning.
  }
}

extern "C"
JNIEXPORT jobjectArray JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_UniquePropertyNames6a
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    RESCUECHAR **names = manager->UniquePropertyNames();
    int returnCount = manager->UniquePropertyNameCount();
    jobjectArray returnArray = (jobjectArray) env->NewObjectArray(returnCount, 
                                                 env->FindClass("java/lang/String"), 
                                                 env->NewStringUTF(""));
    int rLoop;
    for (rLoop = 0; rLoop < returnCount; rLoop++)
    {
      env->SetObjectArrayElement(returnArray, rLoop, 
                                 env->NewStringUTF(names[rLoop]));
    }
    return returnArray;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobjectArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_UniquePropertyNames");
    return (jobjectArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jobjectArray JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_UniqueTimestepNames6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    RESCUECHAR **names = manager->UniqueTimestepNames();
    int returnCount = manager->Count();
    jobjectArray returnArray = (jobjectArray) env->NewObjectArray(returnCount, 
                                                 env->FindClass("java/lang/String"), 
                                                 env->NewStringUTF(""));
    int rLoop;
    for (rLoop = 0; rLoop < returnCount; rLoop++)
    {
      env->SetObjectArrayElement(returnArray, rLoop, 
                                 env->NewStringUTF(names[rLoop]));
    }
    return returnArray;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobjectArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_UniqueTimestepNames");
    return (jobjectArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlongArray JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_TimeSteps7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    RESCUEINT64 howMany = manager->Count64();
    RescueTimeStepGroup **groups = manager->TimeSteps();
    jlong *bagNdxes = new jlong[howMany];
    int loop;
    for (loop = 0; loop < howMany; loop++)
    {
      bagNdxes[loop] = (jlong) groups[loop];
    }
    jlongArray myReturn = env->NewLongArray(howMany);
    env->SetLongArrayRegion(myReturn, 0, howMany, bagNdxes);
    delete [] bagNdxes;
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_TimeSteps7");
    return (jlongArray) 0; // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_GroupForTime8
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring timeToFind)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(timeToFind, &nameBool);
    RescueTimeStepGroup * myReturn = manager->GroupForTime((char *) name);
    env->ReleaseStringUTFChars(timeToFind, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_GroupsForTime8");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_MakeTimeStepGroup10a
  (JNIEnv *env, jobject obj, jlong nativeNdx, jint year, jint month, jint day)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    RescueTimeStepGroup *myReturn = manager->MakeTimeStepGroup(year, month, day);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_MakeTimeStepGroup10a");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }

}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_MakeTimeStepGroup10b
  (JNIEnv *env, jobject obj, jlong nativeNdx, jint year, jint month, jint day, 
                                                              jint hour, jint minute, jint second)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    RescueTimeStepGroup *myReturn = manager->MakeTimeStepGroup(year, month, day, hour, minute, second);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_MakeTimeStepGroup10b");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }

}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueTimeStepManager_MakeTimeStepGroup10c
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring nameToFind)
{
  try
  {
    RescueTimeStepManager *manager = (RescueTimeStepManager *) nativeNdx;
    jboolean nameBool;
    const char *name = env->GetStringUTFChars(nameToFind, &nameBool);
    RescueTimeStepGroup *myReturn = manager->MakeTimeStepGroup(name);
    env->ReleaseStringUTFChars(nameToFind, name);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueTimeStepManager_GroupsForTime8");
    return (jlong) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUOM_IsPer
  (JNIEnv *env, jclass cls, jstring name1Str)
{
  try
  {
    jboolean name1Bool;
    const char *name1 = env->GetStringUTFChars(name1Str, &name1Bool);
    jboolean myReturn = RescueUOM::IsPer(name1);
    env->ReleaseStringUTFChars(name1Str, name1);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_IsPer");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUOM_IsIES
  (JNIEnv *env, jclass cls, jstring name1Str)
{
  try
  {
    jboolean name1Bool;
    const char *name1 = env->GetStringUTFChars(name1Str, &name1Bool);
    jboolean myReturn = RescueUOM::IsIES(name1);
    env->ReleaseStringUTFChars(name1Str, name1);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_IsIES");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUOM_CompareUOM
  (JNIEnv *env, jclass cls, jstring name1Str, jstring name2Str)
{
  try
  {
    jboolean name1Bool;
    const char *name1 = env->GetStringUTFChars(name1Str, &name1Bool);
    jboolean name2Bool;
    const char *name2 = env->GetStringUTFChars(name2Str, &name2Bool);
    jboolean myReturn = (RescueUOM::CompareUOM(name1, name2) == 0);
    env->ReleaseStringUTFChars(name1Str, name1);
    env->ReleaseStringUTFChars(name2Str, name2);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in CompareUOM");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueUOM_IsBase
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jboolean myReturn = RescueUOM::IsBase(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_IsBase");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueUOM_IndexFromName
  (JNIEnv *env, jclass cls, jstring name1Str)
{
  try
  {
    jboolean name1Bool;
    const char *name1 = env->GetStringUTFChars(name1Str, &name1Bool);
    jint myReturn = RescueUOM::IndexFromName(name1);
    env->ReleaseStringUTFChars(name1Str, name1);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) -1;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_IndexFromName");
    return (jint) -1;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueUOM_UOMCount
  (JNIEnv *env, jclass cls)
{
  try
  {
    jint myReturn = RescueUOM::UOMCount();
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) -1;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_UOMCount");
    return (jint) -1;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueUOM_QuantityTypeCount
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jint myReturn = RescueUOM::QuantityTypeCount(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_QuantityTypeCount");
    return (jint) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueUOM_BaseUnitIndex
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jint myReturn = RescueUOM::BaseUnitIndex(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_BaseUnitIndex");
    return (jint) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jint JNICALL Java_org_Rescue_rjni_RescueUOM_ConversionType
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jint myReturn = (jint) RescueUOM::ConversionType(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jint) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_ConversionType");
    return (jint) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_ConversionFactor
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::ConversionFactor(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_ConversionFactor");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_ConversionNumerator
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::ConversionNumerator(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_ConversionNumerator");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_ConversionDenominator
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::ConversionDenominator(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_ConversionDenominator");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_Conversion_1A
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::Conversion_A(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_Conversion_1A");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_Conversion_1B
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::Conversion_B(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_Conversion_1B");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_Conversion_1C
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::Conversion_C(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_Conversion_1C");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jdouble JNICALL Java_org_Rescue_rjni_RescueUOM_Conversion_1D
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    jdouble myReturn = RescueUOM::Conversion_D(zbn);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_Conversion_1D");
    return (jdouble) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueUOM_Name
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    const char * myReturn = RescueUOM::Name(zbn);
    return env->NewStringUTF(myReturn);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_Name");
    return (jstring) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jobjectArray JNICALL Java_org_Rescue_rjni_RescueUOM_QuantityTypeArray
  (JNIEnv *env, jclass cls, jint zbn)
{
  try
  {
    const char ** myReturn = RescueUOM::QuantityTypeArray(zbn);
    int returnCount = RescueUOM::QuantityTypeCount(zbn);
    jobjectArray returnArray = (jobjectArray) env->NewObjectArray(returnCount, 
                                                 env->FindClass("java/lang/String"), 
                                                 env->NewStringUTF(""));
    int rLoop;
    for (rLoop = 0; rLoop < returnCount; rLoop++)
    {
      env->SetObjectArrayElement(returnArray, rLoop, 
                               env->NewStringUTF(myReturn[rLoop]));
    }
    return returnArray;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobjectArray) 0;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueUOM_QuantityTypeArray");
    return (jobjectArray) 0;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueDocumentList_Count1
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueDocumentList *list = (RescueDocumentList *) nativeNdx;
    return list->Count64();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocumentList_Count");
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueDocumentList_NthRescueDocument2
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zeroBasedNdx)
{
  try
  {
    RescueDocumentList *list = (RescueDocumentList *) nativeNdx;
    return (jlong) list->NthRescueDocument(zeroBasedNdx);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocumentList_NthRescueDocument");
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jobjectArray JNICALL Java_org_Rescue_rjni_RescueDocumentList_UniqueMetaKeys3
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueDocumentList *list = (RescueDocumentList *) nativeNdx;
    cSetString *names = list->UniqueMetaKeys();
    int returnCount = names->Count();
    jobjectArray returnArray = (jobjectArray) env->NewObjectArray(returnCount, 
                                                 env->FindClass("java/lang/String"), 
                                                 env->NewStringUTF(""));
    int rLoop;
    for (rLoop = 0; rLoop < returnCount; rLoop++)
    {
      env->SetObjectArrayElement(returnArray, rLoop, 
                                 env->NewStringUTF(names->NthObject(rLoop)->NonNullString()));
    }
    return returnArray;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobjectArray) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocumentList_UniqueMetaKeys");
    return (jobjectArray) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueDocumentList_NthDocumentWithKey4
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong zeroBasedNdx, jstring keyToFindStr)
{
  try
  {
    RescueDocumentList *list = (RescueDocumentList *) nativeNdx;
    jboolean keyToFindBool;
    const char *keyToFind = env->GetStringUTFChars(keyToFindStr, &keyToFindBool);
    RescueDocument *myReturn = list->NthDocumentWithKey(zeroBasedNdx, keyToFind);
    env->ReleaseStringUTFChars(keyToFindStr, keyToFind);
    return (jlong) myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocumentList_NthDocumentWithKey");
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueDocumentList_RemoveDocument5
  (JNIEnv *env, jobject obj, jlong nativeNdx, jlong docNdx)
{
  try
  {
    RescueDocumentList *list = (RescueDocumentList *) nativeNdx;
    RescueDocument *toRemove = (RescueDocument *) docNdx;
    return list->RemoveDocument(toRemove);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocumentList_RemoveDocument");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueDocument_Create_1RescueDocument1
  (JNIEnv *env, jobject obj, jlong modelNdx)
{
  try
  {
    RescueModel *model = (RescueModel *) modelNdx;
    RescueDocument *document = new RescueDocument(model);
    return (jlong) document;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_CreateRescueDocument");
    return (jlong) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueDocument_ImportDocument2
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring pathNameStr)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    jboolean pathNameBool;
    const char *pathName = env->GetStringUTFChars(pathNameStr, &pathNameBool);
    jboolean myReturn = document->ImportDocument(pathName);
    env->ReleaseStringUTFChars(pathNameStr, pathName);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_ImportDocument");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueDocument_SetDocumentName3
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring nameToSetStr)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    jboolean nameToSetBool;
    const char *nameToSet = env->GetStringUTFChars(nameToSetStr, &nameToSetBool);
    document->SetDocumentName(nameToSet);
    env->ReleaseStringUTFChars(nameToSetStr, nameToSet);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_SetDocumenName");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueDocument_ClearMetaKeywords4
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    document->ClearMetaKeywords();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_ClearMetaKeywords");
  }
}

extern "C" 
JNIEXPORT void JNICALL Java_org_Rescue_rjni_RescueDocument_AddMetaKeyword5
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring keyWordStr)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    jboolean keyWordBool;
    const char *keyWord = env->GetStringUTFChars(keyWordStr, &keyWordBool);
    document->AddMetaKeyword(keyWord);
    env->ReleaseStringUTFChars(keyWordStr, keyWord);
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_SetDocumentName");
  }
}

extern "C" 
JNIEXPORT jstring JNICALL Java_org_Rescue_rjni_RescueDocument_DocumentName6
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    RCHString * myReturn = document->DocumentName();
    return env->NewStringUTF(myReturn->String());
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jstring) 0;
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_DocumentName");
    return (jstring) 0;
  }
}

extern "C" 
JNIEXPORT jobjectArray JNICALL Java_org_Rescue_rjni_RescueDocument_MetaKeywords7
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    cSetString *names = document->MetaKeywords();
    int returnCount = names->Count();
    jobjectArray returnArray = (jobjectArray) env->NewObjectArray(returnCount, 
                                                 env->FindClass("java/lang/String"), 
                                                 env->NewStringUTF(""));
    int rLoop;
    for (rLoop = 0; rLoop < returnCount; rLoop++)
    {
      env->SetObjectArrayElement(returnArray, rLoop, 
                                 env->NewStringUTF(names->NthObject(rLoop)->NonNullString()));
    }
    return returnArray;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jobjectArray) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_MetaKeywords");
    return (jobjectArray) false;   // Dummy return prevents compiler warning.
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueDocument_ContainsMetaKey8
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring keyToFindStr)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    jboolean keyToFindBool;
    const char *keyToFind = env->GetStringUTFChars(keyToFindStr, &keyToFindBool);
    jboolean myReturn = document->ContainsMetaKey(keyToFind);
    env->ReleaseStringUTFChars(keyToFindStr, keyToFind);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) 0;
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_ContainsMetaKey");
    return (jboolean) 0;
  }
}

extern "C" 
JNIEXPORT jlong JNICALL Java_org_Rescue_rjni_RescueDocument_DocumentLength9
  (JNIEnv *env, jobject obj, jlong nativeNdx)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    return document->DocumentLength64();
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jlong) 0;
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_DocumentLength");
    return (jlong) 0;
  }
}

extern "C" 
JNIEXPORT jboolean JNICALL Java_org_Rescue_rjni_RescueDocument_ExportAs10
  (JNIEnv *env, jobject obj, jlong nativeNdx, jstring pathNameStr)
{
  try
  {
    RescueDocument *document = (RescueDocument *) nativeNdx;
    jboolean pathNameBool;
    const char *pathName = env->GetStringUTFChars(pathNameStr, &pathNameBool);
    jboolean myReturn = document->ExportAs(pathName);
    env->ReleaseStringUTFChars(pathNameStr, pathName);
    return myReturn;
  }
  catch (char *errorText)
  {
    throwByName(env, "java/lang/RuntimeException", errorText);
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
  catch (...)
  {
    throwByName(env, "java/lang/RuntimeException", "Unexpected error in RescueDocument_ExportAs");
    return (jboolean) false;   // Dummy return prevents compiler warning.
  }
}
